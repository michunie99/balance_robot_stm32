
Balancing_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009358  08009358  00019358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001dc  08009970  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009970  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e33  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266e  00000000  00000000  0003303f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00036770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018611  00000000  00000000  00037740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b48  00000000  00000000  0004fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936fa  00000000  00000000  00063899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c8  00000000  00000000  000f6fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800933c 	.word	0x0800933c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800933c 	.word	0x0800933c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <init_imc20948>:
 *      Author: michunie
 */

#include "ICM20948_I2C.h"

uint8_t init_imc20948(IMC20498 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]

	/* Set up structure */
	dev->i2cHandle 			= i2cHandle;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	601a      	str	r2, [r3, #0]

	dev->acc_g[0]			= 0.0f;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
	dev->acc_g[1]			= 0.0f;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
	dev->acc_g[2]			= 0.0f;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]

	dev->gyro_dps[0]		= 0.0f;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
	dev->gyro_dps[1]		= 0.0f;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
	dev->gyro_dps[2]		= 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]

	/* Store number of transactions errors */
	uint8_t errNum = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check device ID */
	uint8_t regData;

	status = imc20948_register_read(dev, B0_WHO_AM_I, &regData);
 8000fa0:	f107 030d 	add.w	r3, r7, #13
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f975 	bl	8001298 <imc20948_register_read>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	73fb      	strb	r3, [r7, #15]

	if (regData != IMC20948_DEVICE_ID){
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	2bea      	cmp	r3, #234	; 0xea
 8000fca:	d001      	beq.n	8000fd0 <init_imc20948+0x74>

		return 255;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	e094      	b.n	80010fa <init_imc20948+0x19e>

	}

	/* Gyroscope configuration */

	status = imc20948_select_bank(dev, 2); // Select USER_BANK_2
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f9b5 	bl	8001342 <imc20948_select_bank>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK){
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <init_imc20948+0x8a>

		return 254;
 8000fe2:	23fe      	movs	r3, #254	; 0xfe
 8000fe4:	e089      	b.n	80010fa <init_imc20948+0x19e>
//	 * Gyroscope settings
//	 * Scale 					+/- 500 dps
//	 * Low pass					361.4 Hz 3db BW
//	 * Sample rate 			 	102.27 Hz
//	*/
	regData = 0x3B;
 8000fe6:	233b      	movs	r3, #59	; 0x3b
 8000fe8:	737b      	strb	r3, [r7, #13]
//	 * Low pass					OFF
//	 * Sample rate 			 	9 kHz
//	*/
//	regData = 0x3A;

	status = imc20948_register_write(dev, B2_GYRO_CONFIG_1, &regData);
 8000fea:	f107 030d 	add.w	r3, r7, #13
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f98a 	bl	800130c <imc20948_register_write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	4413      	add	r3, r2
 800100e:	73fb      	strb	r3, [r7, #15]

	/* Uncomment for the first setting */
	regData = 0x0A;
 8001010:	230a      	movs	r3, #10
 8001012:	737b      	strb	r3, [r7, #13]
	status = imc20948_register_write(dev, B2_GYRO_SMPLRT_DIV, &regData);
 8001014:	f107 030d 	add.w	r3, r7, #13
 8001018:	461a      	mov	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f975 	bl	800130c <imc20948_register_write>
 8001022:	4603      	mov	r3, r0
 8001024:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	4413      	add	r3, r2
 8001038:	73fb      	strb	r3, [r7, #15]
//	 * Scale 					+/- 2 g
//	 * Low pass					361.4 Hz 3db BW
//	 * Sample rate 			 	102.27 Hz
//	*/
//
	regData = 0x19;
 800103a:	2319      	movs	r3, #25
 800103c:	737b      	strb	r3, [r7, #13]
	 * Scale 					+/- 2 g
	 * Low pass					OFF
	 * Sample rate 			 	4.5 kHz
	*/
//	regData = 0x18;
	status = imc20948_register_write(dev, B2_ACCEL_CONFIG, &regData);
 800103e:	f107 030d 	add.w	r3, r7, #13
 8001042:	461a      	mov	r2, r3
 8001044:	2114      	movs	r1, #20
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f960 	bl	800130c <imc20948_register_write>
 800104c:	4603      	mov	r3, r0
 800104e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4413      	add	r3, r2
 8001062:	73fb      	strb	r3, [r7, #15]

	/* Uncomment for the first setting */
	regData = 0x0A;
 8001064:	230a      	movs	r3, #10
 8001066:	737b      	strb	r3, [r7, #13]
	status = imc20948_register_write(dev, B2_ACCEL_SMPLRT_DIV_2, &regData);
 8001068:	f107 030d 	add.w	r3, r7, #13
 800106c:	461a      	mov	r2, r3
 800106e:	2111      	movs	r1, #17
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f94b 	bl	800130c <imc20948_register_write>
 8001076:	4603      	mov	r3, r0
 8001078:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	4413      	add	r3, r2
 800108c:	73fb      	strb	r3, [r7, #15]

	status = imc20948_select_bank(dev, 0); // Select USER_BANK_0
 800108e:	2100      	movs	r1, #0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f956 	bl	8001342 <imc20948_select_bank>
 8001096:	4603      	mov	r3, r0
 8001098:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK){
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <init_imc20948+0x148>

		return 254;
 80010a0:	23fe      	movs	r3, #254	; 0xfe
 80010a2:	e02a      	b.n	80010fa <init_imc20948+0x19e>

	}
	/* Wake up chip */
	regData = 0x01;
 80010a4:	2301      	movs	r3, #1
 80010a6:	737b      	strb	r3, [r7, #13]
	status = imc20948_register_write(dev, B0_PWR_MGMT_1, &regData);
 80010a8:	f107 030d 	add.w	r3, r7, #13
 80010ac:	461a      	mov	r2, r3
 80010ae:	2106      	movs	r1, #6
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f92b 	bl	800130c <imc20948_register_write>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	4413      	add	r3, r2
 80010cc:	73fb      	strb	r3, [r7, #15]

	/* Enable data ready interrupt */
	regData = 0x01;
 80010ce:	2301      	movs	r3, #1
 80010d0:	737b      	strb	r3, [r7, #13]
	status = imc20948_register_write(dev, B0_INT_ENABLE_1, &regData);
 80010d2:	f107 030d 	add.w	r3, r7, #13
 80010d6:	461a      	mov	r2, r3
 80010d8:	2111      	movs	r1, #17
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f916 	bl	800130c <imc20948_register_write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4413      	add	r3, r2
 80010f6:	73fb      	strb	r3, [r7, #15]

	/* Return errors */
	return errNum;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <imc20948_acc_read>:

HAL_StatusTypeDef imc20948_acc_read(IMC20498 *dev){
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t regData[6];

	status = imc20948_select_bank(dev, 0); // Select USER_BANK 0
 800110c:	2100      	movs	r1, #0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f917 	bl	8001342 <imc20948_select_bank>
 8001114:	4603      	mov	r3, r0
 8001116:	75fb      	strb	r3, [r7, #23]

	status = imc20948_registers_read(dev, B0_ACCEL_XOUT_H, regData, 6);
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	2306      	movs	r3, #6
 800111e:	212d      	movs	r1, #45	; 0x2d
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f8d4 	bl	80012ce <imc20948_registers_read>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]

	int16_t raw_acc[3];

	raw_acc[0] = ((int16_t) regData[0] << 8) | regData[1];
 800112a:	7c3b      	ldrb	r3, [r7, #16]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	7c7b      	ldrb	r3, [r7, #17]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	813b      	strh	r3, [r7, #8]
	raw_acc[1] = ((int16_t) regData[2] << 8) | regData[3];
 800113a:	7cbb      	ldrb	r3, [r7, #18]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7cfb      	ldrb	r3, [r7, #19]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	817b      	strh	r3, [r7, #10]
	raw_acc[2] = ((int16_t) regData[4] << 8) | regData[5];
 800114a:	7d3b      	ldrb	r3, [r7, #20]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	7d7b      	ldrb	r3, [r7, #21]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	81bb      	strh	r3, [r7, #12]

	/* Convert raw to G acceleration (for 2G range divide by 16,384)*/
	dev->acc_g[0] = (float) raw_acc[0]/16384;
 800115a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	eddf 6a13 	vldr	s13, [pc, #76]	; 80011b4 <imc20948_acc_read+0xb0>
 800116a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_g[1] = (float)	raw_acc[1]/16384;
 8001174:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001180:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011b4 <imc20948_acc_read+0xb0>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_g[2] = (float)	raw_acc[2]/16384;
 800118e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	eddf 6a06 	vldr	s13, [pc, #24]	; 80011b4 <imc20948_acc_read+0xb0>
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a03 	vstr	s15, [r3, #12]

	return status;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]

}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	46800000 	.word	0x46800000

080011b8 <imc20948_gyro_read>:

HAL_StatusTypeDef imc20948_gyro_read(IMC20498 *dev){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t regData[6];

	status = imc20948_select_bank(dev, 0); // Select USER_BANK 0
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f8bd 	bl	8001342 <imc20948_select_bank>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]

	status = imc20948_registers_read(dev, B0_GYRO_XOUT_H, regData, 6);
 80011cc:	f107 0210 	add.w	r2, r7, #16
 80011d0:	2306      	movs	r3, #6
 80011d2:	2133      	movs	r1, #51	; 0x33
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f87a 	bl	80012ce <imc20948_registers_read>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]

	int16_t raw_acc[3];

	raw_acc[0] = ((int16_t) regData[0] << 8) | regData[1];
 80011de:	7c3b      	ldrb	r3, [r7, #16]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7c7b      	ldrb	r3, [r7, #17]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	813b      	strh	r3, [r7, #8]
	raw_acc[1] = ((int16_t) regData[2] << 8) | regData[3];
 80011ee:	7cbb      	ldrb	r3, [r7, #18]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	817b      	strh	r3, [r7, #10]
	raw_acc[2] = ((int16_t) regData[4] << 8) | regData[5];
 80011fe:	7d3b      	ldrb	r3, [r7, #20]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7d7b      	ldrb	r3, [r7, #21]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	81bb      	strh	r3, [r7, #12]

	/* Convert raw to dps readings (for 2G range divide by 65.5)*/
	dev->gyro_dps[0] = raw_acc[0]/65.5;
 800120e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f98e 	bl	8000534 <__aeabi_i2d>
 8001218:	a31d      	add	r3, pc, #116	; (adr r3, 8001290 <imc20948_gyro_read+0xd8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fb1d 	bl	800085c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fcc5 	bl	8000bb8 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	611a      	str	r2, [r3, #16]
	dev->gyro_dps[1] = raw_acc[1]/65.5;
 8001234:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f97b 	bl	8000534 <__aeabi_i2d>
 800123e:	a314      	add	r3, pc, #80	; (adr r3, 8001290 <imc20948_gyro_read+0xd8>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcb2 	bl	8000bb8 <__aeabi_d2f>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	615a      	str	r2, [r3, #20]
	dev->gyro_dps[2] = raw_acc[2]/65.5;
 800125a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f968 	bl	8000534 <__aeabi_i2d>
 8001264:	a30a      	add	r3, pc, #40	; (adr r3, 8001290 <imc20948_gyro_read+0xd8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff faf7 	bl	800085c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc9f 	bl	8000bb8 <__aeabi_d2f>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]

	return status;
 8001280:	7dfb      	ldrb	r3, [r7, #23]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	00000000 	.word	0x00000000
 8001294:	40506000 	.word	0x40506000

08001298 <imc20948_register_read>:

/* Low level functions */

HAL_StatusTypeDef imc20948_register_read(IMC20498 *dev, uint8_t reg, uint8_t *data){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	460b      	mov	r3, r1
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMC20948_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	21d2      	movs	r1, #210	; 0xd2
 80012c0:	f001 ff9a 	bl	80031f8 <HAL_I2C_Mem_Read>
 80012c4:	4603      	mov	r3, r0

}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <imc20948_registers_read>:

HAL_StatusTypeDef imc20948_registers_read(IMC20498 *dev, uint8_t reg, uint8_t *data, uint8_t len){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	461a      	mov	r2, r3
 80012da:	460b      	mov	r3, r1
 80012dc:	72fb      	strb	r3, [r7, #11]
 80012de:	4613      	mov	r3, r2
 80012e0:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMC20948_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f2:	9102      	str	r1, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	21d2      	movs	r1, #210	; 0xd2
 80012fe:	f001 ff7b 	bl	80031f8 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0

}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <imc20948_register_write>:

HAL_StatusTypeDef imc20948_register_write(IMC20498 *dev, uint8_t reg, uint8_t *data){
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af04      	add	r7, sp, #16
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	460b      	mov	r3, r1
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMC20948_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	b29a      	uxth	r2, r3
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	21d2      	movs	r1, #210	; 0xd2
 8001334:	f001 fe66 	bl	8003004 <HAL_I2C_Mem_Write>
 8001338:	4603      	mov	r3, r0

}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <imc20948_select_bank>:

HAL_StatusTypeDef imc20948_select_bank(IMC20498 *dev, uint8_t bank_num){
 8001342:	b580      	push	{r7, lr}
 8001344:	b088      	sub	sp, #32
 8001346:	af04      	add	r7, sp, #16
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]

	uint8_t data = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

	data += (bank_num << 4);
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	b2da      	uxtb	r2, r3
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4413      	add	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMC20948_I2C_ADDR, REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	227f      	movs	r2, #127	; 0x7f
 8001378:	21d2      	movs	r1, #210	; 0xd2
 800137a:	f001 fe43 	bl	8003004 <HAL_I2C_Mem_Write>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <init_balance_regulator>:
#include "balance_pid.h"

#define abs(x)  (x<0)?-x:x
#define dir(x)	(x<0)?0:1

void init_balance_regulator(balance_pid* cnt,float set_point, float k_p, float k_i, float k_d){
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6178      	str	r0, [r7, #20]
 8001390:	ed87 0a04 	vstr	s0, [r7, #16]
 8001394:	edc7 0a03 	vstr	s1, [r7, #12]
 8001398:	ed87 1a02 	vstr	s2, [r7, #8]
 800139c:	edc7 1a01 	vstr	s3, [r7, #4]

	/* Initalize gains */
	cnt->k_p = k_p;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
	cnt->k_i = k_i;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
	cnt->k_d = k_d;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	60da      	str	r2, [r3, #12]

	/* Set point */
	cnt->set_point = set_point;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

	/* Anti wind up, scale and limits */
	cnt->anti_windup = 1200;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <init_balance_regulator+0x70>)
 80013bc:	619a      	str	r2, [r3, #24]

	cnt->motor1_scale = 1;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
	cnt->motor2_scale = 1;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013cc:	649a      	str	r2, [r3, #72]	; 0x48

	cnt->up_lim = UINT16_MAX;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d4:	64da      	str	r2, [r3, #76]	; 0x4c
	cnt->low_lim = -UINT16_MAX;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <init_balance_regulator+0x74>)
 80013da:	651a      	str	r2, [r3, #80]	; 0x50

	/* Initailize errors */
	cnt->total_error = 0;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
	cnt->prev_error = 0;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	44960000 	.word	0x44960000
 80013fc:	ffff0001 	.word	0xffff0001

08001400 <update_controler>:

void update_controler(balance_pid* cnt, float measured){
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	ed87 0a00 	vstr	s0, [r7]

	float error = cnt->set_point-measured;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a00 	vldr	s15, [r7]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a03 	vstr	s15, [r7, #12]

	cnt->total_error += error;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed93 7a04 	vldr	s14, [r3, #16]
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Check anti windup */
	if(cnt->total_error > cnt->anti_windup)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed93 7a04 	vldr	s14, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edd3 7a06 	vldr	s15, [r3, #24]
 800143e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd03      	ble.n	8001450 <update_controler+0x50>
		cnt->total_error = cnt->anti_windup;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	611a      	str	r2, [r3, #16]
	if(cnt->total_error < -cnt->anti_windup)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	ed93 7a04 	vldr	s14, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eef1 7a67 	vneg.f32	s15, s15
 8001460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d507      	bpl.n	800147a <update_controler+0x7a>
			cnt->total_error = -cnt->anti_windup;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001470:	eef1 7a67 	vneg.f32	s15, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a04 	vstr	s15, [r3, #16]


	/* Calculate control input for both wheels */
	float control = 	error*cnt->k_p +
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001480:	edd7 7a03 	vldr	s15, [r7, #12]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
						cnt->total_error*cnt->k_i +
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edd3 6a04 	vldr	s13, [r3, #16]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	edd3 7a02 	vldr	s15, [r3, #8]
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float control = 	error*cnt->k_p +
 8001498:	ee37 7a27 	vadd.f32	s14, s14, s15
						(cnt->prev_error-error)*cnt->k_d;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edd3 6a05 	vldr	s13, [r3, #20]
 80014a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float control = 	error*cnt->k_p +
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b8:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Set apropriate PWM values for both registers in controler */

	/* Motor 1 */
	float control1 = control * cnt->motor1_scale;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	edc7 7a05 	vstr	s15, [r7, #20]

	if(control1 >= cnt->up_lim)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ed97 7a05 	vldr	s14, [r7, #20]
 80014de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	db07      	blt.n	80014f8 <update_controler+0xf8>
		control1 = cnt->up_lim;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	edc7 7a05 	vstr	s15, [r7, #20]
	if(control1 <= cnt->low_lim)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ed97 7a05 	vldr	s14, [r7, #20]
 8001508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d807      	bhi.n	8001522 <update_controler+0x122>
		control1 = cnt->low_lim;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	edc7 7a05 	vstr	s15, [r7, #20]

	max14870_set_speed(&cnt->cntr_1, abs(control1));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f103 021c 	add.w	r2, r3, #28
 8001528:	edd7 7a05 	vldr	s15, [r7, #20]
 800152c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	d509      	bpl.n	800154a <update_controler+0x14a>
 8001536:	edd7 7a05 	vldr	s15, [r7, #20]
 800153a:	eef1 7a67 	vneg.f32	s15, s15
 800153e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001542:	ee17 3a90 	vmov	r3, s15
 8001546:	b29b      	uxth	r3, r3
 8001548:	e006      	b.n	8001558 <update_controler+0x158>
 800154a:	edd7 7a05 	vldr	s15, [r7, #20]
 800154e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	b29b      	uxth	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f000 fcea 	bl	8001f34 <max14870_set_speed>
	max1470_set_direction(&cnt->cntr_1, dir(control1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f103 021c 	add.w	r2, r3, #28
 8001566:	edd7 7a05 	vldr	s15, [r7, #20]
 800156a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	bf4c      	ite	mi
 8001574:	2301      	movmi	r3, #1
 8001576:	2300      	movpl	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f083 0301 	eor.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f000 fd10 	bl	8001faa <max1470_set_direction>

	/* Motor 2 */
	float control2 = control * cnt->motor2_scale;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001590:	ed97 7a02 	vldr	s14, [r7, #8]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a04 	vstr	s15, [r7, #16]

	if(control2 >= cnt->up_lim)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	db07      	blt.n	80015c6 <update_controler+0x1c6>
		control2 = cnt->up_lim;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	edc7 7a04 	vstr	s15, [r7, #16]
	if(control2 <= cnt->low_lim)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d807      	bhi.n	80015f0 <update_controler+0x1f0>
		control2 = cnt->low_lim;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	edc7 7a04 	vstr	s15, [r7, #16]

	max14870_set_speed(&cnt->cntr_2, abs(control2));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d509      	bpl.n	8001618 <update_controler+0x218>
 8001604:	edd7 7a04 	vldr	s15, [r7, #16]
 8001608:	eef1 7a67 	vneg.f32	s15, s15
 800160c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	b29b      	uxth	r3, r3
 8001616:	e006      	b.n	8001626 <update_controler+0x226>
 8001618:	edd7 7a04 	vldr	s15, [r7, #16]
 800161c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	b29b      	uxth	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f000 fc83 	bl	8001f34 <max14870_set_speed>
	max1470_set_direction(&cnt->cntr_2, dir(control2));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001634:	edd7 7a04 	vldr	s15, [r7, #16]
 8001638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	bf4c      	ite	mi
 8001642:	2301      	movmi	r3, #1
 8001644:	2300      	movpl	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f000 fca9 	bl	8001faa <max1470_set_direction>

	/* Save previous error */
	cnt->prev_error = error;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	615a      	str	r2, [r3, #20]
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <change_scales>:
		cnt->up_lim = upper;
		cnt->low_lim = lower;
	}
}

void change_scales(balance_pid* cnt, float motor1_scale, float motor2_scale){
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001672:	edc7 0a01 	vstr	s1, [r7, #4]
	cnt->motor1_scale = motor1_scale;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
	cnt->motor2_scale = motor2_scale;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <init_filter>:
 *      Author: michunie
 */

#include "comp_filter.h"

void init_filter( comp_filter* filter, float gain, float sample_time, float initial_value){
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	ed87 0a02 	vstr	s0, [r7, #8]
 800169a:	edc7 0a01 	vstr	s1, [r7, #4]
 800169e:	ed87 1a00 	vstr	s2, [r7]
	filter->curr_value = initial_value;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	601a      	str	r2, [r3, #0]
	filter->filter_gain = gain;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	605a      	str	r2, [r3, #4]
	filter->sample_time = sample_time;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <update_filter>:

float update_filter( comp_filter* filter, float acc, float gyro){
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80016cc:	edc7 0a01 	vstr	s1, [r7, #4]
	float gyro_angle = (gyro*filter->sample_time+filter->curr_value) * filter->filter_gain;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	edc7 7a05 	vstr	s15, [r7, #20]
	float acc_angle = acc * (1-filter->filter_gain);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	ed97 7a02 	vldr	s14, [r7, #8]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a04 	vstr	s15, [r7, #16]

	filter->curr_value = gyro_angle + acc_angle;
 8001710:	ed97 7a05 	vldr	s14, [r7, #20]
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	edc3 7a00 	vstr	s15, [r3]

	return filter->curr_value;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	ee07 3a90 	vmov	s15, r3
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173e:	f000 ff69 	bl	8002614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f88f 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f000 fa93 	bl	8001c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800174a:	f000 fa67 	bl	8001c1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800174e:	f000 f91f 	bl	8001990 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001752:	f000 f981 	bl	8001a58 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001756:	f000 fa27 	bl	8001ba8 <MX_TIM9_Init>
  MX_TIM5_Init();
 800175a:	f000 f9d1 	bl	8001b00 <MX_TIM5_Init>
  MX_I2C1_Init();
 800175e:	f000 f8e9 	bl	8001934 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  /* Initialize IMU and perform initial read */
  errorNum = init_imc20948(&imu, &hi2c1);
 8001762:	492f      	ldr	r1, [pc, #188]	; (8001820 <main+0xe8>)
 8001764:	482f      	ldr	r0, [pc, #188]	; (8001824 <main+0xec>)
 8001766:	f7ff fbf9 	bl	8000f5c <init_imc20948>
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  status = imc20948_acc_read(&imu);
 800176e:	482d      	ldr	r0, [pc, #180]	; (8001824 <main+0xec>)
 8001770:	f7ff fcc8 	bl	8001104 <imc20948_acc_read>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <main+0xf0>)
 800177a:	701a      	strb	r2, [r3, #0]
  if(status != HAL_OK){
	  // TODO add routine for bad read
  }
  status = imc20948_gyro_read(&imu);
 800177c:	4829      	ldr	r0, [pc, #164]	; (8001824 <main+0xec>)
 800177e:	f7ff fd1b 	bl	80011b8 <imc20948_gyro_read>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <main+0xf0>)
 8001788:	701a      	strb	r2, [r3, #0]

  /* Initialize complementary filter
   * gain 			= 0.98
   * frequency 		= 20Hz (0.05 sec)
   */
  init_filter(&angle, 0.94, 0.05,atan2f(imu.acc_g[0],-imu.acc_g[2]));
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <main+0xec>)
 800178c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <main+0xec>)
 8001792:	edd3 7a03 	vldr	s15, [r3, #12]
 8001796:	eef1 7a67 	vneg.f32	s15, s15
 800179a:	eef0 0a67 	vmov.f32	s1, s15
 800179e:	eeb0 0a47 	vmov.f32	s0, s14
 80017a2:	f007 fc4d 	bl	8009040 <atan2f>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	eeb0 1a67 	vmov.f32	s2, s15
 80017ae:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800182c <main+0xf4>
 80017b2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001830 <main+0xf8>
 80017b6:	481f      	ldr	r0, [pc, #124]	; (8001834 <main+0xfc>)
 80017b8:	f7ff ff69 	bl	800168e <init_filter>
   * P = 90
   * I = 25
   * D = 5
   * */

  init_balance_regulator(&robot_pid, 0, 200.0, 70.0, 50.0);
 80017bc:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8001838 <main+0x100>
 80017c0:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800183c <main+0x104>
 80017c4:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001840 <main+0x108>
 80017c8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001844 <main+0x10c>
 80017cc:	481e      	ldr	r0, [pc, #120]	; (8001848 <main+0x110>)
 80017ce:	f7ff fddb 	bl	8001388 <init_balance_regulator>
  change_scales(&robot_pid, 1, -1);
 80017d2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80017d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80017da:	481b      	ldr	r0, [pc, #108]	; (8001848 <main+0x110>)
 80017dc:	f7ff ff43 	bl	8001666 <change_scales>

  /* Motor contorlers */
  max14870_init(&(robot_pid.cntr_1), &htim3, TIM_CHANNEL_1,
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <main+0x114>)
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <main+0x118>)
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	2200      	movs	r2, #0
 80017f4:	4917      	ldr	r1, [pc, #92]	; (8001854 <main+0x11c>)
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <main+0x120>)
 80017f8:	f000 fb45 	bl	8001e86 <max14870_init>
  		  EN_A_Pin, GPIOA, DIR_A_Pin, GPIOB );
  max14870_init(&(robot_pid.cntr_2), &htim3, TIM_CHANNEL_2,
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <main+0x114>)
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2310      	movs	r3, #16
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <main+0x118>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	2204      	movs	r2, #4
 800180e:	4911      	ldr	r1, [pc, #68]	; (8001854 <main+0x11c>)
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <main+0x124>)
 8001812:	f000 fb38 	bl	8001e86 <max14870_init>
  		  EN_B_Pin, GPIOA, DIR_B_Pin, GPIOB );


  /* Initialize TIM9 interupt for control loop */
  HAL_TIM_Base_Start_IT(&htim9);
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <main+0x128>)
 8001818:	f002 ff58 	bl	80046cc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800181c:	e7fe      	b.n	800181c <main+0xe4>
 800181e:	bf00      	nop
 8001820:	200001f8 	.word	0x200001f8
 8001824:	200003b0 	.word	0x200003b0
 8001828:	2000042c 	.word	0x2000042c
 800182c:	3d4ccccd 	.word	0x3d4ccccd
 8001830:	3f70a3d7 	.word	0x3f70a3d7
 8001834:	200003cc 	.word	0x200003cc
 8001838:	42480000 	.word	0x42480000
 800183c:	428c0000 	.word	0x428c0000
 8001840:	43480000 	.word	0x43480000
 8001844:	00000000 	.word	0x00000000
 8001848:	200003d8 	.word	0x200003d8
 800184c:	40020400 	.word	0x40020400
 8001850:	40020000 	.word	0x40020000
 8001854:	2000024c 	.word	0x2000024c
 8001858:	200003f4 	.word	0x200003f4
 800185c:	20000408 	.word	0x20000408
 8001860:	20000324 	.word	0x20000324

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fec6 	bl	8006604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <SystemClock_Config+0xc8>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <SystemClock_Config+0xc8>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <SystemClock_Config+0xc8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <SystemClock_Config+0xcc>)
 80018ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <SystemClock_Config+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c8:	2310      	movs	r3, #16
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	2302      	movs	r3, #2
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018d4:	2308      	movs	r3, #8
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e0:	2304      	movs	r3, #4
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fa07 	bl	8003cfc <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f4:	f000 fac2 	bl	8001e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2103      	movs	r1, #3
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fc69 	bl	80041ec <HAL_RCC_ClockConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001920:	f000 faac 	bl	8001e7c <Error_Handler>
  }
}
 8001924:	bf00      	nop
 8001926:	3750      	adds	r7, #80	; 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_I2C1_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MX_I2C1_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_I2C1_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_I2C1_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_I2C1_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_I2C1_Init+0x50>)
 8001972:	f001 fa03 	bl	8002d7c <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 fa7e 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200001f8 	.word	0x200001f8
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <MX_TIM3_Init+0xc4>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000 - 1;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019c6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d8:	481d      	ldr	r0, [pc, #116]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019da:	f002 fed9 	bl	8004790 <HAL_TIM_PWM_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019e4:	f000 fa4a 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4619      	mov	r1, r3
 80019f6:	4816      	ldr	r0, [pc, #88]	; (8001a50 <MX_TIM3_Init+0xc0>)
 80019f8:	f003 fe44 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a02:	f000 fa3b 	bl	8001e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a06:	2360      	movs	r3, #96	; 0x60
 8001a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM3_Init+0xc0>)
 8001a1e:	f003 f9b3 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a28:	f000 fa28 	bl	8001e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM3_Init+0xc0>)
 8001a34:	f003 f9a8 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a3e:	f000 fa1d 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM3_Init+0xc0>)
 8001a44:	f000 fc12 	bl	800226c <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000024c 	.word	0x2000024c
 8001a54:	40000400 	.word	0x40000400

08001a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fdcc 	bl	8006604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <MX_TIM4_Init+0xa4>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001ac6:	f002 ffb1 	bl	8004a2c <HAL_TIM_Encoder_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f000 f9d4 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM4_Init+0xa0>)
 8001ae2:	f003 fdcf 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001aec:	f000 f9c6 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000294 	.word	0x20000294
 8001afc:	40000800 	.word	0x40000800

08001b00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2224      	movs	r2, #36	; 0x24
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fd78 	bl	8006604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <MX_TIM5_Init+0xa4>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b42:	2303      	movs	r3, #3
 8001b44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b6e:	f002 ff5d 	bl	8004a2c <HAL_TIM_Encoder_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b78:	f000 f980 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM5_Init+0xa0>)
 8001b8a:	f003 fd7b 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b94:	f000 f972 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	; 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002dc 	.word	0x200002dc
 8001ba4:	40000c00 	.word	0x40000c00

08001ba8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <MX_TIM9_Init+0x70>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = (154-1)/2;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bc2:	224c      	movs	r2, #76	; 0x4c
 8001bc4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65536-1;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001be2:	f002 fd23 	bl	800462c <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001bec:	f000 f946 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_TIM9_Init+0x6c>)
 8001bfc:	f003 f986 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001c06:	f000 f939 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000324 	.word	0x20000324
 8001c18:	40014000 	.word	0x40014000

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f003 fd98 	bl	8005788 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f90d 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000036c 	.word	0x2000036c
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a37      	ldr	r2, [pc, #220]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a30      	ldr	r2, [pc, #192]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|EN_A_Pin|EN_B_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001cfc:	4823      	ldr	r0, [pc, #140]	; (8001d8c <MX_GPIO_Init+0x11c>)
 8001cfe:	f001 f823 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_A_Pin|DIR_B_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001d08:	4821      	ldr	r0, [pc, #132]	; (8001d90 <MX_GPIO_Init+0x120>)
 8001d0a:	f001 f81d 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	481b      	ldr	r0, [pc, #108]	; (8001d94 <MX_GPIO_Init+0x124>)
 8001d26:	f000 fe8b 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4815      	ldr	r0, [pc, #84]	; (8001d94 <MX_GPIO_Init+0x124>)
 8001d40:	f000 fe7e 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin EN_A_Pin EN_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|EN_A_Pin|EN_B_Pin;
 8001d44:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480b      	ldr	r0, [pc, #44]	; (8001d8c <MX_GPIO_Init+0x11c>)
 8001d5e:	f000 fe6f 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_A_Pin DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_A_Pin|DIR_B_Pin;
 8001d62:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_GPIO_Init+0x120>)
 8001d7c:	f000 fe60 	bl	8002a40 <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800

08001d98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	ed2d 8b02 	vpush	{d8}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM9){
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d14b      	bne.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0xae>
		status = imc20948_acc_read(&imu);
 8001dae:	482f      	ldr	r0, [pc, #188]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001db0:	f7ff f9a8 	bl	8001104 <imc20948_acc_read>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001dba:	701a      	strb	r2, [r3, #0]
		status = imc20948_gyro_read(&imu);
 8001dbc:	482b      	ldr	r0, [pc, #172]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dbe:	f7ff f9fb 	bl	80011b8 <imc20948_gyro_read>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001dc8:	701a      	strb	r2, [r3, #0]
		/* Upadte filter and contorler */
		update_filter(&angle, atan2f(imu.acc_g[0],-imu.acc_g[2]), imu.gyro_dps[1] * (M_PI / 180));
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dd6:	eef1 7a67 	vneg.f32	s15, s15
 8001dda:	eef0 0a67 	vmov.f32	s1, s15
 8001dde:	eeb0 0a47 	vmov.f32	s0, s14
 8001de2:	f007 f92d 	bl	8009040 <atan2f>
 8001de6:	eeb0 8a40 	vmov.f32	s16, s0
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbb2 	bl	8000558 <__aeabi_f2d>
 8001df4:	a318      	add	r3, pc, #96	; (adr r3, 8001e58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fc05 	bl	8000608 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fed7 	bl	8000bb8 <__aeabi_d2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	ee00 3a90 	vmov	s1, r3
 8001e10:	eeb0 0a48 	vmov.f32	s0, s16
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e16:	f7ff fc53 	bl	80016c0 <update_filter>
		update_controler(&robot_pid,angle.curr_value * (180 / M_PI));
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb9a 	bl	8000558 <__aeabi_f2d>
 8001e24:	a30e      	add	r3, pc, #56	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fbed 	bl	8000608 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe febf 	bl	8000bb8 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	ee00 3a10 	vmov	s0, r3
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e42:	f7ff fadd 	bl	8001400 <update_controler>
//		/* Measuere data */
//		status = imc20948_acc_read(&imu);
//		status = imc20948_gyro_read(&imu);
//
//	}
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	ecbd 8b02 	vpop	{d8}
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	a2529d39 	.word	0xa2529d39
 8001e5c:	3f91df46 	.word	0x3f91df46
 8001e60:	1a63c1f8 	.word	0x1a63c1f8
 8001e64:	404ca5dc 	.word	0x404ca5dc
 8001e68:	40014000 	.word	0x40014000
 8001e6c:	200003b0 	.word	0x200003b0
 8001e70:	2000042c 	.word	0x2000042c
 8001e74:	200003cc 	.word	0x200003cc
 8001e78:	200003d8 	.word	0x200003d8

08001e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <Error_Handler+0x8>

08001e86 <max14870_init>:
 */

#include "max14870.h"

void max14870_init(max14870* max14870, TIM_HandleTypeDef* timer, uint16_t channel,
		uint16_t EN_pin, GPIO_TypeDef * EN_port,uint16_t DIR_pin, GPIO_TypeDef * DIR_port){
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	4611      	mov	r1, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	80fb      	strh	r3, [r7, #6]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	80bb      	strh	r3, [r7, #4]

	max14870->PWN_timer = timer;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	601a      	str	r2, [r3, #0]
	max14870->PWM_Channel = channel;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	809a      	strh	r2, [r3, #4]

	max14870->EN_pin = EN_pin;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	88ba      	ldrh	r2, [r7, #4]
 8001eac:	80da      	strh	r2, [r3, #6]
	max14870->EN_port = EN_port;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	609a      	str	r2, [r3, #8]

	max14870->DIR_pin = DIR_pin;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8bba      	ldrh	r2, [r7, #28]
 8001eb8:	819a      	strh	r2, [r3, #12]
	max14870->DIR_port = DIR_port;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	611a      	str	r2, [r3, #16]

	max14870_mode_control(max14870,ON);
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f814 	bl	8001ef0 <max14870_mode_control>
	max14870_set_speed(max14870,0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f832 	bl	8001f34 <max14870_set_speed>
	max1470_set_direction(max14870,CW);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f869 	bl	8001faa <max1470_set_direction>

	HAL_TIM_PWM_Start_IT(max14870->PWN_timer,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
			max14870->PWM_Channel);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	889b      	ldrh	r3, [r3, #4]
	HAL_TIM_PWM_Start_IT(max14870->PWN_timer,
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f002 fca4 	bl	8004830 <HAL_TIM_PWM_Start_IT>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <max14870_mode_control>:

void max14870_mode_control(max14870* max14870,MAX14870_mode mode){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
	switch(mode){
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <max14870_mode_control+0x18>
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d009      	beq.n	8001f1a <max14870_mode_control+0x2a>
	case ON:
		HAL_GPIO_WritePin(max14870->EN_port,
								max14870->EN_pin, RESET);
		break;
	}
}
 8001f06:	e011      	b.n	8001f2c <max14870_mode_control+0x3c>
		HAL_GPIO_WritePin(max14870->EN_port,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	88db      	ldrh	r3, [r3, #6]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	f000 ff18 	bl	8002d48 <HAL_GPIO_WritePin>
		break;
 8001f18:	e008      	b.n	8001f2c <max14870_mode_control+0x3c>
		HAL_GPIO_WritePin(max14870->EN_port,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6898      	ldr	r0, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	88db      	ldrh	r3, [r3, #6]
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	f000 ff0f 	bl	8002d48 <HAL_GPIO_WritePin>
		break;
 8001f2a:	bf00      	nop
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <max14870_set_speed>:

void max14870_set_speed(max14870* max14870, uint16_t speed){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
	if(speed >= max14870->PWN_timer->Instance->ARR)
 8001f40:	887a      	ldrh	r2, [r7, #2]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d304      	bcc.n	8001f58 <max14870_set_speed+0x24>
		speed = max14870->PWN_timer->Instance->ARR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SetCompare(max14870->PWN_timer,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <max14870_set_speed+0x38>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
			max14870->PWM_Channel,speed);

}
 8001f6a:	e018      	b.n	8001f9e <max14870_set_speed+0x6a>
	__HAL_TIM_SetCompare(max14870->PWN_timer,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d105      	bne.n	8001f80 <max14870_set_speed+0x4c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f7e:	e00e      	b.n	8001f9e <max14870_set_speed+0x6a>
	__HAL_TIM_SetCompare(max14870->PWN_timer,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	889b      	ldrh	r3, [r3, #4]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d105      	bne.n	8001f94 <max14870_set_speed+0x60>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001f92:	e004      	b.n	8001f9e <max14870_set_speed+0x6a>
	__HAL_TIM_SetCompare(max14870->PWN_timer,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <max1470_set_direction>:

void max1470_set_direction(max14870* max14870, MAX14870_dir dir){
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
	switch(dir){
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <max1470_set_direction+0x18>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d009      	beq.n	8001fd4 <max1470_set_direction+0x2a>
	case CCW:
		HAL_GPIO_WritePin(max14870->DIR_port,
								max14870->DIR_pin, RESET);
		break;
	}
}
 8001fc0:	e011      	b.n	8001fe6 <max1470_set_direction+0x3c>
		HAL_GPIO_WritePin(max14870->DIR_port,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6918      	ldr	r0, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	899b      	ldrh	r3, [r3, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f000 febb 	bl	8002d48 <HAL_GPIO_WritePin>
		break;
 8001fd2:	e008      	b.n	8001fe6 <max1470_set_direction+0x3c>
		HAL_GPIO_WritePin(max14870->DIR_port,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6918      	ldr	r0, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	899b      	ldrh	r3, [r3, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f000 feb2 	bl	8002d48 <HAL_GPIO_WritePin>
		break;
 8001fe4:	bf00      	nop
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f000 fc32 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_I2C_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12c      	bne.n	80020bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002090:	2304      	movs	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <HAL_I2C_MspInit+0x8c>)
 800209c:	f000 fcd0 	bl	8002a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_TIM_PWM_MspInit+0x48>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d115      	bne.n	800210e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_TIM_PWM_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_TIM_PWM_MspInit+0x4c>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_TIM_PWM_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	201d      	movs	r0, #29
 8002104:	f000 fbd3 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002108:	201d      	movs	r0, #29
 800210a:	f000 fbec 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40000400 	.word	0x40000400
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_TIM_Encoder_MspInit+0xe8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12c      	bne.n	800219c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a30      	ldr	r2, [pc, #192]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EN_A_VAW_B_Pin|EN_A_VAW_A_Pin;
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800218a:	2302      	movs	r3, #2
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	481e      	ldr	r0, [pc, #120]	; (8002210 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002196:	f000 fc53 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800219a:	e030      	b.n	80021fe <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12b      	bne.n	80021fe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_TIM_Encoder_MspInit+0xec>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_B_VAW_A_Pin|EN_B_VAW_B_Pin;
 80021de:	2303      	movs	r3, #3
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021ee:	2302      	movs	r3, #2
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	4807      	ldr	r0, [pc, #28]	; (8002218 <HAL_TIM_Encoder_MspInit+0xf8>)
 80021fa:	f000 fc21 	bl	8002a40 <HAL_GPIO_Init>
}
 80021fe:	bf00      	nop
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40000800 	.word	0x40000800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020400 	.word	0x40020400
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40020000 	.word	0x40020000

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d115      	bne.n	800225a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_TIM_Base_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_TIM_Base_MspInit+0x4c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_TIM_Base_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2018      	movs	r0, #24
 8002250:	f000 fb2d 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002254:	2018      	movs	r0, #24
 8002256:	f000 fb46 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40014000 	.word	0x40014000
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_TIM_MspPostInit+0x68>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11d      	bne.n	80022ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_MspPostInit+0x6c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0x6c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_TIM_MspPostInit+0x6c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_TIM_MspPostInit+0x70>)
 80022c6:	f000 fbbb 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_UART_MspInit+0x94>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d133      	bne.n	800236a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_UART_MspInit+0x98>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <HAL_UART_MspInit+0x98>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_UART_MspInit+0x98>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_UART_MspInit+0x98>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_UART_MspInit+0x98>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_UART_MspInit+0x98>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800233a:	230c      	movs	r3, #12
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800234a:	2307      	movs	r3, #7
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <HAL_UART_MspInit+0x9c>)
 8002356:	f000 fb73 	bl	8002a40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2026      	movs	r0, #38	; 0x26
 8002360:	f000 faa5 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002364:	2026      	movs	r0, #38	; 0x26
 8002366:	f000 fabe 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40004400 	.word	0x40004400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 f974 	bl	80026b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023da:	f002 fbcd 	bl	8004b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000324 	.word	0x20000324

080023e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM3_IRQHandler+0x10>)
 80023ee:	f002 fbc3 	bl	8004b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000024c 	.word	0x2000024c

080023fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART2_IRQHandler+0x10>)
 8002402:	f003 fa0f 	bl	8005824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000036c 	.word	0x2000036c

08002410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_kill>:

int _kill(int pid, int sig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800242a:	f004 f8c1 	bl	80065b0 <__errno>
 800242e:	4603      	mov	r3, r0
 8002430:	2216      	movs	r2, #22
 8002432:	601a      	str	r2, [r3, #0]
	return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_exit>:

void _exit (int status)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ffe7 	bl	8002420 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002452:	e7fe      	b.n	8002452 <_exit+0x12>

08002454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e00a      	b.n	800247c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002466:	f3af 8000 	nop.w
 800246a:	4601      	mov	r1, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	b2ca      	uxtb	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf0      	blt.n	8002466 <_read+0x12>
	}

return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e009      	b.n	80024b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbf1      	blt.n	80024a0 <_write+0x12>
	}
	return len;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_close>:

int _close(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ee:	605a      	str	r2, [r3, #4]
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_isatty>:

int _isatty(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	return 1;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
	return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f004 f826 	bl	80065b0 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20020000 	.word	0x20020000
 8002590:	00000400 	.word	0x00000400
 8002594:	20000430 	.word	0x20000430
 8002598:	20000448 	.word	0x20000448

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c6:	490e      	ldr	r1, [pc, #56]	; (8002600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025cc:	e002      	b.n	80025d4 <LoopCopyDataInit>

080025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d2:	3304      	adds	r3, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d8:	d3f9      	bcc.n	80025ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025dc:	4c0b      	ldr	r4, [pc, #44]	; (800260c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e0:	e001      	b.n	80025e6 <LoopFillZerobss>

080025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e4:	3204      	adds	r2, #4

080025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e8:	d3fb      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ea:	f7ff ffd7 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f003 ffe5 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f2:	f7ff f8a1 	bl	8001738 <main>
  bx  lr    
 80025f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002600:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002604:	08009794 	.word	0x08009794
  ldr r2, =_sbss
 8002608:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800260c:	20000448 	.word	0x20000448

08002610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC_IRQHandler>
	...

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_Init+0x40>)
 800261e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_Init+0x40>)
 800262a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_Init+0x40>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263c:	2003      	movs	r0, #3
 800263e:	f000 f92b 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002642:	2000      	movs	r0, #0
 8002644:	f000 f808 	bl	8002658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002648:	f7ff fcd2 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00

08002658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x54>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x58>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f943 	bl	8002902 <HAL_SYSTICK_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00e      	b.n	80026a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d80a      	bhi.n	80026a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800268c:	2200      	movs	r2, #0
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002694:	f000 f90b 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_InitTick+0x5c>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000008 	.word	0x20000008
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x20>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x24>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_IncTick+0x24>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000008 	.word	0x20000008
 80026dc:	20000434 	.word	0x20000434

080026e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return uwTick;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_GetTick+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000434 	.word	0x20000434

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff3e 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff8e 	bl	80027ec <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff31 	bl	800275c <__NVIC_EnableIRQ>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa2 	bl	8002854 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff feda 	bl	80026e0 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d008      	beq.n	800294c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e052      	b.n	80029f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0216 	bic.w	r2, r2, #22
 800295a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <HAL_DMA_Abort+0x62>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299c:	e013      	b.n	80029c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299e:	f7ff fe9f 	bl	80026e0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d90c      	bls.n	80029c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e015      	b.n	80029f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e4      	bne.n	800299e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d004      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00c      	b.n	8002a32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e159      	b.n	8002d10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8148 	bne.w	8002d0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d005      	beq.n	8002a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d130      	bne.n	8002af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0201 	and.w	r2, r3, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d017      	beq.n	8002b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d123      	bne.n	8002b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a2 	beq.w	8002d0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_GPIO_Init+0x2e8>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a56      	ldr	r2, [pc, #344]	; (8002d28 <HAL_GPIO_Init+0x2e8>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <HAL_GPIO_Init+0x2e8>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be2:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_GPIO_Init+0x2ec>)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a49      	ldr	r2, [pc, #292]	; (8002d30 <HAL_GPIO_Init+0x2f0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x202>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a48      	ldr	r2, [pc, #288]	; (8002d34 <HAL_GPIO_Init+0x2f4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x1fe>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a47      	ldr	r2, [pc, #284]	; (8002d38 <HAL_GPIO_Init+0x2f8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x1fa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a46      	ldr	r2, [pc, #280]	; (8002d3c <HAL_GPIO_Init+0x2fc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x1f6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a45      	ldr	r2, [pc, #276]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x1f2>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e008      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c42:	2300      	movs	r3, #0
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f002 0203 	and.w	r2, r2, #3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c54:	4935      	ldr	r1, [pc, #212]	; (8002d2c <HAL_GPIO_Init+0x2ec>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c62:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c86:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb0:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	f67f aea2 	bls.w	8002a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	619a      	str	r2, [r3, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e12b      	b.n	8002fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff f94c 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de0:	f001 fbfc 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a81      	ldr	r2, [pc, #516]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d807      	bhi.n	8002e00 <HAL_I2C_Init+0x84>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <HAL_I2C_Init+0x278>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e006      	b.n	8002e0e <HAL_I2C_Init+0x92>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_I2C_Init+0x27c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0e7      	b.n	8002fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a78      	ldr	r2, [pc, #480]	; (8002ffc <HAL_I2C_Init+0x280>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0c9b      	lsrs	r3, r3, #18
 8002e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a6a      	ldr	r2, [pc, #424]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d802      	bhi.n	8002e50 <HAL_I2C_Init+0xd4>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	e009      	b.n	8002e64 <HAL_I2C_Init+0xe8>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_I2C_Init+0x284>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	3301      	adds	r3, #1
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	495c      	ldr	r1, [pc, #368]	; (8002ff0 <HAL_I2C_Init+0x274>)
 8002e80:	428b      	cmp	r3, r1
 8002e82:	d819      	bhi.n	8002eb8 <HAL_I2C_Init+0x13c>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e59      	subs	r1, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e92:	1c59      	adds	r1, r3, #1
 8002e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e98:	400b      	ands	r3, r1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_I2C_Init+0x138>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e59      	subs	r1, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	e051      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e04f      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_I2C_Init+0x168>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e012      	b.n	8002f0a <HAL_I2C_Init+0x18e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	0099      	lsls	r1, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x196>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_I2C_Init+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e58      	subs	r0, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	e00f      	b.n	8002f58 <HAL_I2C_Init+0x1dc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6809      	ldr	r1, [r1, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6911      	ldr	r1, [r2, #16]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	001e847f 	.word	0x001e847f
 8002ff8:	003d08ff 	.word	0x003d08ff
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	460b      	mov	r3, r1
 8003018:	813b      	strh	r3, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301e:	f7ff fb5f 	bl	80026e0 <HAL_GetTick>
 8003022:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	f040 80d9 	bne.w	80031e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2319      	movs	r3, #25
 8003038:	2201      	movs	r2, #1
 800303a:	496d      	ldr	r1, [pc, #436]	; (80031f0 <HAL_I2C_Mem_Write+0x1ec>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fc7f 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	e0cc      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2C_Mem_Write+0x56>
 8003056:	2302      	movs	r3, #2
 8003058:	e0c5      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d007      	beq.n	8003080 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2221      	movs	r2, #33	; 0x21
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a4d      	ldr	r2, [pc, #308]	; (80031f4 <HAL_I2C_Mem_Write+0x1f0>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c2:	88f8      	ldrh	r0, [r7, #6]
 80030c4:	893a      	ldrh	r2, [r7, #8]
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4603      	mov	r3, r0
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fab6 	bl	8003644 <I2C_RequestMemoryWrite>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d052      	beq.n	8003184 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e081      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fd00 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11b      	bne.n	8003184 <HAL_I2C_Mem_Write+0x180>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d017      	beq.n	8003184 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1aa      	bne.n	80030e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fcec 	bl	8003b6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e016      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	00100002 	.word	0x00100002
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	817b      	strh	r3, [r7, #10]
 800320a:	460b      	mov	r3, r1
 800320c:	813b      	strh	r3, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003212:	f7ff fa65 	bl	80026e0 <HAL_GetTick>
 8003216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 8208 	bne.w	8003636 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2319      	movs	r3, #25
 800322c:	2201      	movs	r2, #1
 800322e:	497b      	ldr	r1, [pc, #492]	; (800341c <HAL_I2C_Mem_Read+0x224>)
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fb85 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	e1fb      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_I2C_Mem_Read+0x56>
 800324a:	2302      	movs	r3, #2
 800324c:	e1f4      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d007      	beq.n	8003274 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2222      	movs	r2, #34	; 0x22
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HAL_I2C_Mem_Read+0x228>)
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b6:	88f8      	ldrh	r0, [r7, #6]
 80032b8:	893a      	ldrh	r2, [r7, #8]
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4603      	mov	r3, r0
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa52 	bl	8003770 <I2C_RequestMemoryRead>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1b0      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e184      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11b      	bne.n	8003346 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e164      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b02      	cmp	r3, #2
 800334c:	d11b      	bne.n	8003386 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	e144      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800339c:	e138      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	f200 80f1 	bhi.w	800358a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d123      	bne.n	80033f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fc1b 	bl	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e139      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f6:	e10b      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d14e      	bne.n	800349e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	2200      	movs	r2, #0
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <HAL_I2C_Mem_Read+0x22c>)
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa98 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e10e      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
 800341a:	bf00      	nop
 800341c:	00100002 	.word	0x00100002
 8003420:	ffff0000 	.word	0xffff0000
 8003424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800349c:	e0b8      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	2200      	movs	r2, #0
 80034a6:	4966      	ldr	r1, [pc, #408]	; (8003640 <HAL_I2C_Mem_Read+0x448>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fa49 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0bf      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	2200      	movs	r2, #0
 8003502:	494f      	ldr	r1, [pc, #316]	; (8003640 <HAL_I2C_Mem_Read+0x448>)
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fa1b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e091      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003588:	e042      	b.n	8003610 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fb2e 	bl	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e04c      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d118      	bne.n	8003610 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f aec2 	bne.w	800339e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3728      	adds	r7, #40	; 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	00010004 	.word	0x00010004

08003644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2200      	movs	r2, #0
 8003676:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f960 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003694:	d103      	bne.n	800369e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e05f      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	492d      	ldr	r1, [pc, #180]	; (800376c <I2C_RequestMemoryWrite+0x128>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f998 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04c      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa02 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e02b      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e021      	b.n	8003760 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f9dc 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e005      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003756:	893b      	ldrh	r3, [r7, #8]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8c2 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d0:	d103      	bne.n	80037da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0aa      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	4952      	ldr	r1, [pc, #328]	; (800393c <I2C_RequestMemoryRead+0x1cc>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f8fa 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e097      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f964 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e076      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	e021      	b.n	800389c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b29b      	uxth	r3, r3
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f93e 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e050      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	6a39      	ldr	r1, [r7, #32]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f923 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e035      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2200      	movs	r2, #0
 80038e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f82b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d103      	bne.n	8003908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e013      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	4906      	ldr	r1, [pc, #24]	; (800393c <I2C_RequestMemoryRead+0x1cc>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f863 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	00010002 	.word	0x00010002

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e025      	b.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003958:	d021      	beq.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fec1 	bl	80026e0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d116      	bne.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e023      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10d      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	e00c      	b.n	80039de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d0b6      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fc:	e051      	b.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0c:	d123      	bne.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e046      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5c:	d021      	beq.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fe fe3f 	bl	80026e0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d116      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0220 	orr.w	r2, r3, #32
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e020      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10c      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	e00b      	b.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d18d      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f8ce 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e02d      	b.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b10:	d021      	beq.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe fde5 	bl	80026e0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d1ca      	bne.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b7a:	e02d      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f88d 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e02d      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b92:	d021      	beq.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fe fda4 	bl	80026e0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d1ca      	bne.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bfc:	e042      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d119      	bne.n	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0210 	mvn.w	r2, #16
 8003c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e029      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c40:	f7fe fd4e 	bl	80026e0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d1b5      	bne.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d11b      	bne.n	8003cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f043 0204 	orr.w	r2, r3, #4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e267      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d075      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1a:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b85      	ldr	r3, [pc, #532]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d112      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b82      	ldr	r3, [pc, #520]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4b7e      	ldr	r3, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e242      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x74>
 8003d62:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x98>
 8003d7a:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6f      	ldr	r2, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6d      	ldr	r3, [pc, #436]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6c      	ldr	r2, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d94:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a68      	ldr	r2, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fc94 	bl	80026e0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fc90 	bl	80026e0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e207      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xc0>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fc80 	bl	80026e0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fc7c 	bl	80026e0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1f3      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xe8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1c7      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4937      	ldr	r1, [pc, #220]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fe fc35 	bl	80026e0 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fe fc31 	bl	80026e0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1a8      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4925      	ldr	r1, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fc14 	bl	80026e0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe fc10 	bl	80026e0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e187      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d036      	beq.n	8003f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fbf4 	bl	80026e0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fe fbf0 	bl	80026e0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e167      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x200>
 8003f1a:	e01b      	b.n	8003f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fe fbdd 	bl	80026e0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	e00e      	b.n	8003f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fbd9 	bl	80026e0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d907      	bls.n	8003f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e150      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	42470000 	.word	0x42470000
 8003f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ea      	bne.n	8003f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8097 	beq.w	8004090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b7a      	ldr	r3, [pc, #488]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b77      	ldr	r3, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b74      	ldr	r3, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a73      	ldr	r2, [pc, #460]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fe fb99 	bl	80026e0 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe fb95 	bl	80026e0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e10c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2ea>
 8003fd8:	4b64      	ldr	r3, [pc, #400]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a63      	ldr	r2, [pc, #396]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x30c>
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a5e      	ldr	r2, [pc, #376]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a5b      	ldr	r2, [pc, #364]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a57      	ldr	r2, [pc, #348]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a54      	ldr	r2, [pc, #336]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe fb5a 	bl	80026e0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe fb56 	bl	80026e0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0cb      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	4b49      	ldr	r3, [pc, #292]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCC_OscConfig+0x334>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fe fb44 	bl	80026e0 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe fb40 	bl	80026e0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0b5      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004072:	4b3e      	ldr	r3, [pc, #248]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ee      	bne.n	800405c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a1 	beq.w	80041dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d05c      	beq.n	8004160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d141      	bne.n	8004132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fb14 	bl	80026e0 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fe fb10 	bl	80026e0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e087      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <HAL_RCC_OscConfig+0x470>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	019b      	lsls	r3, r3, #6
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	491b      	ldr	r1, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fe fae9 	bl	80026e0 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004112:	f7fe fae5 	bl	80026e0 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e05c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x416>
 8004130:	e054      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fad2 	bl	80026e0 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe face 	bl	80026e0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e045      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x444>
 800415e:	e03d      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e038      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000
 8004174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x4ec>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d028      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d121      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d11a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0cc      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b68      	ldr	r3, [pc, #416]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d90c      	bls.n	8004228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b8      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800424a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494d      	ldr	r1, [pc, #308]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d044      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e067      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4934      	ldr	r1, [pc, #208]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe fa00 	bl	80026e0 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fe f9fc 	bl	80026e0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d20c      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4916      	ldr	r1, [pc, #88]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004372:	f000 f821 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	490a      	ldr	r1, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	5ccb      	ldrb	r3, [r1, r3]
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe f960 	bl	8002658 <HAL_InitTick>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08009358 	.word	0x08009358
 80043b0:	20000000 	.word	0x20000000
 80043b4:	20000004 	.word	0x20000004

080043b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b094      	sub	sp, #80	; 0x50
 80043be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	647b      	str	r3, [r7, #68]	; 0x44
 80043c4:	2300      	movs	r3, #0
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c8:	2300      	movs	r3, #0
 80043ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d00d      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x40>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	f200 80e1 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x34>
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ea:	e0db      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b73      	ldr	r3, [pc, #460]	; (80045bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043f0:	e0db      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f2:	4b73      	ldr	r3, [pc, #460]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043f6:	e0d8      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4b6f      	ldr	r3, [pc, #444]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004402:	4b6d      	ldr	r3, [pc, #436]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d063      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2200      	movs	r2, #0
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
 8004418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
 8004426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800442a:	4622      	mov	r2, r4
 800442c:	462b      	mov	r3, r5
 800442e:	f04f 0000 	mov.w	r0, #0
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	0159      	lsls	r1, r3, #5
 8004438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443c:	0150      	lsls	r0, r2, #5
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4621      	mov	r1, r4
 8004444:	1a51      	subs	r1, r2, r1
 8004446:	6139      	str	r1, [r7, #16]
 8004448:	4629      	mov	r1, r5
 800444a:	eb63 0301 	sbc.w	r3, r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	018b      	lsls	r3, r1, #6
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004466:	4651      	mov	r1, sl
 8004468:	018a      	lsls	r2, r1, #6
 800446a:	4651      	mov	r1, sl
 800446c:	ebb2 0801 	subs.w	r8, r2, r1
 8004470:	4659      	mov	r1, fp
 8004472:	eb63 0901 	sbc.w	r9, r3, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	4623      	mov	r3, r4
 8004490:	eb18 0303 	adds.w	r3, r8, r3
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	462b      	mov	r3, r5
 8004498:	eb49 0303 	adc.w	r3, r9, r3
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044aa:	4629      	mov	r1, r5
 80044ac:	024b      	lsls	r3, r1, #9
 80044ae:	4621      	mov	r1, r4
 80044b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044b4:	4621      	mov	r1, r4
 80044b6:	024a      	lsls	r2, r1, #9
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044c8:	f7fc fbc6 	bl	8000c58 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4613      	mov	r3, r2
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d4:	e058      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d6:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	099b      	lsrs	r3, r3, #6
 80044dc:	2200      	movs	r2, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	4611      	mov	r1, r2
 80044e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
 80044ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	0159      	lsls	r1, r3, #5
 80044fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004502:	0150      	lsls	r0, r2, #5
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4641      	mov	r1, r8
 800450a:	ebb2 0a01 	subs.w	sl, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb63 0b01 	sbc.w	fp, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004528:	ebb2 040a 	subs.w	r4, r2, sl
 800452c:	eb63 050b 	sbc.w	r5, r3, fp
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	00eb      	lsls	r3, r5, #3
 800453a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453e:	00e2      	lsls	r2, r4, #3
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	4643      	mov	r3, r8
 8004546:	18e3      	adds	r3, r4, r3
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	464b      	mov	r3, r9
 800454c:	eb45 0303 	adc.w	r3, r5, r3
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455e:	4629      	mov	r1, r5
 8004560:	028b      	lsls	r3, r1, #10
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004568:	4621      	mov	r1, r4
 800456a:	028a      	lsls	r2, r1, #10
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004572:	2200      	movs	r2, #0
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	61fa      	str	r2, [r7, #28]
 8004578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457c:	f7fc fb6c 	bl	8000c58 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800459a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetSysClockFreq+0x204>)
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3750      	adds	r7, #80	; 0x50
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000000 	.word	0x20000000

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	08009368 	.word	0x08009368

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffdc 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0b5b      	lsrs	r3, r3, #13
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	08009368 	.word	0x08009368

0800462c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e041      	b.n	80046c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fde2 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fd3e 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e044      	b.n	800476e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_TIM_Base_Start_IT+0xb0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d018      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x6c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d013      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x6c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_TIM_Base_Start_IT+0xb4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00e      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x6c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <HAL_TIM_Base_Start_IT+0xb8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d009      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x6c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_TIM_Base_Start_IT+0xbc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x6c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <HAL_TIM_Base_Start_IT+0xc0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d111      	bne.n	800475c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b06      	cmp	r3, #6
 8004748:	d010      	beq.n	800476c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	e007      	b.n	800476c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000

08004790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fc8a 	bl	80020d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fc8c 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start_IT+0x28>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e022      	b.n	800489e <HAL_TIM_PWM_Start_IT+0x6e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start_IT+0x42>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e015      	b.n	800489e <HAL_TIM_PWM_Start_IT+0x6e>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start_IT+0x5c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e008      	b.n	800489e <HAL_TIM_PWM_Start_IT+0x6e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0b3      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start_IT+0x86>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	e013      	b.n	80048de <HAL_TIM_PWM_Start_IT+0xae>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start_IT+0x96>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c4:	e00b      	b.n	80048de <HAL_TIM_PWM_Start_IT+0xae>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start_IT+0xa6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	e003      	b.n	80048de <HAL_TIM_PWM_Start_IT+0xae>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d841      	bhi.n	8004968 <HAL_TIM_PWM_Start_IT+0x138>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <HAL_TIM_PWM_Start_IT+0xbc>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004969 	.word	0x08004969
 80048f4:	08004969 	.word	0x08004969
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004969 	.word	0x08004969
 8004904:	08004969 	.word	0x08004969
 8004908:	08004969 	.word	0x08004969
 800490c:	08004945 	.word	0x08004945
 8004910:	08004969 	.word	0x08004969
 8004914:	08004969 	.word	0x08004969
 8004918:	08004969 	.word	0x08004969
 800491c:	08004957 	.word	0x08004957
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0202 	orr.w	r2, r2, #2
 800492e:	60da      	str	r2, [r3, #12]
      break;
 8004930:	e01d      	b.n	800496e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0204 	orr.w	r2, r2, #4
 8004940:	60da      	str	r2, [r3, #12]
      break;
 8004942:	e014      	b.n	800496e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	60da      	str	r2, [r3, #12]
      break;
 8004954:	e00b      	b.n	800496e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0210 	orr.w	r2, r2, #16
 8004964:	60da      	str	r2, [r3, #12]
      break;
 8004966:	e002      	b.n	800496e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	bf00      	nop
  }

  if (status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d14b      	bne.n	8004a0c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fe5b 	bl	8005638 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d107      	bne.n	800499c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d013      	beq.n	80049d8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d010      	beq.n	8004a0c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	e007      	b.n	8004a0c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40014000 	.word	0x40014000

08004a2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e097      	b.n	8004b70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fd fb63 	bl	8002120 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a70:	f023 0307 	bic.w	r3, r3, #7
 8004a74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f000 fb33 	bl	80050ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004acc:	f023 030c 	bic.w	r3, r3, #12
 8004ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	011a      	lsls	r2, r3, #4
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	031b      	lsls	r3, r3, #12
 8004afc:	4313      	orrs	r3, r2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0202 	mvn.w	r2, #2
 8004ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa77 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa69 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa7a 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d122      	bne.n	8004c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d11b      	bne.n	8004c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0204 	mvn.w	r2, #4
 8004bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa4d 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004c14:	e005      	b.n	8004c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa3f 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa50 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0208 	mvn.w	r2, #8
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2204      	movs	r2, #4
 8004c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa23 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa15 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa26 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0210 	mvn.w	r2, #16
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9f9 	bl	80050ae <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9eb 	bl	800509a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f9fc 	bl	80050c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0201 	mvn.w	r2, #1
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd f84e 	bl	8001d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd26 	bl	8005774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9c1 	bl	80050d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0220 	mvn.w	r2, #32
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fcf0 	bl	8005760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ae      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	f200 809f 	bhi.w	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004ef5 	.word	0x08004ef5
 8004dc4:	08004ef5 	.word	0x08004ef5
 8004dc8:	08004ef5 	.word	0x08004ef5
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004ef5 	.word	0x08004ef5
 8004dd4:	08004ef5 	.word	0x08004ef5
 8004dd8:	08004ef5 	.word	0x08004ef5
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004ef5 	.word	0x08004ef5
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	08004ef5 	.word	0x08004ef5
 8004dec:	08004eb3 	.word	0x08004eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f9f8 	bl	80051ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
      break;
 8004e2e:	e064      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa3e 	bl	80052b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	619a      	str	r2, [r3, #24]
      break;
 8004e70:	e043      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa89 	bl	8005390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0208 	orr.w	r2, r2, #8
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0204 	bic.w	r2, r2, #4
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e023      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fad3 	bl	8005464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0b4      	b.n	8005092 <HAL_TIM_ConfigClockSource+0x186>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d03e      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	f200 8087 	bhi.w	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	f000 8086 	beq.w	800507e <HAL_TIM_ConfigClockSource+0x172>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d87f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d01a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d87b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d050      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x11a>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d877      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d03c      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xfa>
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d873      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d058      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x13a>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d86f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d064      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	2b30      	cmp	r3, #48	; 0x30
 8004f9e:	d86b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d060      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d867      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d05c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d05a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	e062      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6899      	ldr	r1, [r3, #8]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f000 fb19 	bl	80055f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
      break;
 8004fde:	e04f      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f000 fb02 	bl	80055f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e03c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fa76 	bl	8005504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2150      	movs	r1, #80	; 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f000 facf 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005024:	e02c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fa95 	bl	8005562 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2160      	movs	r1, #96	; 0x60
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fabf 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005044:	e01c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fa56 	bl	8005504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	4618      	mov	r0, r3
 8005060:	f000 faaf 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005064:	e00c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 faa6 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005076:	e003      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e000      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a34      	ldr	r2, [pc, #208]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x38>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x38>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a31      	ldr	r2, [pc, #196]	; (80051d4 <TIM_Base_SetConfig+0xe8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x38>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a30      	ldr	r2, [pc, #192]	; (80051d8 <TIM_Base_SetConfig+0xec>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x38>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <TIM_Base_SetConfig+0xf0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01b      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d017      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <TIM_Base_SetConfig+0xe8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <TIM_Base_SetConfig+0xec>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a20      	ldr	r2, [pc, #128]	; (80051dc <TIM_Base_SetConfig+0xf0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <TIM_Base_SetConfig+0xf4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <TIM_Base_SetConfig+0xf8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0x8a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <TIM_Base_SetConfig+0xfc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 0302 	bic.w	r3, r3, #2
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <TIM_OC1_SetConfig+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <TIM_OC1_SetConfig+0xc8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d111      	bne.n	800528e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40010000 	.word	0x40010000

080052b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f023 0210 	bic.w	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0320 	bic.w	r3, r3, #32
 8005302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <TIM_OC2_SetConfig+0xd4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10d      	bne.n	8005334 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <TIM_OC2_SetConfig+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d113      	bne.n	8005364 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000

08005390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_OC3_SetConfig+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d10d      	bne.n	800540a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <TIM_OC3_SetConfig+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d113      	bne.n	800543a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000

08005464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <TIM_OC4_SetConfig+0x9c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d109      	bne.n	80054d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000

08005504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800552e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 030a 	bic.w	r3, r3, #10
 8005540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005562:	b480      	push	{r7}
 8005564:	b087      	sub	sp, #28
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0210 	bic.w	r2, r3, #16
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800559e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f043 0307 	orr.w	r3, r3, #7
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	431a      	orrs	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2201      	movs	r2, #1
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1a      	ldr	r2, [r3, #32]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	43db      	mvns	r3, r3
 800565a:	401a      	ands	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e050      	b.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d013      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a16      	ldr	r2, [pc, #88]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a13      	ldr	r2, [pc, #76]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10c      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40014000 	.word	0x40014000

08005760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e03f      	b.n	800581a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc fd96 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	; 0x24
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fc7b 	bl	80060c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0ba      	sub	sp, #232	; 0xe8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb65 	bl	8005f52 <UART_Receive_IT>
      return;
 8005888:	e256      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800588a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80de 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
 8005894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d1 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0202 	orr.w	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
 8005902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 81ed 	beq.w	8005d2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 faf0 	bl	8005f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_UART_IRQHandler+0x17a>
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04f      	beq.n	8005a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9f8 	bl	8005d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d141      	bne.n	8005a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d9      	bne.n	80059b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	4a7d      	ldr	r2, [pc, #500]	; (8005c00 <HAL_UART_IRQHandler+0x3dc>)
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc fff1 	bl	80029fa <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00e      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f99a 	bl	8005d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00a      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f996 	bl	8005d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e006      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f992 	bl	8005d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a4a:	e170      	b.n	8005d2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	bf00      	nop
    return;
 8005a4e:	e16e      	b.n	8005d2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f040 814a 	bne.w	8005cee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8143 	beq.w	8005cee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 813c 	beq.w	8005cee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	f040 80b4 	bne.w	8005c04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8140 	beq.w	8005d32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aba:	429a      	cmp	r2, r3
 8005abc:	f080 8139 	bcs.w	8005d32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad2:	f000 8088 	beq.w	8005be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1d9      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e1      	bne.n	8005b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e3      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fc fe9a 	bl	800291a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8c0 	bl	8005d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bfc:	e099      	b.n	8005d32 <HAL_UART_IRQHandler+0x50e>
 8005bfe:	bf00      	nop
 8005c00:	08005e5b 	.word	0x08005e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 808b 	beq.w	8005d36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8086 	beq.w	8005d36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e3      	bne.n	8005c2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	623b      	str	r3, [r7, #32]
   return(result);
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ccc:	61fa      	str	r2, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e3      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f848 	bl	8005d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cec:	e023      	b.n	8005d36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_UART_IRQHandler+0x4ea>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8bb 	bl	8005e82 <UART_Transmit_IT>
    return;
 8005d0c:	e014      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <HAL_UART_IRQHandler+0x514>
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f8fb 	bl	8005f22 <UART_EndTransmit_IT>
    return;
 8005d2c:	e004      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
    return;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
      return;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
      return;
 8005d36:	bf00      	nop
  }
}
 8005d38:	37e8      	adds	r7, #232	; 0xe8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop

08005d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b095      	sub	sp, #84	; 0x54
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3314      	adds	r3, #20
 8005dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d119      	bne.n	8005e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2c:	61ba      	str	r2, [r7, #24]
 8005e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e4e:	bf00      	nop
 8005e50:	3754      	adds	r7, #84	; 0x54
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ff77 	bl	8005d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b21      	cmp	r3, #33	; 0x21
 8005e94:	d13e      	bne.n	8005f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d114      	bne.n	8005eca <UART_Transmit_IT+0x48>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d110      	bne.n	8005eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	621a      	str	r2, [r3, #32]
 8005ec8:	e008      	b.n	8005edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6211      	str	r1, [r2, #32]
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10f      	bne.n	8005f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fefc 	bl	8005d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08c      	sub	sp, #48	; 0x30
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b22      	cmp	r3, #34	; 0x22
 8005f64:	f040 80ab 	bne.w	80060be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d117      	bne.n	8005fa2 <UART_Receive_IT+0x50>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d113      	bne.n	8005fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa0:	e026      	b.n	8005ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d007      	beq.n	8005fc6 <UART_Receive_IT+0x74>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <UART_Receive_IT+0x82>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e008      	b.n	8005fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006000:	2b00      	cmp	r3, #0
 8006002:	d15a      	bne.n	80060ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0220 	bic.w	r2, r2, #32
 8006012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	d135      	bne.n	80060b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	613b      	str	r3, [r7, #16]
   return(result);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f023 0310 	bic.w	r3, r3, #16
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	623a      	str	r2, [r7, #32]
 800606c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	69f9      	ldr	r1, [r7, #28]
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	61bb      	str	r3, [r7, #24]
   return(result);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e5      	bne.n	800604a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d10a      	bne.n	80060a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fe67 	bl	8005d7c <HAL_UARTEx_RxEventCallback>
 80060ae:	e002      	b.n	80060b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fe4f 	bl	8005d54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e002      	b.n	80060c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3730      	adds	r7, #48	; 0x30
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060cc:	b0c0      	sub	sp, #256	; 0x100
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	ea40 0301 	orr.w	r3, r0, r1
 80060f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	431a      	orrs	r2, r3
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	431a      	orrs	r2, r3
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006120:	f021 010c 	bic.w	r1, r1, #12
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800612e:	430b      	orrs	r3, r1
 8006130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	6999      	ldr	r1, [r3, #24]
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	ea40 0301 	orr.w	r3, r0, r1
 800614e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b8f      	ldr	r3, [pc, #572]	; (8006394 <UART_SetConfig+0x2cc>)
 8006158:	429a      	cmp	r2, r3
 800615a:	d005      	beq.n	8006168 <UART_SetConfig+0xa0>
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b8d      	ldr	r3, [pc, #564]	; (8006398 <UART_SetConfig+0x2d0>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d104      	bne.n	8006172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006168:	f7fe fa4c 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 800616c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006170:	e003      	b.n	800617a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006172:	f7fe fa33 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8006176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006184:	f040 810c 	bne.w	80063a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618c:	2200      	movs	r2, #0
 800618e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800619a:	4622      	mov	r2, r4
 800619c:	462b      	mov	r3, r5
 800619e:	1891      	adds	r1, r2, r2
 80061a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061a2:	415b      	adcs	r3, r3
 80061a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061aa:	4621      	mov	r1, r4
 80061ac:	eb12 0801 	adds.w	r8, r2, r1
 80061b0:	4629      	mov	r1, r5
 80061b2:	eb43 0901 	adc.w	r9, r3, r1
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ca:	4690      	mov	r8, r2
 80061cc:	4699      	mov	r9, r3
 80061ce:	4623      	mov	r3, r4
 80061d0:	eb18 0303 	adds.w	r3, r8, r3
 80061d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061d8:	462b      	mov	r3, r5
 80061da:	eb49 0303 	adc.w	r3, r9, r3
 80061de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061f6:	460b      	mov	r3, r1
 80061f8:	18db      	adds	r3, r3, r3
 80061fa:	653b      	str	r3, [r7, #80]	; 0x50
 80061fc:	4613      	mov	r3, r2
 80061fe:	eb42 0303 	adc.w	r3, r2, r3
 8006202:	657b      	str	r3, [r7, #84]	; 0x54
 8006204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800620c:	f7fa fd24 	bl	8000c58 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4b61      	ldr	r3, [pc, #388]	; (800639c <UART_SetConfig+0x2d4>)
 8006216:	fba3 2302 	umull	r2, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	011c      	lsls	r4, r3, #4
 800621e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006222:	2200      	movs	r2, #0
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800622c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	64b9      	str	r1, [r7, #72]	; 0x48
 8006238:	415b      	adcs	r3, r3
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006240:	4641      	mov	r1, r8
 8006242:	eb12 0a01 	adds.w	sl, r2, r1
 8006246:	4649      	mov	r1, r9
 8006248:	eb43 0b01 	adc.w	fp, r3, r1
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800625c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006260:	4692      	mov	sl, r2
 8006262:	469b      	mov	fp, r3
 8006264:	4643      	mov	r3, r8
 8006266:	eb1a 0303 	adds.w	r3, sl, r3
 800626a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800626e:	464b      	mov	r3, r9
 8006270:	eb4b 0303 	adc.w	r3, fp, r3
 8006274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800628c:	460b      	mov	r3, r1
 800628e:	18db      	adds	r3, r3, r3
 8006290:	643b      	str	r3, [r7, #64]	; 0x40
 8006292:	4613      	mov	r3, r2
 8006294:	eb42 0303 	adc.w	r3, r2, r3
 8006298:	647b      	str	r3, [r7, #68]	; 0x44
 800629a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800629e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062a2:	f7fa fcd9 	bl	8000c58 <__aeabi_uldivmod>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	4b3b      	ldr	r3, [pc, #236]	; (800639c <UART_SetConfig+0x2d4>)
 80062ae:	fba3 2301 	umull	r2, r3, r3, r1
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2264      	movs	r2, #100	; 0x64
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	1acb      	subs	r3, r1, r3
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062c2:	4b36      	ldr	r3, [pc, #216]	; (800639c <UART_SetConfig+0x2d4>)
 80062c4:	fba3 2302 	umull	r2, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062d0:	441c      	add	r4, r3
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	1891      	adds	r1, r2, r2
 80062ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80062ec:	415b      	adcs	r3, r3
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062f4:	4641      	mov	r1, r8
 80062f6:	1851      	adds	r1, r2, r1
 80062f8:	6339      	str	r1, [r7, #48]	; 0x30
 80062fa:	4649      	mov	r1, r9
 80062fc:	414b      	adcs	r3, r1
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800630c:	4659      	mov	r1, fp
 800630e:	00cb      	lsls	r3, r1, #3
 8006310:	4651      	mov	r1, sl
 8006312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006316:	4651      	mov	r1, sl
 8006318:	00ca      	lsls	r2, r1, #3
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	4603      	mov	r3, r0
 8006320:	4642      	mov	r2, r8
 8006322:	189b      	adds	r3, r3, r2
 8006324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006328:	464b      	mov	r3, r9
 800632a:	460a      	mov	r2, r1
 800632c:	eb42 0303 	adc.w	r3, r2, r3
 8006330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006348:	460b      	mov	r3, r1
 800634a:	18db      	adds	r3, r3, r3
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
 800634e:	4613      	mov	r3, r2
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800635a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800635e:	f7fa fc7b 	bl	8000c58 <__aeabi_uldivmod>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4b0d      	ldr	r3, [pc, #52]	; (800639c <UART_SetConfig+0x2d4>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	; 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	3332      	adds	r3, #50	; 0x32
 800637a:	4a08      	ldr	r2, [pc, #32]	; (800639c <UART_SetConfig+0x2d4>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 0207 	and.w	r2, r3, #7
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4422      	add	r2, r4
 800638e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006390:	e105      	b.n	800659e <UART_SetConfig+0x4d6>
 8006392:	bf00      	nop
 8006394:	40011000 	.word	0x40011000
 8006398:	40011400 	.word	0x40011400
 800639c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063b2:	4642      	mov	r2, r8
 80063b4:	464b      	mov	r3, r9
 80063b6:	1891      	adds	r1, r2, r2
 80063b8:	6239      	str	r1, [r7, #32]
 80063ba:	415b      	adcs	r3, r3
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063c2:	4641      	mov	r1, r8
 80063c4:	1854      	adds	r4, r2, r1
 80063c6:	4649      	mov	r1, r9
 80063c8:	eb43 0501 	adc.w	r5, r3, r1
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	00eb      	lsls	r3, r5, #3
 80063d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063da:	00e2      	lsls	r2, r4, #3
 80063dc:	4614      	mov	r4, r2
 80063de:	461d      	mov	r5, r3
 80063e0:	4643      	mov	r3, r8
 80063e2:	18e3      	adds	r3, r4, r3
 80063e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063e8:	464b      	mov	r3, r9
 80063ea:	eb45 0303 	adc.w	r3, r5, r3
 80063ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800640e:	4629      	mov	r1, r5
 8006410:	008b      	lsls	r3, r1, #2
 8006412:	4621      	mov	r1, r4
 8006414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006418:	4621      	mov	r1, r4
 800641a:	008a      	lsls	r2, r1, #2
 800641c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006420:	f7fa fc1a 	bl	8000c58 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b60      	ldr	r3, [pc, #384]	; (80065ac <UART_SetConfig+0x4e4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800643c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	61b9      	str	r1, [r7, #24]
 800644c:	415b      	adcs	r3, r3
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006454:	4641      	mov	r1, r8
 8006456:	1851      	adds	r1, r2, r1
 8006458:	6139      	str	r1, [r7, #16]
 800645a:	4649      	mov	r1, r9
 800645c:	414b      	adcs	r3, r1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800646c:	4659      	mov	r1, fp
 800646e:	00cb      	lsls	r3, r1, #3
 8006470:	4651      	mov	r1, sl
 8006472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006476:	4651      	mov	r1, sl
 8006478:	00ca      	lsls	r2, r1, #3
 800647a:	4610      	mov	r0, r2
 800647c:	4619      	mov	r1, r3
 800647e:	4603      	mov	r3, r0
 8006480:	4642      	mov	r2, r8
 8006482:	189b      	adds	r3, r3, r2
 8006484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006488:	464b      	mov	r3, r9
 800648a:	460a      	mov	r2, r1
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	67bb      	str	r3, [r7, #120]	; 0x78
 800649e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064ac:	4649      	mov	r1, r9
 80064ae:	008b      	lsls	r3, r1, #2
 80064b0:	4641      	mov	r1, r8
 80064b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b6:	4641      	mov	r1, r8
 80064b8:	008a      	lsls	r2, r1, #2
 80064ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064be:	f7fa fbcb 	bl	8000c58 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <UART_SetConfig+0x4e4>)
 80064c8:	fba3 1302 	umull	r1, r3, r3, r2
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	2164      	movs	r1, #100	; 0x64
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	3332      	adds	r3, #50	; 0x32
 80064da:	4a34      	ldr	r2, [pc, #208]	; (80065ac <UART_SetConfig+0x4e4>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e6:	441c      	add	r4, r3
 80064e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ec:	2200      	movs	r2, #0
 80064ee:	673b      	str	r3, [r7, #112]	; 0x70
 80064f0:	677a      	str	r2, [r7, #116]	; 0x74
 80064f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	1891      	adds	r1, r2, r2
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	415b      	adcs	r3, r3
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006506:	4641      	mov	r1, r8
 8006508:	1851      	adds	r1, r2, r1
 800650a:	6039      	str	r1, [r7, #0]
 800650c:	4649      	mov	r1, r9
 800650e:	414b      	adcs	r3, r1
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800651e:	4659      	mov	r1, fp
 8006520:	00cb      	lsls	r3, r1, #3
 8006522:	4651      	mov	r1, sl
 8006524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006528:	4651      	mov	r1, sl
 800652a:	00ca      	lsls	r2, r1, #3
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	4603      	mov	r3, r0
 8006532:	4642      	mov	r2, r8
 8006534:	189b      	adds	r3, r3, r2
 8006536:	66bb      	str	r3, [r7, #104]	; 0x68
 8006538:	464b      	mov	r3, r9
 800653a:	460a      	mov	r2, r1
 800653c:	eb42 0303 	adc.w	r3, r2, r3
 8006540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	663b      	str	r3, [r7, #96]	; 0x60
 800654c:	667a      	str	r2, [r7, #100]	; 0x64
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800655a:	4649      	mov	r1, r9
 800655c:	008b      	lsls	r3, r1, #2
 800655e:	4641      	mov	r1, r8
 8006560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006564:	4641      	mov	r1, r8
 8006566:	008a      	lsls	r2, r1, #2
 8006568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800656c:	f7fa fb74 	bl	8000c58 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <UART_SetConfig+0x4e4>)
 8006576:	fba3 1302 	umull	r1, r3, r3, r2
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	2164      	movs	r1, #100	; 0x64
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	3332      	adds	r3, #50	; 0x32
 8006588:	4a08      	ldr	r2, [pc, #32]	; (80065ac <UART_SetConfig+0x4e4>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4422      	add	r2, r4
 800659c:	609a      	str	r2, [r3, #8]
}
 800659e:	bf00      	nop
 80065a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	51eb851f 	.word	0x51eb851f

080065b0 <__errno>:
 80065b0:	4b01      	ldr	r3, [pc, #4]	; (80065b8 <__errno+0x8>)
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	2000000c 	.word	0x2000000c

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4d0d      	ldr	r5, [pc, #52]	; (80065f4 <__libc_init_array+0x38>)
 80065c0:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c2:	1b64      	subs	r4, r4, r5
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	2600      	movs	r6, #0
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	4d0b      	ldr	r5, [pc, #44]	; (80065fc <__libc_init_array+0x40>)
 80065ce:	4c0c      	ldr	r4, [pc, #48]	; (8006600 <__libc_init_array+0x44>)
 80065d0:	f002 feb4 	bl	800933c <_init>
 80065d4:	1b64      	subs	r4, r4, r5
 80065d6:	10a4      	asrs	r4, r4, #2
 80065d8:	2600      	movs	r6, #0
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	0800978c 	.word	0x0800978c
 80065f8:	0800978c 	.word	0x0800978c
 80065fc:	0800978c 	.word	0x0800978c
 8006600:	08009790 	.word	0x08009790

08006604 <memset>:
 8006604:	4402      	add	r2, r0
 8006606:	4603      	mov	r3, r0
 8006608:	4293      	cmp	r3, r2
 800660a:	d100      	bne.n	800660e <memset+0xa>
 800660c:	4770      	bx	lr
 800660e:	f803 1b01 	strb.w	r1, [r3], #1
 8006612:	e7f9      	b.n	8006608 <memset+0x4>

08006614 <__cvt>:
 8006614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	ec55 4b10 	vmov	r4, r5, d0
 800661c:	2d00      	cmp	r5, #0
 800661e:	460e      	mov	r6, r1
 8006620:	4619      	mov	r1, r3
 8006622:	462b      	mov	r3, r5
 8006624:	bfbb      	ittet	lt
 8006626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800662a:	461d      	movlt	r5, r3
 800662c:	2300      	movge	r3, #0
 800662e:	232d      	movlt	r3, #45	; 0x2d
 8006630:	700b      	strb	r3, [r1, #0]
 8006632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006638:	4691      	mov	r9, r2
 800663a:	f023 0820 	bic.w	r8, r3, #32
 800663e:	bfbc      	itt	lt
 8006640:	4622      	movlt	r2, r4
 8006642:	4614      	movlt	r4, r2
 8006644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006648:	d005      	beq.n	8006656 <__cvt+0x42>
 800664a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800664e:	d100      	bne.n	8006652 <__cvt+0x3e>
 8006650:	3601      	adds	r6, #1
 8006652:	2102      	movs	r1, #2
 8006654:	e000      	b.n	8006658 <__cvt+0x44>
 8006656:	2103      	movs	r1, #3
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	ab02      	add	r3, sp, #8
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	ec45 4b10 	vmov	d0, r4, r5
 8006664:	4653      	mov	r3, sl
 8006666:	4632      	mov	r2, r6
 8006668:	f000 fcca 	bl	8007000 <_dtoa_r>
 800666c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006670:	4607      	mov	r7, r0
 8006672:	d102      	bne.n	800667a <__cvt+0x66>
 8006674:	f019 0f01 	tst.w	r9, #1
 8006678:	d022      	beq.n	80066c0 <__cvt+0xac>
 800667a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800667e:	eb07 0906 	add.w	r9, r7, r6
 8006682:	d110      	bne.n	80066a6 <__cvt+0x92>
 8006684:	783b      	ldrb	r3, [r7, #0]
 8006686:	2b30      	cmp	r3, #48	; 0x30
 8006688:	d10a      	bne.n	80066a0 <__cvt+0x8c>
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 8006696:	b918      	cbnz	r0, 80066a0 <__cvt+0x8c>
 8006698:	f1c6 0601 	rsb	r6, r6, #1
 800669c:	f8ca 6000 	str.w	r6, [sl]
 80066a0:	f8da 3000 	ldr.w	r3, [sl]
 80066a4:	4499      	add	r9, r3
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7fa fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80066b2:	b108      	cbz	r0, 80066b8 <__cvt+0xa4>
 80066b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80066b8:	2230      	movs	r2, #48	; 0x30
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	454b      	cmp	r3, r9
 80066be:	d307      	bcc.n	80066d0 <__cvt+0xbc>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066c4:	1bdb      	subs	r3, r3, r7
 80066c6:	4638      	mov	r0, r7
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	b004      	add	sp, #16
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	1c59      	adds	r1, r3, #1
 80066d2:	9103      	str	r1, [sp, #12]
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e7f0      	b.n	80066ba <__cvt+0xa6>

080066d8 <__exponent>:
 80066d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066da:	4603      	mov	r3, r0
 80066dc:	2900      	cmp	r1, #0
 80066de:	bfb8      	it	lt
 80066e0:	4249      	neglt	r1, r1
 80066e2:	f803 2b02 	strb.w	r2, [r3], #2
 80066e6:	bfb4      	ite	lt
 80066e8:	222d      	movlt	r2, #45	; 0x2d
 80066ea:	222b      	movge	r2, #43	; 0x2b
 80066ec:	2909      	cmp	r1, #9
 80066ee:	7042      	strb	r2, [r0, #1]
 80066f0:	dd2a      	ble.n	8006748 <__exponent+0x70>
 80066f2:	f10d 0407 	add.w	r4, sp, #7
 80066f6:	46a4      	mov	ip, r4
 80066f8:	270a      	movs	r7, #10
 80066fa:	46a6      	mov	lr, r4
 80066fc:	460a      	mov	r2, r1
 80066fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006702:	fb07 1516 	mls	r5, r7, r6, r1
 8006706:	3530      	adds	r5, #48	; 0x30
 8006708:	2a63      	cmp	r2, #99	; 0x63
 800670a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800670e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006712:	4631      	mov	r1, r6
 8006714:	dcf1      	bgt.n	80066fa <__exponent+0x22>
 8006716:	3130      	adds	r1, #48	; 0x30
 8006718:	f1ae 0502 	sub.w	r5, lr, #2
 800671c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006720:	1c44      	adds	r4, r0, #1
 8006722:	4629      	mov	r1, r5
 8006724:	4561      	cmp	r1, ip
 8006726:	d30a      	bcc.n	800673e <__exponent+0x66>
 8006728:	f10d 0209 	add.w	r2, sp, #9
 800672c:	eba2 020e 	sub.w	r2, r2, lr
 8006730:	4565      	cmp	r5, ip
 8006732:	bf88      	it	hi
 8006734:	2200      	movhi	r2, #0
 8006736:	4413      	add	r3, r2
 8006738:	1a18      	subs	r0, r3, r0
 800673a:	b003      	add	sp, #12
 800673c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006742:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006746:	e7ed      	b.n	8006724 <__exponent+0x4c>
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	3130      	adds	r1, #48	; 0x30
 800674c:	7083      	strb	r3, [r0, #2]
 800674e:	70c1      	strb	r1, [r0, #3]
 8006750:	1d03      	adds	r3, r0, #4
 8006752:	e7f1      	b.n	8006738 <__exponent+0x60>

08006754 <_printf_float>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	ed2d 8b02 	vpush	{d8}
 800675c:	b08d      	sub	sp, #52	; 0x34
 800675e:	460c      	mov	r4, r1
 8006760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006764:	4616      	mov	r6, r2
 8006766:	461f      	mov	r7, r3
 8006768:	4605      	mov	r5, r0
 800676a:	f001 fa37 	bl	8007bdc <_localeconv_r>
 800676e:	f8d0 a000 	ldr.w	sl, [r0]
 8006772:	4650      	mov	r0, sl
 8006774:	f7f9 fd34 	bl	80001e0 <strlen>
 8006778:	2300      	movs	r3, #0
 800677a:	930a      	str	r3, [sp, #40]	; 0x28
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	f8d8 3000 	ldr.w	r3, [r8]
 8006784:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006788:	3307      	adds	r3, #7
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	f8c8 2000 	str.w	r2, [r8]
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800679e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80067a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80067ac:	ee08 0a10 	vmov	s16, r0
 80067b0:	4b9f      	ldr	r3, [pc, #636]	; (8006a30 <_printf_float+0x2dc>)
 80067b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ba:	f7fa f9bf 	bl	8000b3c <__aeabi_dcmpun>
 80067be:	bb88      	cbnz	r0, 8006824 <_printf_float+0xd0>
 80067c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c4:	4b9a      	ldr	r3, [pc, #616]	; (8006a30 <_printf_float+0x2dc>)
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ca:	f7fa f999 	bl	8000b00 <__aeabi_dcmple>
 80067ce:	bb48      	cbnz	r0, 8006824 <_printf_float+0xd0>
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7fa f988 	bl	8000aec <__aeabi_dcmplt>
 80067dc:	b110      	cbz	r0, 80067e4 <_printf_float+0x90>
 80067de:	232d      	movs	r3, #45	; 0x2d
 80067e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e4:	4b93      	ldr	r3, [pc, #588]	; (8006a34 <_printf_float+0x2e0>)
 80067e6:	4894      	ldr	r0, [pc, #592]	; (8006a38 <_printf_float+0x2e4>)
 80067e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067ec:	bf94      	ite	ls
 80067ee:	4698      	movls	r8, r3
 80067f0:	4680      	movhi	r8, r0
 80067f2:	2303      	movs	r3, #3
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	9b05      	ldr	r3, [sp, #20]
 80067f8:	f023 0204 	bic.w	r2, r3, #4
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	9700      	str	r7, [sp, #0]
 8006804:	4633      	mov	r3, r6
 8006806:	aa0b      	add	r2, sp, #44	; 0x2c
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f9d8 	bl	8006bc0 <_printf_common>
 8006810:	3001      	adds	r0, #1
 8006812:	f040 8090 	bne.w	8006936 <_printf_float+0x1e2>
 8006816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800681a:	b00d      	add	sp, #52	; 0x34
 800681c:	ecbd 8b02 	vpop	{d8}
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7fa f986 	bl	8000b3c <__aeabi_dcmpun>
 8006830:	b140      	cbz	r0, 8006844 <_printf_float+0xf0>
 8006832:	464b      	mov	r3, r9
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfbc      	itt	lt
 8006838:	232d      	movlt	r3, #45	; 0x2d
 800683a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800683e:	487f      	ldr	r0, [pc, #508]	; (8006a3c <_printf_float+0x2e8>)
 8006840:	4b7f      	ldr	r3, [pc, #508]	; (8006a40 <_printf_float+0x2ec>)
 8006842:	e7d1      	b.n	80067e8 <_printf_float+0x94>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800684a:	9206      	str	r2, [sp, #24]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	d13f      	bne.n	80068d0 <_printf_float+0x17c>
 8006850:	2306      	movs	r3, #6
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	9b05      	ldr	r3, [sp, #20]
 8006856:	6861      	ldr	r1, [r4, #4]
 8006858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800685c:	2300      	movs	r3, #0
 800685e:	9303      	str	r3, [sp, #12]
 8006860:	ab0a      	add	r3, sp, #40	; 0x28
 8006862:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006866:	ab09      	add	r3, sp, #36	; 0x24
 8006868:	ec49 8b10 	vmov	d0, r8, r9
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff fecd 	bl	8006614 <__cvt>
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687e:	2b47      	cmp	r3, #71	; 0x47
 8006880:	4680      	mov	r8, r0
 8006882:	d108      	bne.n	8006896 <_printf_float+0x142>
 8006884:	1cc8      	adds	r0, r1, #3
 8006886:	db02      	blt.n	800688e <_printf_float+0x13a>
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	4299      	cmp	r1, r3
 800688c:	dd41      	ble.n	8006912 <_printf_float+0x1be>
 800688e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006892:	fa5f fb8b 	uxtb.w	fp, fp
 8006896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800689a:	d820      	bhi.n	80068de <_printf_float+0x18a>
 800689c:	3901      	subs	r1, #1
 800689e:	465a      	mov	r2, fp
 80068a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068a4:	9109      	str	r1, [sp, #36]	; 0x24
 80068a6:	f7ff ff17 	bl	80066d8 <__exponent>
 80068aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ac:	1813      	adds	r3, r2, r0
 80068ae:	2a01      	cmp	r2, #1
 80068b0:	4681      	mov	r9, r0
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	dc02      	bgt.n	80068bc <_printf_float+0x168>
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	07d2      	lsls	r2, r2, #31
 80068ba:	d501      	bpl.n	80068c0 <_printf_float+0x16c>
 80068bc:	3301      	adds	r3, #1
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d09c      	beq.n	8006802 <_printf_float+0xae>
 80068c8:	232d      	movs	r3, #45	; 0x2d
 80068ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ce:	e798      	b.n	8006802 <_printf_float+0xae>
 80068d0:	9a06      	ldr	r2, [sp, #24]
 80068d2:	2a47      	cmp	r2, #71	; 0x47
 80068d4:	d1be      	bne.n	8006854 <_printf_float+0x100>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1bc      	bne.n	8006854 <_printf_float+0x100>
 80068da:	2301      	movs	r3, #1
 80068dc:	e7b9      	b.n	8006852 <_printf_float+0xfe>
 80068de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068e2:	d118      	bne.n	8006916 <_printf_float+0x1c2>
 80068e4:	2900      	cmp	r1, #0
 80068e6:	6863      	ldr	r3, [r4, #4]
 80068e8:	dd0b      	ble.n	8006902 <_printf_float+0x1ae>
 80068ea:	6121      	str	r1, [r4, #16]
 80068ec:	b913      	cbnz	r3, 80068f4 <_printf_float+0x1a0>
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	07d0      	lsls	r0, r2, #31
 80068f2:	d502      	bpl.n	80068fa <_printf_float+0x1a6>
 80068f4:	3301      	adds	r3, #1
 80068f6:	440b      	add	r3, r1
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80068fc:	f04f 0900 	mov.w	r9, #0
 8006900:	e7de      	b.n	80068c0 <_printf_float+0x16c>
 8006902:	b913      	cbnz	r3, 800690a <_printf_float+0x1b6>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	07d2      	lsls	r2, r2, #31
 8006908:	d501      	bpl.n	800690e <_printf_float+0x1ba>
 800690a:	3302      	adds	r3, #2
 800690c:	e7f4      	b.n	80068f8 <_printf_float+0x1a4>
 800690e:	2301      	movs	r3, #1
 8006910:	e7f2      	b.n	80068f8 <_printf_float+0x1a4>
 8006912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	4299      	cmp	r1, r3
 800691a:	db05      	blt.n	8006928 <_printf_float+0x1d4>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	6121      	str	r1, [r4, #16]
 8006920:	07d8      	lsls	r0, r3, #31
 8006922:	d5ea      	bpl.n	80068fa <_printf_float+0x1a6>
 8006924:	1c4b      	adds	r3, r1, #1
 8006926:	e7e7      	b.n	80068f8 <_printf_float+0x1a4>
 8006928:	2900      	cmp	r1, #0
 800692a:	bfd4      	ite	le
 800692c:	f1c1 0202 	rsble	r2, r1, #2
 8006930:	2201      	movgt	r2, #1
 8006932:	4413      	add	r3, r2
 8006934:	e7e0      	b.n	80068f8 <_printf_float+0x1a4>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	055a      	lsls	r2, r3, #21
 800693a:	d407      	bmi.n	800694c <_printf_float+0x1f8>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	4642      	mov	r2, r8
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	d12c      	bne.n	80069a4 <_printf_float+0x250>
 800694a:	e764      	b.n	8006816 <_printf_float+0xc2>
 800694c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006950:	f240 80e0 	bls.w	8006b14 <_printf_float+0x3c0>
 8006954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006958:	2200      	movs	r2, #0
 800695a:	2300      	movs	r3, #0
 800695c:	f7fa f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006960:	2800      	cmp	r0, #0
 8006962:	d034      	beq.n	80069ce <_printf_float+0x27a>
 8006964:	4a37      	ldr	r2, [pc, #220]	; (8006a44 <_printf_float+0x2f0>)
 8006966:	2301      	movs	r3, #1
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af51 	beq.w	8006816 <_printf_float+0xc2>
 8006974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006978:	429a      	cmp	r2, r3
 800697a:	db02      	blt.n	8006982 <_printf_float+0x22e>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07d8      	lsls	r0, r3, #31
 8006980:	d510      	bpl.n	80069a4 <_printf_float+0x250>
 8006982:	ee18 3a10 	vmov	r3, s16
 8006986:	4652      	mov	r2, sl
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	f43f af41 	beq.w	8006816 <_printf_float+0xc2>
 8006994:	f04f 0800 	mov.w	r8, #0
 8006998:	f104 091a 	add.w	r9, r4, #26
 800699c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699e:	3b01      	subs	r3, #1
 80069a0:	4543      	cmp	r3, r8
 80069a2:	dc09      	bgt.n	80069b8 <_printf_float+0x264>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	079b      	lsls	r3, r3, #30
 80069a8:	f100 8105 	bmi.w	8006bb6 <_printf_float+0x462>
 80069ac:	68e0      	ldr	r0, [r4, #12]
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	4298      	cmp	r0, r3
 80069b2:	bfb8      	it	lt
 80069b4:	4618      	movlt	r0, r3
 80069b6:	e730      	b.n	800681a <_printf_float+0xc6>
 80069b8:	2301      	movs	r3, #1
 80069ba:	464a      	mov	r2, r9
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f af27 	beq.w	8006816 <_printf_float+0xc2>
 80069c8:	f108 0801 	add.w	r8, r8, #1
 80069cc:	e7e6      	b.n	800699c <_printf_float+0x248>
 80069ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dc39      	bgt.n	8006a48 <_printf_float+0x2f4>
 80069d4:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <_printf_float+0x2f0>)
 80069d6:	2301      	movs	r3, #1
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af19 	beq.w	8006816 <_printf_float+0xc2>
 80069e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d102      	bne.n	80069f2 <_printf_float+0x29e>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	07d9      	lsls	r1, r3, #31
 80069f0:	d5d8      	bpl.n	80069a4 <_printf_float+0x250>
 80069f2:	ee18 3a10 	vmov	r3, s16
 80069f6:	4652      	mov	r2, sl
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f af09 	beq.w	8006816 <_printf_float+0xc2>
 8006a04:	f04f 0900 	mov.w	r9, #0
 8006a08:	f104 0a1a 	add.w	sl, r4, #26
 8006a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0e:	425b      	negs	r3, r3
 8006a10:	454b      	cmp	r3, r9
 8006a12:	dc01      	bgt.n	8006a18 <_printf_float+0x2c4>
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	e792      	b.n	800693e <_printf_float+0x1ea>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f aef7 	beq.w	8006816 <_printf_float+0xc2>
 8006a28:	f109 0901 	add.w	r9, r9, #1
 8006a2c:	e7ee      	b.n	8006a0c <_printf_float+0x2b8>
 8006a2e:	bf00      	nop
 8006a30:	7fefffff 	.word	0x7fefffff
 8006a34:	08009374 	.word	0x08009374
 8006a38:	08009378 	.word	0x08009378
 8006a3c:	08009380 	.word	0x08009380
 8006a40:	0800937c 	.word	0x0800937c
 8006a44:	08009384 	.word	0x08009384
 8006a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	bfa8      	it	ge
 8006a50:	461a      	movge	r2, r3
 8006a52:	2a00      	cmp	r2, #0
 8006a54:	4691      	mov	r9, r2
 8006a56:	dc37      	bgt.n	8006ac8 <_printf_float+0x374>
 8006a58:	f04f 0b00 	mov.w	fp, #0
 8006a5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a60:	f104 021a 	add.w	r2, r4, #26
 8006a64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	eba3 0309 	sub.w	r3, r3, r9
 8006a6c:	455b      	cmp	r3, fp
 8006a6e:	dc33      	bgt.n	8006ad8 <_printf_float+0x384>
 8006a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a74:	429a      	cmp	r2, r3
 8006a76:	db3b      	blt.n	8006af0 <_printf_float+0x39c>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	07da      	lsls	r2, r3, #31
 8006a7c:	d438      	bmi.n	8006af0 <_printf_float+0x39c>
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a80:	9a05      	ldr	r2, [sp, #20]
 8006a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a84:	1a9a      	subs	r2, r3, r2
 8006a86:	eba3 0901 	sub.w	r9, r3, r1
 8006a8a:	4591      	cmp	r9, r2
 8006a8c:	bfa8      	it	ge
 8006a8e:	4691      	movge	r9, r2
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	dc35      	bgt.n	8006b02 <_printf_float+0x3ae>
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9e:	f104 0a1a 	add.w	sl, r4, #26
 8006aa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	eba3 0309 	sub.w	r3, r3, r9
 8006aac:	4543      	cmp	r3, r8
 8006aae:	f77f af79 	ble.w	80069a4 <_printf_float+0x250>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f aeaa 	beq.w	8006816 <_printf_float+0xc2>
 8006ac2:	f108 0801 	add.w	r8, r8, #1
 8006ac6:	e7ec      	b.n	8006aa2 <_printf_float+0x34e>
 8006ac8:	4613      	mov	r3, r2
 8006aca:	4631      	mov	r1, r6
 8006acc:	4642      	mov	r2, r8
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d1c0      	bne.n	8006a58 <_printf_float+0x304>
 8006ad6:	e69e      	b.n	8006816 <_printf_float+0xc2>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	9205      	str	r2, [sp, #20]
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f ae97 	beq.w	8006816 <_printf_float+0xc2>
 8006ae8:	9a05      	ldr	r2, [sp, #20]
 8006aea:	f10b 0b01 	add.w	fp, fp, #1
 8006aee:	e7b9      	b.n	8006a64 <_printf_float+0x310>
 8006af0:	ee18 3a10 	vmov	r3, s16
 8006af4:	4652      	mov	r2, sl
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d1be      	bne.n	8006a7e <_printf_float+0x32a>
 8006b00:	e689      	b.n	8006816 <_printf_float+0xc2>
 8006b02:	9a05      	ldr	r2, [sp, #20]
 8006b04:	464b      	mov	r3, r9
 8006b06:	4442      	add	r2, r8
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d1c1      	bne.n	8006a96 <_printf_float+0x342>
 8006b12:	e680      	b.n	8006816 <_printf_float+0xc2>
 8006b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b16:	2a01      	cmp	r2, #1
 8006b18:	dc01      	bgt.n	8006b1e <_printf_float+0x3ca>
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d538      	bpl.n	8006b90 <_printf_float+0x43c>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4642      	mov	r2, r8
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f43f ae74 	beq.w	8006816 <_printf_float+0xc2>
 8006b2e:	ee18 3a10 	vmov	r3, s16
 8006b32:	4652      	mov	r2, sl
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f ae6b 	beq.w	8006816 <_printf_float+0xc2>
 8006b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b44:	2200      	movs	r2, #0
 8006b46:	2300      	movs	r3, #0
 8006b48:	f7f9 ffc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b4c:	b9d8      	cbnz	r0, 8006b86 <_printf_float+0x432>
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	f108 0201 	add.w	r2, r8, #1
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d10e      	bne.n	8006b7e <_printf_float+0x42a>
 8006b60:	e659      	b.n	8006816 <_printf_float+0xc2>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae52 	beq.w	8006816 <_printf_float+0xc2>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	4543      	cmp	r3, r8
 8006b7c:	dcf1      	bgt.n	8006b62 <_printf_float+0x40e>
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b84:	e6dc      	b.n	8006940 <_printf_float+0x1ec>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	f104 0a1a 	add.w	sl, r4, #26
 8006b8e:	e7f2      	b.n	8006b76 <_printf_float+0x422>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4642      	mov	r2, r8
 8006b94:	e7df      	b.n	8006b56 <_printf_float+0x402>
 8006b96:	2301      	movs	r3, #1
 8006b98:	464a      	mov	r2, r9
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae38 	beq.w	8006816 <_printf_float+0xc2>
 8006ba6:	f108 0801 	add.w	r8, r8, #1
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bae:	1a5b      	subs	r3, r3, r1
 8006bb0:	4543      	cmp	r3, r8
 8006bb2:	dcf0      	bgt.n	8006b96 <_printf_float+0x442>
 8006bb4:	e6fa      	b.n	80069ac <_printf_float+0x258>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	f104 0919 	add.w	r9, r4, #25
 8006bbe:	e7f4      	b.n	8006baa <_printf_float+0x456>

08006bc0 <_printf_common>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	688a      	ldr	r2, [r1, #8]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	bfb8      	it	lt
 8006bd4:	4613      	movlt	r3, r2
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b10a      	cbz	r2, 8006be6 <_printf_common+0x26>
 8006be2:	3301      	adds	r3, #1
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	0699      	lsls	r1, r3, #26
 8006bea:	bf42      	ittt	mi
 8006bec:	6833      	ldrmi	r3, [r6, #0]
 8006bee:	3302      	addmi	r3, #2
 8006bf0:	6033      	strmi	r3, [r6, #0]
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	f015 0506 	ands.w	r5, r5, #6
 8006bf8:	d106      	bne.n	8006c08 <_printf_common+0x48>
 8006bfa:	f104 0a19 	add.w	sl, r4, #25
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	6832      	ldr	r2, [r6, #0]
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dc26      	bgt.n	8006c56 <_printf_common+0x96>
 8006c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c0c:	1e13      	subs	r3, r2, #0
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	bf18      	it	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	0692      	lsls	r2, r2, #26
 8006c16:	d42b      	bmi.n	8006c70 <_printf_common+0xb0>
 8006c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c0      	blx	r8
 8006c22:	3001      	adds	r0, #1
 8006c24:	d01e      	beq.n	8006c64 <_printf_common+0xa4>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	68e5      	ldr	r5, [r4, #12]
 8006c2a:	6832      	ldr	r2, [r6, #0]
 8006c2c:	f003 0306 	and.w	r3, r3, #6
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	bf08      	it	eq
 8006c34:	1aad      	subeq	r5, r5, r2
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	6922      	ldr	r2, [r4, #16]
 8006c3a:	bf0c      	ite	eq
 8006c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c40:	2500      	movne	r5, #0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfc4      	itt	gt
 8006c46:	1a9b      	subgt	r3, r3, r2
 8006c48:	18ed      	addgt	r5, r5, r3
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	341a      	adds	r4, #26
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	d11a      	bne.n	8006c88 <_printf_common+0xc8>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e008      	b.n	8006c68 <_printf_common+0xa8>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	47c0      	blx	r8
 8006c60:	3001      	adds	r0, #1
 8006c62:	d103      	bne.n	8006c6c <_printf_common+0xac>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	e7c6      	b.n	8006bfe <_printf_common+0x3e>
 8006c70:	18e1      	adds	r1, r4, r3
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	2030      	movs	r0, #48	; 0x30
 8006c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7a:	4422      	add	r2, r4
 8006c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7c7      	b.n	8006c18 <_printf_common+0x58>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c0      	blx	r8
 8006c92:	3001      	adds	r0, #1
 8006c94:	d0e6      	beq.n	8006c64 <_printf_common+0xa4>
 8006c96:	3601      	adds	r6, #1
 8006c98:	e7d9      	b.n	8006c4e <_printf_common+0x8e>
	...

08006c9c <_printf_i>:
 8006c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	7e0f      	ldrb	r7, [r1, #24]
 8006ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca4:	2f78      	cmp	r7, #120	; 0x78
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	469a      	mov	sl, r3
 8006cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cb2:	d807      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cb4:	2f62      	cmp	r7, #98	; 0x62
 8006cb6:	d80a      	bhi.n	8006cce <_printf_i+0x32>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f000 80d8 	beq.w	8006e6e <_printf_i+0x1d2>
 8006cbe:	2f58      	cmp	r7, #88	; 0x58
 8006cc0:	f000 80a3 	beq.w	8006e0a <_printf_i+0x16e>
 8006cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ccc:	e03a      	b.n	8006d44 <_printf_i+0xa8>
 8006cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd2:	2b15      	cmp	r3, #21
 8006cd4:	d8f6      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cd6:	a101      	add	r1, pc, #4	; (adr r1, 8006cdc <_printf_i+0x40>)
 8006cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006cc5 	.word	0x08006cc5
 8006ce8:	08006cc5 	.word	0x08006cc5
 8006cec:	08006cc5 	.word	0x08006cc5
 8006cf0:	08006cc5 	.word	0x08006cc5
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006cc5 	.word	0x08006cc5
 8006cfc:	08006cc5 	.word	0x08006cc5
 8006d00:	08006cc5 	.word	0x08006cc5
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08006e55 	.word	0x08006e55
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006e37 	.word	0x08006e37
 8006d14:	08006cc5 	.word	0x08006cc5
 8006d18:	08006cc5 	.word	0x08006cc5
 8006d1c:	08006e77 	.word	0x08006e77
 8006d20:	08006cc5 	.word	0x08006cc5
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006cc5 	.word	0x08006cc5
 8006d2c:	08006cc5 	.word	0x08006cc5
 8006d30:	08006e3f 	.word	0x08006e3f
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0a3      	b.n	8006e90 <_printf_i+0x1f4>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	6829      	ldr	r1, [r5, #0]
 8006d4c:	0606      	lsls	r6, r0, #24
 8006d4e:	f101 0304 	add.w	r3, r1, #4
 8006d52:	d50a      	bpl.n	8006d6a <_printf_i+0xce>
 8006d54:	680e      	ldr	r6, [r1, #0]
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xc8>
 8006d5c:	232d      	movs	r3, #45	; 0x2d
 8006d5e:	4276      	negs	r6, r6
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	485e      	ldr	r0, [pc, #376]	; (8006ee0 <_printf_i+0x244>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e019      	b.n	8006d9e <_printf_i+0x102>
 8006d6a:	680e      	ldr	r6, [r1, #0]
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d72:	bf18      	it	ne
 8006d74:	b236      	sxthne	r6, r6
 8006d76:	e7ef      	b.n	8006d58 <_printf_i+0xbc>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	6029      	str	r1, [r5, #0]
 8006d80:	0601      	lsls	r1, r0, #24
 8006d82:	d501      	bpl.n	8006d88 <_printf_i+0xec>
 8006d84:	681e      	ldr	r6, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <_printf_i+0xf2>
 8006d88:	0646      	lsls	r6, r0, #25
 8006d8a:	d5fb      	bpl.n	8006d84 <_printf_i+0xe8>
 8006d8c:	881e      	ldrh	r6, [r3, #0]
 8006d8e:	4854      	ldr	r0, [pc, #336]	; (8006ee0 <_printf_i+0x244>)
 8006d90:	2f6f      	cmp	r7, #111	; 0x6f
 8006d92:	bf0c      	ite	eq
 8006d94:	2308      	moveq	r3, #8
 8006d96:	230a      	movne	r3, #10
 8006d98:	2100      	movs	r1, #0
 8006d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9e:	6865      	ldr	r5, [r4, #4]
 8006da0:	60a5      	str	r5, [r4, #8]
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	bfa2      	ittt	ge
 8006da6:	6821      	ldrge	r1, [r4, #0]
 8006da8:	f021 0104 	bicge.w	r1, r1, #4
 8006dac:	6021      	strge	r1, [r4, #0]
 8006dae:	b90e      	cbnz	r6, 8006db4 <_printf_i+0x118>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d04d      	beq.n	8006e50 <_printf_i+0x1b4>
 8006db4:	4615      	mov	r5, r2
 8006db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dba:	fb03 6711 	mls	r7, r3, r1, r6
 8006dbe:	5dc7      	ldrb	r7, [r0, r7]
 8006dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	42bb      	cmp	r3, r7
 8006dc8:	460e      	mov	r6, r1
 8006dca:	d9f4      	bls.n	8006db6 <_printf_i+0x11a>
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10b      	bne.n	8006de8 <_printf_i+0x14c>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	07de      	lsls	r6, r3, #31
 8006dd4:	d508      	bpl.n	8006de8 <_printf_i+0x14c>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	bfde      	ittt	le
 8006dde:	2330      	movle	r3, #48	; 0x30
 8006de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006de8:	1b52      	subs	r2, r2, r5
 8006dea:	6122      	str	r2, [r4, #16]
 8006dec:	f8cd a000 	str.w	sl, [sp]
 8006df0:	464b      	mov	r3, r9
 8006df2:	aa03      	add	r2, sp, #12
 8006df4:	4621      	mov	r1, r4
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7ff fee2 	bl	8006bc0 <_printf_common>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d14c      	bne.n	8006e9a <_printf_i+0x1fe>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e04:	b004      	add	sp, #16
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	4835      	ldr	r0, [pc, #212]	; (8006ee0 <_printf_i+0x244>)
 8006e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e10:	6829      	ldr	r1, [r5, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e18:	6029      	str	r1, [r5, #0]
 8006e1a:	061d      	lsls	r5, r3, #24
 8006e1c:	d514      	bpl.n	8006e48 <_printf_i+0x1ac>
 8006e1e:	07df      	lsls	r7, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b91e      	cbnz	r6, 8006e32 <_printf_i+0x196>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	f023 0320 	bic.w	r3, r3, #32
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	2310      	movs	r3, #16
 8006e34:	e7b0      	b.n	8006d98 <_printf_i+0xfc>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	f043 0320 	orr.w	r3, r3, #32
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	2378      	movs	r3, #120	; 0x78
 8006e40:	4828      	ldr	r0, [pc, #160]	; (8006ee4 <_printf_i+0x248>)
 8006e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e46:	e7e3      	b.n	8006e10 <_printf_i+0x174>
 8006e48:	0659      	lsls	r1, r3, #25
 8006e4a:	bf48      	it	mi
 8006e4c:	b2b6      	uxthmi	r6, r6
 8006e4e:	e7e6      	b.n	8006e1e <_printf_i+0x182>
 8006e50:	4615      	mov	r5, r2
 8006e52:	e7bb      	b.n	8006dcc <_printf_i+0x130>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	6826      	ldr	r6, [r4, #0]
 8006e58:	6961      	ldr	r1, [r4, #20]
 8006e5a:	1d18      	adds	r0, r3, #4
 8006e5c:	6028      	str	r0, [r5, #0]
 8006e5e:	0635      	lsls	r5, r6, #24
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	d501      	bpl.n	8006e68 <_printf_i+0x1cc>
 8006e64:	6019      	str	r1, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <_printf_i+0x1d2>
 8006e68:	0670      	lsls	r0, r6, #25
 8006e6a:	d5fb      	bpl.n	8006e64 <_printf_i+0x1c8>
 8006e6c:	8019      	strh	r1, [r3, #0]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	4615      	mov	r5, r2
 8006e74:	e7ba      	b.n	8006dec <_printf_i+0x150>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	1d1a      	adds	r2, r3, #4
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	681d      	ldr	r5, [r3, #0]
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	2100      	movs	r1, #0
 8006e82:	4628      	mov	r0, r5
 8006e84:	f7f9 f9b4 	bl	80001f0 <memchr>
 8006e88:	b108      	cbz	r0, 8006e8e <_printf_i+0x1f2>
 8006e8a:	1b40      	subs	r0, r0, r5
 8006e8c:	6060      	str	r0, [r4, #4]
 8006e8e:	6863      	ldr	r3, [r4, #4]
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	2300      	movs	r3, #0
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	e7a8      	b.n	8006dec <_printf_i+0x150>
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	47d0      	blx	sl
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0ab      	beq.n	8006e00 <_printf_i+0x164>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	079b      	lsls	r3, r3, #30
 8006eac:	d413      	bmi.n	8006ed6 <_printf_i+0x23a>
 8006eae:	68e0      	ldr	r0, [r4, #12]
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	4298      	cmp	r0, r3
 8006eb4:	bfb8      	it	lt
 8006eb6:	4618      	movlt	r0, r3
 8006eb8:	e7a4      	b.n	8006e04 <_printf_i+0x168>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	47d0      	blx	sl
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d09b      	beq.n	8006e00 <_printf_i+0x164>
 8006ec8:	3501      	adds	r5, #1
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	9903      	ldr	r1, [sp, #12]
 8006ece:	1a5b      	subs	r3, r3, r1
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	dcf2      	bgt.n	8006eba <_printf_i+0x21e>
 8006ed4:	e7eb      	b.n	8006eae <_printf_i+0x212>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	f104 0619 	add.w	r6, r4, #25
 8006edc:	e7f5      	b.n	8006eca <_printf_i+0x22e>
 8006ede:	bf00      	nop
 8006ee0:	08009386 	.word	0x08009386
 8006ee4:	08009397 	.word	0x08009397

08006ee8 <quorem>:
 8006ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	6903      	ldr	r3, [r0, #16]
 8006eee:	690c      	ldr	r4, [r1, #16]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f2c0 8081 	blt.w	8006ffa <quorem+0x112>
 8006ef8:	3c01      	subs	r4, #1
 8006efa:	f101 0814 	add.w	r8, r1, #20
 8006efe:	f100 0514 	add.w	r5, r0, #20
 8006f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f10:	3301      	adds	r3, #1
 8006f12:	429a      	cmp	r2, r3
 8006f14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f20:	d331      	bcc.n	8006f86 <quorem+0x9e>
 8006f22:	f04f 0e00 	mov.w	lr, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	46ac      	mov	ip, r5
 8006f2a:	46f2      	mov	sl, lr
 8006f2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f30:	b293      	uxth	r3, r2
 8006f32:	fb06 e303 	mla	r3, r6, r3, lr
 8006f36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f40:	f8dc a000 	ldr.w	sl, [ip]
 8006f44:	0c12      	lsrs	r2, r2, #16
 8006f46:	fa13 f38a 	uxtah	r3, r3, sl
 8006f4a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f56:	b292      	uxth	r2, r2
 8006f58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f60:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f64:	4581      	cmp	r9, r0
 8006f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f6a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f72:	d2db      	bcs.n	8006f2c <quorem+0x44>
 8006f74:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f78:	b92b      	cbnz	r3, 8006f86 <quorem+0x9e>
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	d32e      	bcc.n	8006fe2 <quorem+0xfa>
 8006f84:	613c      	str	r4, [r7, #16]
 8006f86:	4638      	mov	r0, r7
 8006f88:	f001 f8c4 	bl	8008114 <__mcmp>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	db24      	blt.n	8006fda <quorem+0xf2>
 8006f90:	3601      	adds	r6, #1
 8006f92:	4628      	mov	r0, r5
 8006f94:	f04f 0c00 	mov.w	ip, #0
 8006f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f9c:	f8d0 e000 	ldr.w	lr, [r0]
 8006fa0:	b293      	uxth	r3, r2
 8006fa2:	ebac 0303 	sub.w	r3, ip, r3
 8006fa6:	0c12      	lsrs	r2, r2, #16
 8006fa8:	fa13 f38e 	uxtah	r3, r3, lr
 8006fac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fba:	45c1      	cmp	r9, r8
 8006fbc:	f840 3b04 	str.w	r3, [r0], #4
 8006fc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fc4:	d2e8      	bcs.n	8006f98 <quorem+0xb0>
 8006fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fce:	b922      	cbnz	r2, 8006fda <quorem+0xf2>
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	d30a      	bcc.n	8006fee <quorem+0x106>
 8006fd8:	613c      	str	r4, [r7, #16]
 8006fda:	4630      	mov	r0, r6
 8006fdc:	b003      	add	sp, #12
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d1cc      	bne.n	8006f84 <quorem+0x9c>
 8006fea:	3c01      	subs	r4, #1
 8006fec:	e7c7      	b.n	8006f7e <quorem+0x96>
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <quorem+0xf0>
 8006ff6:	3c01      	subs	r4, #1
 8006ff8:	e7eb      	b.n	8006fd2 <quorem+0xea>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e7ee      	b.n	8006fdc <quorem+0xf4>
	...

08007000 <_dtoa_r>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b04 	vpush	{d8-d9}
 8007008:	ec57 6b10 	vmov	r6, r7, d0
 800700c:	b093      	sub	sp, #76	; 0x4c
 800700e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007014:	9106      	str	r1, [sp, #24]
 8007016:	ee10 aa10 	vmov	sl, s0
 800701a:	4604      	mov	r4, r0
 800701c:	9209      	str	r2, [sp, #36]	; 0x24
 800701e:	930c      	str	r3, [sp, #48]	; 0x30
 8007020:	46bb      	mov	fp, r7
 8007022:	b975      	cbnz	r5, 8007042 <_dtoa_r+0x42>
 8007024:	2010      	movs	r0, #16
 8007026:	f000 fddd 	bl	8007be4 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	6260      	str	r0, [r4, #36]	; 0x24
 800702e:	b920      	cbnz	r0, 800703a <_dtoa_r+0x3a>
 8007030:	4ba7      	ldr	r3, [pc, #668]	; (80072d0 <_dtoa_r+0x2d0>)
 8007032:	21ea      	movs	r1, #234	; 0xea
 8007034:	48a7      	ldr	r0, [pc, #668]	; (80072d4 <_dtoa_r+0x2d4>)
 8007036:	f001 fa75 	bl	8008524 <__assert_func>
 800703a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800703e:	6005      	str	r5, [r0, #0]
 8007040:	60c5      	str	r5, [r0, #12]
 8007042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	b151      	cbz	r1, 800705e <_dtoa_r+0x5e>
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	604a      	str	r2, [r1, #4]
 800704c:	2301      	movs	r3, #1
 800704e:	4093      	lsls	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fe1c 	bl	8007c90 <_Bfree>
 8007058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	1e3b      	subs	r3, r7, #0
 8007060:	bfaa      	itet	ge
 8007062:	2300      	movge	r3, #0
 8007064:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007068:	f8c8 3000 	strge.w	r3, [r8]
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <_dtoa_r+0x2d8>)
 800706e:	bfbc      	itt	lt
 8007070:	2201      	movlt	r2, #1
 8007072:	f8c8 2000 	strlt.w	r2, [r8]
 8007076:	ea33 030b 	bics.w	r3, r3, fp
 800707a:	d11b      	bne.n	80070b4 <_dtoa_r+0xb4>
 800707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800707e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007088:	4333      	orrs	r3, r6
 800708a:	f000 8592 	beq.w	8007bb2 <_dtoa_r+0xbb2>
 800708e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007090:	b963      	cbnz	r3, 80070ac <_dtoa_r+0xac>
 8007092:	4b92      	ldr	r3, [pc, #584]	; (80072dc <_dtoa_r+0x2dc>)
 8007094:	e022      	b.n	80070dc <_dtoa_r+0xdc>
 8007096:	4b92      	ldr	r3, [pc, #584]	; (80072e0 <_dtoa_r+0x2e0>)
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	3308      	adds	r3, #8
 800709c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	9801      	ldr	r0, [sp, #4]
 80070a2:	b013      	add	sp, #76	; 0x4c
 80070a4:	ecbd 8b04 	vpop	{d8-d9}
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	4b8b      	ldr	r3, [pc, #556]	; (80072dc <_dtoa_r+0x2dc>)
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	3303      	adds	r3, #3
 80070b2:	e7f3      	b.n	800709c <_dtoa_r+0x9c>
 80070b4:	2200      	movs	r2, #0
 80070b6:	2300      	movs	r3, #0
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	f7f9 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80070c0:	ec4b ab19 	vmov	d9, sl, fp
 80070c4:	4680      	mov	r8, r0
 80070c6:	b158      	cbz	r0, 80070e0 <_dtoa_r+0xe0>
 80070c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ca:	2301      	movs	r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 856b 	beq.w	8007bac <_dtoa_r+0xbac>
 80070d6:	4883      	ldr	r0, [pc, #524]	; (80072e4 <_dtoa_r+0x2e4>)
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	1e43      	subs	r3, r0, #1
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	e7df      	b.n	80070a0 <_dtoa_r+0xa0>
 80070e0:	ec4b ab10 	vmov	d0, sl, fp
 80070e4:	aa10      	add	r2, sp, #64	; 0x40
 80070e6:	a911      	add	r1, sp, #68	; 0x44
 80070e8:	4620      	mov	r0, r4
 80070ea:	f001 f8b9 	bl	8008260 <__d2b>
 80070ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070f2:	ee08 0a10 	vmov	s16, r0
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	f000 8084 	beq.w	8007204 <_dtoa_r+0x204>
 80070fc:	ee19 3a90 	vmov	r3, s19
 8007100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007104:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007108:	4656      	mov	r6, sl
 800710a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800710e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007112:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007116:	4b74      	ldr	r3, [pc, #464]	; (80072e8 <_dtoa_r+0x2e8>)
 8007118:	2200      	movs	r2, #0
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f8bb 	bl	8000298 <__aeabi_dsub>
 8007122:	a365      	add	r3, pc, #404	; (adr r3, 80072b8 <_dtoa_r+0x2b8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 fa6e 	bl	8000608 <__aeabi_dmul>
 800712c:	a364      	add	r3, pc, #400	; (adr r3, 80072c0 <_dtoa_r+0x2c0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f8b3 	bl	800029c <__adddf3>
 8007136:	4606      	mov	r6, r0
 8007138:	4628      	mov	r0, r5
 800713a:	460f      	mov	r7, r1
 800713c:	f7f9 f9fa 	bl	8000534 <__aeabi_i2d>
 8007140:	a361      	add	r3, pc, #388	; (adr r3, 80072c8 <_dtoa_r+0x2c8>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 fa5f 	bl	8000608 <__aeabi_dmul>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 f8a3 	bl	800029c <__adddf3>
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	f7f9 fd05 	bl	8000b68 <__aeabi_d2iz>
 800715e:	2200      	movs	r2, #0
 8007160:	9000      	str	r0, [sp, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fcc0 	bl	8000aec <__aeabi_dcmplt>
 800716c:	b150      	cbz	r0, 8007184 <_dtoa_r+0x184>
 800716e:	9800      	ldr	r0, [sp, #0]
 8007170:	f7f9 f9e0 	bl	8000534 <__aeabi_i2d>
 8007174:	4632      	mov	r2, r6
 8007176:	463b      	mov	r3, r7
 8007178:	f7f9 fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800717c:	b910      	cbnz	r0, 8007184 <_dtoa_r+0x184>
 800717e:	9b00      	ldr	r3, [sp, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	2b16      	cmp	r3, #22
 8007188:	d85a      	bhi.n	8007240 <_dtoa_r+0x240>
 800718a:	9a00      	ldr	r2, [sp, #0]
 800718c:	4b57      	ldr	r3, [pc, #348]	; (80072ec <_dtoa_r+0x2ec>)
 800718e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	ec51 0b19 	vmov	r0, r1, d9
 800719a:	f7f9 fca7 	bl	8000aec <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d050      	beq.n	8007244 <_dtoa_r+0x244>
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ae:	1b5d      	subs	r5, r3, r5
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	bf45      	ittet	mi
 80071b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071ba:	9304      	strmi	r3, [sp, #16]
 80071bc:	2300      	movpl	r3, #0
 80071be:	2300      	movmi	r3, #0
 80071c0:	bf4c      	ite	mi
 80071c2:	9305      	strmi	r3, [sp, #20]
 80071c4:	9304      	strpl	r3, [sp, #16]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db3d      	blt.n	8007248 <_dtoa_r+0x248>
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	9a00      	ldr	r2, [sp, #0]
 80071d0:	920a      	str	r2, [sp, #40]	; 0x28
 80071d2:	4413      	add	r3, r2
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b09      	cmp	r3, #9
 80071de:	f200 8089 	bhi.w	80072f4 <_dtoa_r+0x2f4>
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	bfc4      	itt	gt
 80071e6:	3b04      	subgt	r3, #4
 80071e8:	9306      	strgt	r3, [sp, #24]
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	f1a3 0302 	sub.w	r3, r3, #2
 80071f0:	bfcc      	ite	gt
 80071f2:	2500      	movgt	r5, #0
 80071f4:	2501      	movle	r5, #1
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	f200 8087 	bhi.w	800730a <_dtoa_r+0x30a>
 80071fc:	e8df f003 	tbb	[pc, r3]
 8007200:	59383a2d 	.word	0x59383a2d
 8007204:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007208:	441d      	add	r5, r3
 800720a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800720e:	2b20      	cmp	r3, #32
 8007210:	bfc1      	itttt	gt
 8007212:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007216:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800721a:	fa0b f303 	lslgt.w	r3, fp, r3
 800721e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007222:	bfda      	itte	le
 8007224:	f1c3 0320 	rsble	r3, r3, #32
 8007228:	fa06 f003 	lslle.w	r0, r6, r3
 800722c:	4318      	orrgt	r0, r3
 800722e:	f7f9 f971 	bl	8000514 <__aeabi_ui2d>
 8007232:	2301      	movs	r3, #1
 8007234:	4606      	mov	r6, r0
 8007236:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800723a:	3d01      	subs	r5, #1
 800723c:	930e      	str	r3, [sp, #56]	; 0x38
 800723e:	e76a      	b.n	8007116 <_dtoa_r+0x116>
 8007240:	2301      	movs	r3, #1
 8007242:	e7b2      	b.n	80071aa <_dtoa_r+0x1aa>
 8007244:	900b      	str	r0, [sp, #44]	; 0x2c
 8007246:	e7b1      	b.n	80071ac <_dtoa_r+0x1ac>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	9a00      	ldr	r2, [sp, #0]
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	4253      	negs	r3, r2
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	2300      	movs	r3, #0
 8007256:	930a      	str	r3, [sp, #40]	; 0x28
 8007258:	e7bf      	b.n	80071da <_dtoa_r+0x1da>
 800725a:	2300      	movs	r3, #0
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc55      	bgt.n	8007310 <_dtoa_r+0x310>
 8007264:	2301      	movs	r3, #1
 8007266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800726a:	461a      	mov	r2, r3
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	e00c      	b.n	800728a <_dtoa_r+0x28a>
 8007270:	2301      	movs	r3, #1
 8007272:	e7f3      	b.n	800725c <_dtoa_r+0x25c>
 8007274:	2300      	movs	r3, #0
 8007276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	4413      	add	r3, r2
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	3301      	adds	r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	bfb8      	it	lt
 8007288:	2301      	movlt	r3, #1
 800728a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	6042      	str	r2, [r0, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	f102 0614 	add.w	r6, r2, #20
 8007296:	429e      	cmp	r6, r3
 8007298:	6841      	ldr	r1, [r0, #4]
 800729a:	d93d      	bls.n	8007318 <_dtoa_r+0x318>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fcb7 	bl	8007c10 <_Balloc>
 80072a2:	9001      	str	r0, [sp, #4]
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d13b      	bne.n	8007320 <_dtoa_r+0x320>
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <_dtoa_r+0x2f0>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072b0:	e6c0      	b.n	8007034 <_dtoa_r+0x34>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7df      	b.n	8007276 <_dtoa_r+0x276>
 80072b6:	bf00      	nop
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	080093b5 	.word	0x080093b5
 80072d4:	080093cc 	.word	0x080093cc
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	080093b1 	.word	0x080093b1
 80072e0:	080093a8 	.word	0x080093a8
 80072e4:	08009385 	.word	0x08009385
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	080094c0 	.word	0x080094c0
 80072f0:	08009427 	.word	0x08009427
 80072f4:	2501      	movs	r5, #1
 80072f6:	2300      	movs	r3, #0
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	9508      	str	r5, [sp, #32]
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	2312      	movs	r3, #18
 8007308:	e7b0      	b.n	800726c <_dtoa_r+0x26c>
 800730a:	2301      	movs	r3, #1
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	e7f5      	b.n	80072fc <_dtoa_r+0x2fc>
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007316:	e7b8      	b.n	800728a <_dtoa_r+0x28a>
 8007318:	3101      	adds	r1, #1
 800731a:	6041      	str	r1, [r0, #4]
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	e7b8      	b.n	8007292 <_dtoa_r+0x292>
 8007320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2b0e      	cmp	r3, #14
 800732a:	f200 809d 	bhi.w	8007468 <_dtoa_r+0x468>
 800732e:	2d00      	cmp	r5, #0
 8007330:	f000 809a 	beq.w	8007468 <_dtoa_r+0x468>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd32      	ble.n	80073a0 <_dtoa_r+0x3a0>
 800733a:	4ab7      	ldr	r2, [pc, #732]	; (8007618 <_dtoa_r+0x618>)
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	05d8      	lsls	r0, r3, #23
 800734c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007350:	d516      	bpl.n	8007380 <_dtoa_r+0x380>
 8007352:	4bb2      	ldr	r3, [pc, #712]	; (800761c <_dtoa_r+0x61c>)
 8007354:	ec51 0b19 	vmov	r0, r1, d9
 8007358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800735c:	f7f9 fa7e 	bl	800085c <__aeabi_ddiv>
 8007360:	f007 070f 	and.w	r7, r7, #15
 8007364:	4682      	mov	sl, r0
 8007366:	468b      	mov	fp, r1
 8007368:	2503      	movs	r5, #3
 800736a:	4eac      	ldr	r6, [pc, #688]	; (800761c <_dtoa_r+0x61c>)
 800736c:	b957      	cbnz	r7, 8007384 <_dtoa_r+0x384>
 800736e:	4642      	mov	r2, r8
 8007370:	464b      	mov	r3, r9
 8007372:	4650      	mov	r0, sl
 8007374:	4659      	mov	r1, fp
 8007376:	f7f9 fa71 	bl	800085c <__aeabi_ddiv>
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	e028      	b.n	80073d2 <_dtoa_r+0x3d2>
 8007380:	2502      	movs	r5, #2
 8007382:	e7f2      	b.n	800736a <_dtoa_r+0x36a>
 8007384:	07f9      	lsls	r1, r7, #31
 8007386:	d508      	bpl.n	800739a <_dtoa_r+0x39a>
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007390:	f7f9 f93a 	bl	8000608 <__aeabi_dmul>
 8007394:	3501      	adds	r5, #1
 8007396:	4680      	mov	r8, r0
 8007398:	4689      	mov	r9, r1
 800739a:	107f      	asrs	r7, r7, #1
 800739c:	3608      	adds	r6, #8
 800739e:	e7e5      	b.n	800736c <_dtoa_r+0x36c>
 80073a0:	f000 809b 	beq.w	80074da <_dtoa_r+0x4da>
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	4f9d      	ldr	r7, [pc, #628]	; (800761c <_dtoa_r+0x61c>)
 80073a8:	425e      	negs	r6, r3
 80073aa:	4b9b      	ldr	r3, [pc, #620]	; (8007618 <_dtoa_r+0x618>)
 80073ac:	f006 020f 	and.w	r2, r6, #15
 80073b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	ec51 0b19 	vmov	r0, r1, d9
 80073bc:	f7f9 f924 	bl	8000608 <__aeabi_dmul>
 80073c0:	1136      	asrs	r6, r6, #4
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	2300      	movs	r3, #0
 80073c8:	2502      	movs	r5, #2
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d17a      	bne.n	80074c4 <_dtoa_r+0x4c4>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1d3      	bne.n	800737a <_dtoa_r+0x37a>
 80073d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8082 	beq.w	80074de <_dtoa_r+0x4de>
 80073da:	4b91      	ldr	r3, [pc, #580]	; (8007620 <_dtoa_r+0x620>)
 80073dc:	2200      	movs	r2, #0
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	f7f9 fb83 	bl	8000aec <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d079      	beq.n	80074de <_dtoa_r+0x4de>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d076      	beq.n	80074de <_dtoa_r+0x4de>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd36      	ble.n	8007464 <_dtoa_r+0x464>
 80073f6:	9b00      	ldr	r3, [sp, #0]
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	1e5f      	subs	r7, r3, #1
 80073fe:	2200      	movs	r2, #0
 8007400:	4b88      	ldr	r3, [pc, #544]	; (8007624 <_dtoa_r+0x624>)
 8007402:	f7f9 f901 	bl	8000608 <__aeabi_dmul>
 8007406:	9e02      	ldr	r6, [sp, #8]
 8007408:	4682      	mov	sl, r0
 800740a:	468b      	mov	fp, r1
 800740c:	3501      	adds	r5, #1
 800740e:	4628      	mov	r0, r5
 8007410:	f7f9 f890 	bl	8000534 <__aeabi_i2d>
 8007414:	4652      	mov	r2, sl
 8007416:	465b      	mov	r3, fp
 8007418:	f7f9 f8f6 	bl	8000608 <__aeabi_dmul>
 800741c:	4b82      	ldr	r3, [pc, #520]	; (8007628 <_dtoa_r+0x628>)
 800741e:	2200      	movs	r2, #0
 8007420:	f7f8 ff3c 	bl	800029c <__adddf3>
 8007424:	46d0      	mov	r8, sl
 8007426:	46d9      	mov	r9, fp
 8007428:	4682      	mov	sl, r0
 800742a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800742e:	2e00      	cmp	r6, #0
 8007430:	d158      	bne.n	80074e4 <_dtoa_r+0x4e4>
 8007432:	4b7e      	ldr	r3, [pc, #504]	; (800762c <_dtoa_r+0x62c>)
 8007434:	2200      	movs	r2, #0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 ff2d 	bl	8000298 <__aeabi_dsub>
 800743e:	4652      	mov	r2, sl
 8007440:	465b      	mov	r3, fp
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	f7f9 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 8295 	bne.w	800797a <_dtoa_r+0x97a>
 8007450:	4652      	mov	r2, sl
 8007452:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 fb47 	bl	8000aec <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 8289 	bne.w	8007976 <_dtoa_r+0x976>
 8007464:	ec5b ab19 	vmov	sl, fp, d9
 8007468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746a:	2b00      	cmp	r3, #0
 800746c:	f2c0 8148 	blt.w	8007700 <_dtoa_r+0x700>
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	2a0e      	cmp	r2, #14
 8007474:	f300 8144 	bgt.w	8007700 <_dtoa_r+0x700>
 8007478:	4b67      	ldr	r3, [pc, #412]	; (8007618 <_dtoa_r+0x618>)
 800747a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800747e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	f280 80d5 	bge.w	8007634 <_dtoa_r+0x634>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f300 80d1 	bgt.w	8007634 <_dtoa_r+0x634>
 8007492:	f040 826f 	bne.w	8007974 <_dtoa_r+0x974>
 8007496:	4b65      	ldr	r3, [pc, #404]	; (800762c <_dtoa_r+0x62c>)
 8007498:	2200      	movs	r2, #0
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	f7f9 fb35 	bl	8000b14 <__aeabi_dcmpge>
 80074aa:	9e03      	ldr	r6, [sp, #12]
 80074ac:	4637      	mov	r7, r6
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 8245 	bne.w	800793e <_dtoa_r+0x93e>
 80074b4:	9d01      	ldr	r5, [sp, #4]
 80074b6:	2331      	movs	r3, #49	; 0x31
 80074b8:	f805 3b01 	strb.w	r3, [r5], #1
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	e240      	b.n	8007946 <_dtoa_r+0x946>
 80074c4:	07f2      	lsls	r2, r6, #31
 80074c6:	d505      	bpl.n	80074d4 <_dtoa_r+0x4d4>
 80074c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074cc:	f7f9 f89c 	bl	8000608 <__aeabi_dmul>
 80074d0:	3501      	adds	r5, #1
 80074d2:	2301      	movs	r3, #1
 80074d4:	1076      	asrs	r6, r6, #1
 80074d6:	3708      	adds	r7, #8
 80074d8:	e777      	b.n	80073ca <_dtoa_r+0x3ca>
 80074da:	2502      	movs	r5, #2
 80074dc:	e779      	b.n	80073d2 <_dtoa_r+0x3d2>
 80074de:	9f00      	ldr	r7, [sp, #0]
 80074e0:	9e03      	ldr	r6, [sp, #12]
 80074e2:	e794      	b.n	800740e <_dtoa_r+0x40e>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	4b4c      	ldr	r3, [pc, #304]	; (8007618 <_dtoa_r+0x618>)
 80074e8:	4431      	add	r1, r6
 80074ea:	910d      	str	r1, [sp, #52]	; 0x34
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d043      	beq.n	8007582 <_dtoa_r+0x582>
 80074fa:	494d      	ldr	r1, [pc, #308]	; (8007630 <_dtoa_r+0x630>)
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7f9 f9ad 	bl	800085c <__aeabi_ddiv>
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	f7f8 fec7 	bl	8000298 <__aeabi_dsub>
 800750a:	9d01      	ldr	r5, [sp, #4]
 800750c:	4682      	mov	sl, r0
 800750e:	468b      	mov	fp, r1
 8007510:	4649      	mov	r1, r9
 8007512:	4640      	mov	r0, r8
 8007514:	f7f9 fb28 	bl	8000b68 <__aeabi_d2iz>
 8007518:	4606      	mov	r6, r0
 800751a:	f7f9 f80b 	bl	8000534 <__aeabi_i2d>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 feb7 	bl	8000298 <__aeabi_dsub>
 800752a:	3630      	adds	r6, #48	; 0x30
 800752c:	f805 6b01 	strb.w	r6, [r5], #1
 8007530:	4652      	mov	r2, sl
 8007532:	465b      	mov	r3, fp
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f7f9 fad8 	bl	8000aec <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d163      	bne.n	8007608 <_dtoa_r+0x608>
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	4936      	ldr	r1, [pc, #216]	; (8007620 <_dtoa_r+0x620>)
 8007546:	2000      	movs	r0, #0
 8007548:	f7f8 fea6 	bl	8000298 <__aeabi_dsub>
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	f7f9 facc 	bl	8000aec <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 80b5 	bne.w	80076c4 <_dtoa_r+0x6c4>
 800755a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800755c:	429d      	cmp	r5, r3
 800755e:	d081      	beq.n	8007464 <_dtoa_r+0x464>
 8007560:	4b30      	ldr	r3, [pc, #192]	; (8007624 <_dtoa_r+0x624>)
 8007562:	2200      	movs	r2, #0
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	4b2d      	ldr	r3, [pc, #180]	; (8007624 <_dtoa_r+0x624>)
 800756e:	4682      	mov	sl, r0
 8007570:	468b      	mov	fp, r1
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	2200      	movs	r2, #0
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	e7c6      	b.n	8007510 <_dtoa_r+0x510>
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f9 f83f 	bl	8000608 <__aeabi_dmul>
 800758a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	4649      	mov	r1, r9
 8007596:	4640      	mov	r0, r8
 8007598:	f7f9 fae6 	bl	8000b68 <__aeabi_d2iz>
 800759c:	4606      	mov	r6, r0
 800759e:	f7f8 ffc9 	bl	8000534 <__aeabi_i2d>
 80075a2:	3630      	adds	r6, #48	; 0x30
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f8 fe74 	bl	8000298 <__aeabi_dsub>
 80075b0:	f805 6b01 	strb.w	r6, [r5], #1
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	429d      	cmp	r5, r3
 80075b8:	4680      	mov	r8, r0
 80075ba:	4689      	mov	r9, r1
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	d124      	bne.n	800760c <_dtoa_r+0x60c>
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <_dtoa_r+0x630>)
 80075c4:	4650      	mov	r0, sl
 80075c6:	4659      	mov	r1, fp
 80075c8:	f7f8 fe68 	bl	800029c <__adddf3>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f9 faa8 	bl	8000b28 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d173      	bne.n	80076c4 <_dtoa_r+0x6c4>
 80075dc:	4652      	mov	r2, sl
 80075de:	465b      	mov	r3, fp
 80075e0:	4913      	ldr	r1, [pc, #76]	; (8007630 <_dtoa_r+0x630>)
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7f8 fe58 	bl	8000298 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 fa7c 	bl	8000aec <__aeabi_dcmplt>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f43f af35 	beq.w	8007464 <_dtoa_r+0x464>
 80075fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075fc:	1e6b      	subs	r3, r5, #1
 80075fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007600:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007604:	2b30      	cmp	r3, #48	; 0x30
 8007606:	d0f8      	beq.n	80075fa <_dtoa_r+0x5fa>
 8007608:	9700      	str	r7, [sp, #0]
 800760a:	e049      	b.n	80076a0 <_dtoa_r+0x6a0>
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_dtoa_r+0x624>)
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	4680      	mov	r8, r0
 8007614:	4689      	mov	r9, r1
 8007616:	e7bd      	b.n	8007594 <_dtoa_r+0x594>
 8007618:	080094c0 	.word	0x080094c0
 800761c:	08009498 	.word	0x08009498
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	40240000 	.word	0x40240000
 8007628:	401c0000 	.word	0x401c0000
 800762c:	40140000 	.word	0x40140000
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	9d01      	ldr	r5, [sp, #4]
 8007636:	4656      	mov	r6, sl
 8007638:	465f      	mov	r7, fp
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 f90b 	bl	800085c <__aeabi_ddiv>
 8007646:	f7f9 fa8f 	bl	8000b68 <__aeabi_d2iz>
 800764a:	4682      	mov	sl, r0
 800764c:	f7f8 ff72 	bl	8000534 <__aeabi_i2d>
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007664:	f7f8 fe18 	bl	8000298 <__aeabi_dsub>
 8007668:	f805 6b01 	strb.w	r6, [r5], #1
 800766c:	9e01      	ldr	r6, [sp, #4]
 800766e:	9f03      	ldr	r7, [sp, #12]
 8007670:	1bae      	subs	r6, r5, r6
 8007672:	42b7      	cmp	r7, r6
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	d135      	bne.n	80076e6 <_dtoa_r+0x6e6>
 800767a:	f7f8 fe0f 	bl	800029c <__adddf3>
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7f9 fa4f 	bl	8000b28 <__aeabi_dcmpgt>
 800768a:	b9d0      	cbnz	r0, 80076c2 <_dtoa_r+0x6c2>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8007698:	b110      	cbz	r0, 80076a0 <_dtoa_r+0x6a0>
 800769a:	f01a 0f01 	tst.w	sl, #1
 800769e:	d110      	bne.n	80076c2 <_dtoa_r+0x6c2>
 80076a0:	4620      	mov	r0, r4
 80076a2:	ee18 1a10 	vmov	r1, s16
 80076a6:	f000 faf3 	bl	8007c90 <_Bfree>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9800      	ldr	r0, [sp, #0]
 80076ae:	702b      	strb	r3, [r5, #0]
 80076b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b2:	3001      	adds	r0, #1
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f43f acf1 	beq.w	80070a0 <_dtoa_r+0xa0>
 80076be:	601d      	str	r5, [r3, #0]
 80076c0:	e4ee      	b.n	80070a0 <_dtoa_r+0xa0>
 80076c2:	9f00      	ldr	r7, [sp, #0]
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a39      	cmp	r2, #57	; 0x39
 80076ce:	d106      	bne.n	80076de <_dtoa_r+0x6de>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1f7      	bne.n	80076c6 <_dtoa_r+0x6c6>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	2230      	movs	r2, #48	; 0x30
 80076da:	3701      	adds	r7, #1
 80076dc:	700a      	strb	r2, [r1, #0]
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	3201      	adds	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e790      	b.n	8007608 <_dtoa_r+0x608>
 80076e6:	4ba6      	ldr	r3, [pc, #664]	; (8007980 <_dtoa_r+0x980>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f7f8 ff8d 	bl	8000608 <__aeabi_dmul>
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	f7f9 f9ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d09d      	beq.n	800763a <_dtoa_r+0x63a>
 80076fe:	e7cf      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007700:	9a08      	ldr	r2, [sp, #32]
 8007702:	2a00      	cmp	r2, #0
 8007704:	f000 80d7 	beq.w	80078b6 <_dtoa_r+0x8b6>
 8007708:	9a06      	ldr	r2, [sp, #24]
 800770a:	2a01      	cmp	r2, #1
 800770c:	f300 80ba 	bgt.w	8007884 <_dtoa_r+0x884>
 8007710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80b2 	beq.w	800787c <_dtoa_r+0x87c>
 8007718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800771c:	9e07      	ldr	r6, [sp, #28]
 800771e:	9d04      	ldr	r5, [sp, #16]
 8007720:	9a04      	ldr	r2, [sp, #16]
 8007722:	441a      	add	r2, r3
 8007724:	9204      	str	r2, [sp, #16]
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	2101      	movs	r1, #1
 800772a:	441a      	add	r2, r3
 800772c:	4620      	mov	r0, r4
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	f000 fb66 	bl	8007e00 <__i2b>
 8007734:	4607      	mov	r7, r0
 8007736:	2d00      	cmp	r5, #0
 8007738:	dd0c      	ble.n	8007754 <_dtoa_r+0x754>
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd09      	ble.n	8007754 <_dtoa_r+0x754>
 8007740:	42ab      	cmp	r3, r5
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	bfa8      	it	ge
 8007746:	462b      	movge	r3, r5
 8007748:	1ad2      	subs	r2, r2, r3
 800774a:	9204      	str	r2, [sp, #16]
 800774c:	9a05      	ldr	r2, [sp, #20]
 800774e:	1aed      	subs	r5, r5, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	b31b      	cbz	r3, 80077a0 <_dtoa_r+0x7a0>
 8007758:	9b08      	ldr	r3, [sp, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80af 	beq.w	80078be <_dtoa_r+0x8be>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd13      	ble.n	800778c <_dtoa_r+0x78c>
 8007764:	4639      	mov	r1, r7
 8007766:	4632      	mov	r2, r6
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fc09 	bl	8007f80 <__pow5mult>
 800776e:	ee18 2a10 	vmov	r2, s16
 8007772:	4601      	mov	r1, r0
 8007774:	4607      	mov	r7, r0
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fb58 	bl	8007e2c <__multiply>
 800777c:	ee18 1a10 	vmov	r1, s16
 8007780:	4680      	mov	r8, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fa84 	bl	8007c90 <_Bfree>
 8007788:	ee08 8a10 	vmov	s16, r8
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	1b9a      	subs	r2, r3, r6
 8007790:	d006      	beq.n	80077a0 <_dtoa_r+0x7a0>
 8007792:	ee18 1a10 	vmov	r1, s16
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fbf2 	bl	8007f80 <__pow5mult>
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	2101      	movs	r1, #1
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fb2c 	bl	8007e00 <__i2b>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	f340 8088 	ble.w	80078c2 <_dtoa_r+0x8c2>
 80077b2:	461a      	mov	r2, r3
 80077b4:	4601      	mov	r1, r0
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fbe2 	bl	8007f80 <__pow5mult>
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	4606      	mov	r6, r0
 80077c2:	f340 8081 	ble.w	80078c8 <_dtoa_r+0x8c8>
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	6933      	ldr	r3, [r6, #16]
 80077cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077d0:	6918      	ldr	r0, [r3, #16]
 80077d2:	f000 fac5 	bl	8007d60 <__hi0bits>
 80077d6:	f1c0 0020 	rsb	r0, r0, #32
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	4418      	add	r0, r3
 80077de:	f010 001f 	ands.w	r0, r0, #31
 80077e2:	f000 8092 	beq.w	800790a <_dtoa_r+0x90a>
 80077e6:	f1c0 0320 	rsb	r3, r0, #32
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	f340 808a 	ble.w	8007904 <_dtoa_r+0x904>
 80077f0:	f1c0 001c 	rsb	r0, r0, #28
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4403      	add	r3, r0
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	4403      	add	r3, r0
 80077fe:	4405      	add	r5, r0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd07      	ble.n	8007818 <_dtoa_r+0x818>
 8007808:	ee18 1a10 	vmov	r1, s16
 800780c:	461a      	mov	r2, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fc10 	bl	8008034 <__lshift>
 8007814:	ee08 0a10 	vmov	s16, r0
 8007818:	9b05      	ldr	r3, [sp, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd05      	ble.n	800782a <_dtoa_r+0x82a>
 800781e:	4631      	mov	r1, r6
 8007820:	461a      	mov	r2, r3
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fc06 	bl	8008034 <__lshift>
 8007828:	4606      	mov	r6, r0
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d06e      	beq.n	800790e <_dtoa_r+0x90e>
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	4631      	mov	r1, r6
 8007836:	f000 fc6d 	bl	8008114 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	da67      	bge.n	800790e <_dtoa_r+0x90e>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	ee18 1a10 	vmov	r1, s16
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	220a      	movs	r2, #10
 800784a:	2300      	movs	r3, #0
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fa41 	bl	8007cd4 <__multadd>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	ee08 0a10 	vmov	s16, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 81b1 	beq.w	8007bc0 <_dtoa_r+0xbc0>
 800785e:	2300      	movs	r3, #0
 8007860:	4639      	mov	r1, r7
 8007862:	220a      	movs	r2, #10
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fa35 	bl	8007cd4 <__multadd>
 800786a:	9b02      	ldr	r3, [sp, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	4607      	mov	r7, r0
 8007870:	f300 808e 	bgt.w	8007990 <_dtoa_r+0x990>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc51      	bgt.n	800791e <_dtoa_r+0x91e>
 800787a:	e089      	b.n	8007990 <_dtoa_r+0x990>
 800787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007882:	e74b      	b.n	800771c <_dtoa_r+0x71c>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1e5e      	subs	r6, r3, #1
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	42b3      	cmp	r3, r6
 800788c:	bfbf      	itttt	lt
 800788e:	9b07      	ldrlt	r3, [sp, #28]
 8007890:	9607      	strlt	r6, [sp, #28]
 8007892:	1af2      	sublt	r2, r6, r3
 8007894:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007896:	bfb6      	itet	lt
 8007898:	189b      	addlt	r3, r3, r2
 800789a:	1b9e      	subge	r6, r3, r6
 800789c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	bfb8      	it	lt
 80078a2:	2600      	movlt	r6, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb7      	itett	lt
 80078a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078b0:	1a9d      	sublt	r5, r3, r2
 80078b2:	2300      	movlt	r3, #0
 80078b4:	e734      	b.n	8007720 <_dtoa_r+0x720>
 80078b6:	9e07      	ldr	r6, [sp, #28]
 80078b8:	9d04      	ldr	r5, [sp, #16]
 80078ba:	9f08      	ldr	r7, [sp, #32]
 80078bc:	e73b      	b.n	8007736 <_dtoa_r+0x736>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	e767      	b.n	8007792 <_dtoa_r+0x792>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	dc18      	bgt.n	80078fa <_dtoa_r+0x8fa>
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d115      	bne.n	80078fa <_dtoa_r+0x8fa>
 80078ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d2:	b993      	cbnz	r3, 80078fa <_dtoa_r+0x8fa>
 80078d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078d8:	0d1b      	lsrs	r3, r3, #20
 80078da:	051b      	lsls	r3, r3, #20
 80078dc:	b183      	cbz	r3, 8007900 <_dtoa_r+0x900>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	3301      	adds	r3, #1
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	f04f 0801 	mov.w	r8, #1
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f af6a 	bne.w	80077ca <_dtoa_r+0x7ca>
 80078f6:	2001      	movs	r0, #1
 80078f8:	e76f      	b.n	80077da <_dtoa_r+0x7da>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	e7f6      	b.n	80078ee <_dtoa_r+0x8ee>
 8007900:	4698      	mov	r8, r3
 8007902:	e7f4      	b.n	80078ee <_dtoa_r+0x8ee>
 8007904:	f43f af7d 	beq.w	8007802 <_dtoa_r+0x802>
 8007908:	4618      	mov	r0, r3
 800790a:	301c      	adds	r0, #28
 800790c:	e772      	b.n	80077f4 <_dtoa_r+0x7f4>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc37      	bgt.n	8007984 <_dtoa_r+0x984>
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	2b02      	cmp	r3, #2
 8007918:	dd34      	ble.n	8007984 <_dtoa_r+0x984>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	9302      	str	r3, [sp, #8]
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	b96b      	cbnz	r3, 800793e <_dtoa_r+0x93e>
 8007922:	4631      	mov	r1, r6
 8007924:	2205      	movs	r2, #5
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f9d4 	bl	8007cd4 <__multadd>
 800792c:	4601      	mov	r1, r0
 800792e:	4606      	mov	r6, r0
 8007930:	ee18 0a10 	vmov	r0, s16
 8007934:	f000 fbee 	bl	8008114 <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	f73f adbb 	bgt.w	80074b4 <_dtoa_r+0x4b4>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	9d01      	ldr	r5, [sp, #4]
 8007942:	43db      	mvns	r3, r3
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	4631      	mov	r1, r6
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f99f 	bl	8007c90 <_Bfree>
 8007952:	2f00      	cmp	r7, #0
 8007954:	f43f aea4 	beq.w	80076a0 <_dtoa_r+0x6a0>
 8007958:	f1b8 0f00 	cmp.w	r8, #0
 800795c:	d005      	beq.n	800796a <_dtoa_r+0x96a>
 800795e:	45b8      	cmp	r8, r7
 8007960:	d003      	beq.n	800796a <_dtoa_r+0x96a>
 8007962:	4641      	mov	r1, r8
 8007964:	4620      	mov	r0, r4
 8007966:	f000 f993 	bl	8007c90 <_Bfree>
 800796a:	4639      	mov	r1, r7
 800796c:	4620      	mov	r0, r4
 800796e:	f000 f98f 	bl	8007c90 <_Bfree>
 8007972:	e695      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007974:	2600      	movs	r6, #0
 8007976:	4637      	mov	r7, r6
 8007978:	e7e1      	b.n	800793e <_dtoa_r+0x93e>
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	4637      	mov	r7, r6
 800797e:	e599      	b.n	80074b4 <_dtoa_r+0x4b4>
 8007980:	40240000 	.word	0x40240000
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80ca 	beq.w	8007b20 <_dtoa_r+0xb20>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	9302      	str	r3, [sp, #8]
 8007990:	2d00      	cmp	r5, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x9a0>
 8007994:	4639      	mov	r1, r7
 8007996:	462a      	mov	r2, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fb4b 	bl	8008034 <__lshift>
 800799e:	4607      	mov	r7, r0
 80079a0:	f1b8 0f00 	cmp.w	r8, #0
 80079a4:	d05b      	beq.n	8007a5e <_dtoa_r+0xa5e>
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f931 	bl	8007c10 <_Balloc>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b928      	cbnz	r0, 80079be <_dtoa_r+0x9be>
 80079b2:	4b87      	ldr	r3, [pc, #540]	; (8007bd0 <_dtoa_r+0xbd0>)
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ba:	f7ff bb3b 	b.w	8007034 <_dtoa_r+0x34>
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	f107 010c 	add.w	r1, r7, #12
 80079c8:	300c      	adds	r0, #12
 80079ca:	f000 f913 	bl	8007bf4 <memcpy>
 80079ce:	2201      	movs	r2, #1
 80079d0:	4629      	mov	r1, r5
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fb2e 	bl	8008034 <__lshift>
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	f103 0901 	add.w	r9, r3, #1
 80079de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	f00a 0301 	and.w	r3, sl, #1
 80079ea:	46b8      	mov	r8, r7
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	4607      	mov	r7, r0
 80079f0:	4631      	mov	r1, r6
 80079f2:	ee18 0a10 	vmov	r0, s16
 80079f6:	f7ff fa77 	bl	8006ee8 <quorem>
 80079fa:	4641      	mov	r1, r8
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a02:	ee18 0a10 	vmov	r0, s16
 8007a06:	f000 fb85 	bl	8008114 <__mcmp>
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	9003      	str	r0, [sp, #12]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fb9b 	bl	800814c <__mdiff>
 8007a16:	68c2      	ldr	r2, [r0, #12]
 8007a18:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	bb02      	cbnz	r2, 8007a62 <_dtoa_r+0xa62>
 8007a20:	4601      	mov	r1, r0
 8007a22:	ee18 0a10 	vmov	r0, s16
 8007a26:	f000 fb75 	bl	8008114 <__mcmp>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4620      	mov	r0, r4
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	f000 f92d 	bl	8007c90 <_Bfree>
 8007a36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a3a:	ea43 0102 	orr.w	r1, r3, r2
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	464d      	mov	r5, r9
 8007a44:	d10f      	bne.n	8007a66 <_dtoa_r+0xa66>
 8007a46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a4a:	d02a      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd02      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a58:	f88b a000 	strb.w	sl, [fp]
 8007a5c:	e775      	b.n	800794a <_dtoa_r+0x94a>
 8007a5e:	4638      	mov	r0, r7
 8007a60:	e7ba      	b.n	80079d8 <_dtoa_r+0x9d8>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e7e2      	b.n	8007a2c <_dtoa_r+0xa2c>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db04      	blt.n	8007a76 <_dtoa_r+0xa76>
 8007a6c:	9906      	ldr	r1, [sp, #24]
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	9904      	ldr	r1, [sp, #16]
 8007a72:	430b      	orrs	r3, r1
 8007a74:	d122      	bne.n	8007abc <_dtoa_r+0xabc>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	ddee      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a7a:	ee18 1a10 	vmov	r1, s16
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fad7 	bl	8008034 <__lshift>
 8007a86:	4631      	mov	r1, r6
 8007a88:	ee08 0a10 	vmov	s16, r0
 8007a8c:	f000 fb42 	bl	8008114 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dc03      	bgt.n	8007a9c <_dtoa_r+0xa9c>
 8007a94:	d1e0      	bne.n	8007a58 <_dtoa_r+0xa58>
 8007a96:	f01a 0f01 	tst.w	sl, #1
 8007a9a:	d0dd      	beq.n	8007a58 <_dtoa_r+0xa58>
 8007a9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aa0:	d1d7      	bne.n	8007a52 <_dtoa_r+0xa52>
 8007aa2:	2339      	movs	r3, #57	; 0x39
 8007aa4:	f88b 3000 	strb.w	r3, [fp]
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	461d      	mov	r5, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ab2:	2a39      	cmp	r2, #57	; 0x39
 8007ab4:	d071      	beq.n	8007b9a <_dtoa_r+0xb9a>
 8007ab6:	3201      	adds	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e746      	b.n	800794a <_dtoa_r+0x94a>
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	dd07      	ble.n	8007ad0 <_dtoa_r+0xad0>
 8007ac0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac4:	d0ed      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007ac6:	f10a 0301 	add.w	r3, sl, #1
 8007aca:	f88b 3000 	strb.w	r3, [fp]
 8007ace:	e73c      	b.n	800794a <_dtoa_r+0x94a>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ad6:	4599      	cmp	r9, r3
 8007ad8:	d047      	beq.n	8007b6a <_dtoa_r+0xb6a>
 8007ada:	ee18 1a10 	vmov	r1, s16
 8007ade:	2300      	movs	r3, #0
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f8f6 	bl	8007cd4 <__multadd>
 8007ae8:	45b8      	cmp	r8, r7
 8007aea:	ee08 0a10 	vmov	s16, r0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	f04f 020a 	mov.w	r2, #10
 8007af6:	4641      	mov	r1, r8
 8007af8:	4620      	mov	r0, r4
 8007afa:	d106      	bne.n	8007b0a <_dtoa_r+0xb0a>
 8007afc:	f000 f8ea 	bl	8007cd4 <__multadd>
 8007b00:	4680      	mov	r8, r0
 8007b02:	4607      	mov	r7, r0
 8007b04:	f109 0901 	add.w	r9, r9, #1
 8007b08:	e772      	b.n	80079f0 <_dtoa_r+0x9f0>
 8007b0a:	f000 f8e3 	bl	8007cd4 <__multadd>
 8007b0e:	4639      	mov	r1, r7
 8007b10:	4680      	mov	r8, r0
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f8dc 	bl	8007cd4 <__multadd>
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	e7f1      	b.n	8007b04 <_dtoa_r+0xb04>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	9302      	str	r3, [sp, #8]
 8007b24:	9d01      	ldr	r5, [sp, #4]
 8007b26:	ee18 0a10 	vmov	r0, s16
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	f7ff f9dc 	bl	8006ee8 <quorem>
 8007b30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	f805 ab01 	strb.w	sl, [r5], #1
 8007b3a:	1aea      	subs	r2, r5, r3
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	dd09      	ble.n	8007b56 <_dtoa_r+0xb56>
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	2300      	movs	r3, #0
 8007b48:	220a      	movs	r2, #10
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f8c2 	bl	8007cd4 <__multadd>
 8007b50:	ee08 0a10 	vmov	s16, r0
 8007b54:	e7e7      	b.n	8007b26 <_dtoa_r+0xb26>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfc8      	it	gt
 8007b5c:	461d      	movgt	r5, r3
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	bfd8      	it	le
 8007b62:	2501      	movle	r5, #1
 8007b64:	441d      	add	r5, r3
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fa5f 	bl	8008034 <__lshift>
 8007b76:	4631      	mov	r1, r6
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	f000 faca 	bl	8008114 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dc91      	bgt.n	8007aa8 <_dtoa_r+0xaa8>
 8007b84:	d102      	bne.n	8007b8c <_dtoa_r+0xb8c>
 8007b86:	f01a 0f01 	tst.w	sl, #1
 8007b8a:	d18d      	bne.n	8007aa8 <_dtoa_r+0xaa8>
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	461d      	mov	r5, r3
 8007b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b94:	2a30      	cmp	r2, #48	; 0x30
 8007b96:	d0fa      	beq.n	8007b8e <_dtoa_r+0xb8e>
 8007b98:	e6d7      	b.n	800794a <_dtoa_r+0x94a>
 8007b9a:	9a01      	ldr	r2, [sp, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d184      	bne.n	8007aaa <_dtoa_r+0xaaa>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2331      	movs	r3, #49	; 0x31
 8007ba8:	7013      	strb	r3, [r2, #0]
 8007baa:	e6ce      	b.n	800794a <_dtoa_r+0x94a>
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <_dtoa_r+0xbd4>)
 8007bae:	f7ff ba95 	b.w	80070dc <_dtoa_r+0xdc>
 8007bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f aa6e 	bne.w	8007096 <_dtoa_r+0x96>
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_dtoa_r+0xbd8>)
 8007bbc:	f7ff ba8e 	b.w	80070dc <_dtoa_r+0xdc>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dcae      	bgt.n	8007b24 <_dtoa_r+0xb24>
 8007bc6:	9b06      	ldr	r3, [sp, #24]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f73f aea8 	bgt.w	800791e <_dtoa_r+0x91e>
 8007bce:	e7a9      	b.n	8007b24 <_dtoa_r+0xb24>
 8007bd0:	08009427 	.word	0x08009427
 8007bd4:	08009384 	.word	0x08009384
 8007bd8:	080093a8 	.word	0x080093a8

08007bdc <_localeconv_r>:
 8007bdc:	4800      	ldr	r0, [pc, #0]	; (8007be0 <_localeconv_r+0x4>)
 8007bde:	4770      	bx	lr
 8007be0:	20000160 	.word	0x20000160

08007be4 <malloc>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <malloc+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f000 bc17 	b.w	800841c <_malloc_r>
 8007bee:	bf00      	nop
 8007bf0:	2000000c 	.word	0x2000000c

08007bf4 <memcpy>:
 8007bf4:	440a      	add	r2, r1
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	4770      	bx	lr
 8007c00:	b510      	push	{r4, lr}
 8007c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	d1f9      	bne.n	8007c02 <memcpy+0xe>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <_Balloc>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Balloc+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ffe2 	bl	8007be4 <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6260      	str	r0, [r4, #36]	; 0x24
 8007c24:	b920      	cbnz	r0, 8007c30 <_Balloc+0x20>
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <_Balloc+0x78>)
 8007c28:	4818      	ldr	r0, [pc, #96]	; (8007c8c <_Balloc+0x7c>)
 8007c2a:	2166      	movs	r1, #102	; 0x66
 8007c2c:	f000 fc7a 	bl	8008524 <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c3a:	68f3      	ldr	r3, [r6, #12]
 8007c3c:	b183      	cbz	r3, 8007c60 <_Balloc+0x50>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c46:	b9b8      	cbnz	r0, 8007c78 <_Balloc+0x68>
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c4e:	1d72      	adds	r2, r6, #5
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fb60 	bl	8008318 <_calloc_r>
 8007c58:	b160      	cbz	r0, 8007c74 <_Balloc+0x64>
 8007c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c5e:	e00e      	b.n	8007c7e <_Balloc+0x6e>
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	2104      	movs	r1, #4
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fb57 	bl	8008318 <_calloc_r>
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	60f0      	str	r0, [r6, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <_Balloc+0x2e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c84:	e7f7      	b.n	8007c76 <_Balloc+0x66>
 8007c86:	bf00      	nop
 8007c88:	080093b5 	.word	0x080093b5
 8007c8c:	08009438 	.word	0x08009438

08007c90 <_Bfree>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b976      	cbnz	r6, 8007cb8 <_Bfree+0x28>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	f7ff ffa2 	bl	8007be4 <malloc>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ca4:	b920      	cbnz	r0, 8007cb0 <_Bfree+0x20>
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_Bfree+0x3c>)
 8007ca8:	4809      	ldr	r0, [pc, #36]	; (8007cd0 <_Bfree+0x40>)
 8007caa:	218a      	movs	r1, #138	; 0x8a
 8007cac:	f000 fc3a 	bl	8008524 <__assert_func>
 8007cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb4:	6006      	str	r6, [r0, #0]
 8007cb6:	60c6      	str	r6, [r0, #12]
 8007cb8:	b13c      	cbz	r4, 8007cca <_Bfree+0x3a>
 8007cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cc4:	6021      	str	r1, [r4, #0]
 8007cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	080093b5 	.word	0x080093b5
 8007cd0:	08009438 	.word	0x08009438

08007cd4 <__multadd>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	690d      	ldr	r5, [r1, #16]
 8007cda:	4607      	mov	r7, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461e      	mov	r6, r3
 8007ce0:	f101 0c14 	add.w	ip, r1, #20
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cea:	b299      	uxth	r1, r3
 8007cec:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf0:	0c1e      	lsrs	r6, r3, #16
 8007cf2:	0c0b      	lsrs	r3, r1, #16
 8007cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d00:	4285      	cmp	r5, r0
 8007d02:	f84c 1b04 	str.w	r1, [ip], #4
 8007d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d0a:	dcec      	bgt.n	8007ce6 <__multadd+0x12>
 8007d0c:	b30e      	cbz	r6, 8007d52 <__multadd+0x7e>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc19      	bgt.n	8007d48 <__multadd+0x74>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4638      	mov	r0, r7
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7ff ff79 	bl	8007c10 <_Balloc>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__multadd+0x5a>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <__multadd+0x84>)
 8007d26:	480d      	ldr	r0, [pc, #52]	; (8007d5c <__multadd+0x88>)
 8007d28:	21b5      	movs	r1, #181	; 0xb5
 8007d2a:	f000 fbfb 	bl	8008524 <__assert_func>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	f104 010c 	add.w	r1, r4, #12
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f7ff ff5b 	bl	8007bf4 <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffa5 	bl	8007c90 <_Bfree>
 8007d46:	4644      	mov	r4, r8
 8007d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	615e      	str	r6, [r3, #20]
 8007d50:	6125      	str	r5, [r4, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	08009427 	.word	0x08009427
 8007d5c:	08009438 	.word	0x08009438

08007d60 <__hi0bits>:
 8007d60:	0c03      	lsrs	r3, r0, #16
 8007d62:	041b      	lsls	r3, r3, #16
 8007d64:	b9d3      	cbnz	r3, 8007d9c <__hi0bits+0x3c>
 8007d66:	0400      	lsls	r0, r0, #16
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d6e:	bf04      	itt	eq
 8007d70:	0200      	lsleq	r0, r0, #8
 8007d72:	3308      	addeq	r3, #8
 8007d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d78:	bf04      	itt	eq
 8007d7a:	0100      	lsleq	r0, r0, #4
 8007d7c:	3304      	addeq	r3, #4
 8007d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d82:	bf04      	itt	eq
 8007d84:	0080      	lsleq	r0, r0, #2
 8007d86:	3302      	addeq	r3, #2
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	db05      	blt.n	8007d98 <__hi0bits+0x38>
 8007d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d90:	f103 0301 	add.w	r3, r3, #1
 8007d94:	bf08      	it	eq
 8007d96:	2320      	moveq	r3, #32
 8007d98:	4618      	mov	r0, r3
 8007d9a:	4770      	bx	lr
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e7e4      	b.n	8007d6a <__hi0bits+0xa>

08007da0 <__lo0bits>:
 8007da0:	6803      	ldr	r3, [r0, #0]
 8007da2:	f013 0207 	ands.w	r2, r3, #7
 8007da6:	4601      	mov	r1, r0
 8007da8:	d00b      	beq.n	8007dc2 <__lo0bits+0x22>
 8007daa:	07da      	lsls	r2, r3, #31
 8007dac:	d423      	bmi.n	8007df6 <__lo0bits+0x56>
 8007dae:	0798      	lsls	r0, r3, #30
 8007db0:	bf49      	itett	mi
 8007db2:	085b      	lsrmi	r3, r3, #1
 8007db4:	089b      	lsrpl	r3, r3, #2
 8007db6:	2001      	movmi	r0, #1
 8007db8:	600b      	strmi	r3, [r1, #0]
 8007dba:	bf5c      	itt	pl
 8007dbc:	600b      	strpl	r3, [r1, #0]
 8007dbe:	2002      	movpl	r0, #2
 8007dc0:	4770      	bx	lr
 8007dc2:	b298      	uxth	r0, r3
 8007dc4:	b9a8      	cbnz	r0, 8007df2 <__lo0bits+0x52>
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	2010      	movs	r0, #16
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	b90a      	cbnz	r2, 8007dd2 <__lo0bits+0x32>
 8007dce:	3008      	adds	r0, #8
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	071a      	lsls	r2, r3, #28
 8007dd4:	bf04      	itt	eq
 8007dd6:	091b      	lsreq	r3, r3, #4
 8007dd8:	3004      	addeq	r0, #4
 8007dda:	079a      	lsls	r2, r3, #30
 8007ddc:	bf04      	itt	eq
 8007dde:	089b      	lsreq	r3, r3, #2
 8007de0:	3002      	addeq	r0, #2
 8007de2:	07da      	lsls	r2, r3, #31
 8007de4:	d403      	bmi.n	8007dee <__lo0bits+0x4e>
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f100 0001 	add.w	r0, r0, #1
 8007dec:	d005      	beq.n	8007dfa <__lo0bits+0x5a>
 8007dee:	600b      	str	r3, [r1, #0]
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7e9      	b.n	8007dca <__lo0bits+0x2a>
 8007df6:	2000      	movs	r0, #0
 8007df8:	4770      	bx	lr
 8007dfa:	2020      	movs	r0, #32
 8007dfc:	4770      	bx	lr
	...

08007e00 <__i2b>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	460c      	mov	r4, r1
 8007e04:	2101      	movs	r1, #1
 8007e06:	f7ff ff03 	bl	8007c10 <_Balloc>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	b928      	cbnz	r0, 8007e1a <__i2b+0x1a>
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <__i2b+0x24>)
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <__i2b+0x28>)
 8007e12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e16:	f000 fb85 	bl	8008524 <__assert_func>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	6144      	str	r4, [r0, #20]
 8007e1e:	6103      	str	r3, [r0, #16]
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	bf00      	nop
 8007e24:	08009427 	.word	0x08009427
 8007e28:	08009438 	.word	0x08009438

08007e2c <__multiply>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	4691      	mov	r9, r2
 8007e32:	690a      	ldr	r2, [r1, #16]
 8007e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	bfb8      	it	lt
 8007e3c:	460b      	movlt	r3, r1
 8007e3e:	460c      	mov	r4, r1
 8007e40:	bfbc      	itt	lt
 8007e42:	464c      	movlt	r4, r9
 8007e44:	4699      	movlt	r9, r3
 8007e46:	6927      	ldr	r7, [r4, #16]
 8007e48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	6861      	ldr	r1, [r4, #4]
 8007e50:	eb07 060a 	add.w	r6, r7, sl
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	b085      	sub	sp, #20
 8007e58:	bfb8      	it	lt
 8007e5a:	3101      	addlt	r1, #1
 8007e5c:	f7ff fed8 	bl	8007c10 <_Balloc>
 8007e60:	b930      	cbnz	r0, 8007e70 <__multiply+0x44>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b44      	ldr	r3, [pc, #272]	; (8007f78 <__multiply+0x14c>)
 8007e66:	4845      	ldr	r0, [pc, #276]	; (8007f7c <__multiply+0x150>)
 8007e68:	f240 115d 	movw	r1, #349	; 0x15d
 8007e6c:	f000 fb5a 	bl	8008524 <__assert_func>
 8007e70:	f100 0514 	add.w	r5, r0, #20
 8007e74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e78:	462b      	mov	r3, r5
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4543      	cmp	r3, r8
 8007e7e:	d321      	bcc.n	8007ec4 <__multiply+0x98>
 8007e80:	f104 0314 	add.w	r3, r4, #20
 8007e84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e88:	f109 0314 	add.w	r3, r9, #20
 8007e8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e90:	9202      	str	r2, [sp, #8]
 8007e92:	1b3a      	subs	r2, r7, r4
 8007e94:	3a15      	subs	r2, #21
 8007e96:	f022 0203 	bic.w	r2, r2, #3
 8007e9a:	3204      	adds	r2, #4
 8007e9c:	f104 0115 	add.w	r1, r4, #21
 8007ea0:	428f      	cmp	r7, r1
 8007ea2:	bf38      	it	cc
 8007ea4:	2204      	movcc	r2, #4
 8007ea6:	9201      	str	r2, [sp, #4]
 8007ea8:	9a02      	ldr	r2, [sp, #8]
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d80c      	bhi.n	8007eca <__multiply+0x9e>
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	dd03      	ble.n	8007ebc <__multiply+0x90>
 8007eb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05a      	beq.n	8007f72 <__multiply+0x146>
 8007ebc:	6106      	str	r6, [r0, #16]
 8007ebe:	b005      	add	sp, #20
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	f843 2b04 	str.w	r2, [r3], #4
 8007ec8:	e7d8      	b.n	8007e7c <__multiply+0x50>
 8007eca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	d024      	beq.n	8007f1e <__multiply+0xf2>
 8007ed4:	f104 0e14 	add.w	lr, r4, #20
 8007ed8:	46a9      	mov	r9, r5
 8007eda:	f04f 0c00 	mov.w	ip, #0
 8007ede:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ee2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ee6:	fa1f fb82 	uxth.w	fp, r2
 8007eea:	b289      	uxth	r1, r1
 8007eec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ef8:	4461      	add	r1, ip
 8007efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007efe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f06:	b289      	uxth	r1, r1
 8007f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f0c:	4577      	cmp	r7, lr
 8007f0e:	f849 1b04 	str.w	r1, [r9], #4
 8007f12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f16:	d8e2      	bhi.n	8007ede <__multiply+0xb2>
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	f845 c002 	str.w	ip, [r5, r2]
 8007f1e:	9a03      	ldr	r2, [sp, #12]
 8007f20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f24:	3304      	adds	r3, #4
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	d020      	beq.n	8007f6e <__multiply+0x142>
 8007f2c:	6829      	ldr	r1, [r5, #0]
 8007f2e:	f104 0c14 	add.w	ip, r4, #20
 8007f32:	46ae      	mov	lr, r5
 8007f34:	f04f 0a00 	mov.w	sl, #0
 8007f38:	f8bc b000 	ldrh.w	fp, [ip]
 8007f3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f40:	fb09 220b 	mla	r2, r9, fp, r2
 8007f44:	4492      	add	sl, r2
 8007f46:	b289      	uxth	r1, r1
 8007f48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f54:	f8be 1000 	ldrh.w	r1, [lr]
 8007f58:	0c12      	lsrs	r2, r2, #16
 8007f5a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f62:	4567      	cmp	r7, ip
 8007f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f68:	d8e6      	bhi.n	8007f38 <__multiply+0x10c>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	50a9      	str	r1, [r5, r2]
 8007f6e:	3504      	adds	r5, #4
 8007f70:	e79a      	b.n	8007ea8 <__multiply+0x7c>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	e79c      	b.n	8007eb0 <__multiply+0x84>
 8007f76:	bf00      	nop
 8007f78:	08009427 	.word	0x08009427
 8007f7c:	08009438 	.word	0x08009438

08007f80 <__pow5mult>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4615      	mov	r5, r2
 8007f86:	f012 0203 	ands.w	r2, r2, #3
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	d007      	beq.n	8007fa0 <__pow5mult+0x20>
 8007f90:	4c25      	ldr	r4, [pc, #148]	; (8008028 <__pow5mult+0xa8>)
 8007f92:	3a01      	subs	r2, #1
 8007f94:	2300      	movs	r3, #0
 8007f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f9a:	f7ff fe9b 	bl	8007cd4 <__multadd>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	10ad      	asrs	r5, r5, #2
 8007fa2:	d03d      	beq.n	8008020 <__pow5mult+0xa0>
 8007fa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fa6:	b97c      	cbnz	r4, 8007fc8 <__pow5mult+0x48>
 8007fa8:	2010      	movs	r0, #16
 8007faa:	f7ff fe1b 	bl	8007be4 <malloc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fb2:	b928      	cbnz	r0, 8007fc0 <__pow5mult+0x40>
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <__pow5mult+0xac>)
 8007fb6:	481e      	ldr	r0, [pc, #120]	; (8008030 <__pow5mult+0xb0>)
 8007fb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fbc:	f000 fab2 	bl	8008524 <__assert_func>
 8007fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fc4:	6004      	str	r4, [r0, #0]
 8007fc6:	60c4      	str	r4, [r0, #12]
 8007fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fd0:	b94c      	cbnz	r4, 8007fe6 <__pow5mult+0x66>
 8007fd2:	f240 2171 	movw	r1, #625	; 0x271
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ff12 	bl	8007e00 <__i2b>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	f04f 0900 	mov.w	r9, #0
 8007fea:	07eb      	lsls	r3, r5, #31
 8007fec:	d50a      	bpl.n	8008004 <__pow5mult+0x84>
 8007fee:	4639      	mov	r1, r7
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ff1a 	bl	8007e2c <__multiply>
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4680      	mov	r8, r0
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fe47 	bl	8007c90 <_Bfree>
 8008002:	4647      	mov	r7, r8
 8008004:	106d      	asrs	r5, r5, #1
 8008006:	d00b      	beq.n	8008020 <__pow5mult+0xa0>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	b938      	cbnz	r0, 800801c <__pow5mult+0x9c>
 800800c:	4622      	mov	r2, r4
 800800e:	4621      	mov	r1, r4
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff ff0b 	bl	8007e2c <__multiply>
 8008016:	6020      	str	r0, [r4, #0]
 8008018:	f8c0 9000 	str.w	r9, [r0]
 800801c:	4604      	mov	r4, r0
 800801e:	e7e4      	b.n	8007fea <__pow5mult+0x6a>
 8008020:	4638      	mov	r0, r7
 8008022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008026:	bf00      	nop
 8008028:	08009588 	.word	0x08009588
 800802c:	080093b5 	.word	0x080093b5
 8008030:	08009438 	.word	0x08009438

08008034 <__lshift>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	6849      	ldr	r1, [r1, #4]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008042:	68a3      	ldr	r3, [r4, #8]
 8008044:	4607      	mov	r7, r0
 8008046:	4691      	mov	r9, r2
 8008048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800804c:	f108 0601 	add.w	r6, r8, #1
 8008050:	42b3      	cmp	r3, r6
 8008052:	db0b      	blt.n	800806c <__lshift+0x38>
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff fddb 	bl	8007c10 <_Balloc>
 800805a:	4605      	mov	r5, r0
 800805c:	b948      	cbnz	r0, 8008072 <__lshift+0x3e>
 800805e:	4602      	mov	r2, r0
 8008060:	4b2a      	ldr	r3, [pc, #168]	; (800810c <__lshift+0xd8>)
 8008062:	482b      	ldr	r0, [pc, #172]	; (8008110 <__lshift+0xdc>)
 8008064:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008068:	f000 fa5c 	bl	8008524 <__assert_func>
 800806c:	3101      	adds	r1, #1
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	e7ee      	b.n	8008050 <__lshift+0x1c>
 8008072:	2300      	movs	r3, #0
 8008074:	f100 0114 	add.w	r1, r0, #20
 8008078:	f100 0210 	add.w	r2, r0, #16
 800807c:	4618      	mov	r0, r3
 800807e:	4553      	cmp	r3, sl
 8008080:	db37      	blt.n	80080f2 <__lshift+0xbe>
 8008082:	6920      	ldr	r0, [r4, #16]
 8008084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008088:	f104 0314 	add.w	r3, r4, #20
 800808c:	f019 091f 	ands.w	r9, r9, #31
 8008090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008098:	d02f      	beq.n	80080fa <__lshift+0xc6>
 800809a:	f1c9 0e20 	rsb	lr, r9, #32
 800809e:	468a      	mov	sl, r1
 80080a0:	f04f 0c00 	mov.w	ip, #0
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	fa02 f209 	lsl.w	r2, r2, r9
 80080aa:	ea42 020c 	orr.w	r2, r2, ip
 80080ae:	f84a 2b04 	str.w	r2, [sl], #4
 80080b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b6:	4298      	cmp	r0, r3
 80080b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080bc:	d8f2      	bhi.n	80080a4 <__lshift+0x70>
 80080be:	1b03      	subs	r3, r0, r4
 80080c0:	3b15      	subs	r3, #21
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	3304      	adds	r3, #4
 80080c8:	f104 0215 	add.w	r2, r4, #21
 80080cc:	4290      	cmp	r0, r2
 80080ce:	bf38      	it	cc
 80080d0:	2304      	movcc	r3, #4
 80080d2:	f841 c003 	str.w	ip, [r1, r3]
 80080d6:	f1bc 0f00 	cmp.w	ip, #0
 80080da:	d001      	beq.n	80080e0 <__lshift+0xac>
 80080dc:	f108 0602 	add.w	r6, r8, #2
 80080e0:	3e01      	subs	r6, #1
 80080e2:	4638      	mov	r0, r7
 80080e4:	612e      	str	r6, [r5, #16]
 80080e6:	4621      	mov	r1, r4
 80080e8:	f7ff fdd2 	bl	8007c90 <_Bfree>
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080f6:	3301      	adds	r3, #1
 80080f8:	e7c1      	b.n	800807e <__lshift+0x4a>
 80080fa:	3904      	subs	r1, #4
 80080fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008100:	f841 2f04 	str.w	r2, [r1, #4]!
 8008104:	4298      	cmp	r0, r3
 8008106:	d8f9      	bhi.n	80080fc <__lshift+0xc8>
 8008108:	e7ea      	b.n	80080e0 <__lshift+0xac>
 800810a:	bf00      	nop
 800810c:	08009427 	.word	0x08009427
 8008110:	08009438 	.word	0x08009438

08008114 <__mcmp>:
 8008114:	b530      	push	{r4, r5, lr}
 8008116:	6902      	ldr	r2, [r0, #16]
 8008118:	690c      	ldr	r4, [r1, #16]
 800811a:	1b12      	subs	r2, r2, r4
 800811c:	d10e      	bne.n	800813c <__mcmp+0x28>
 800811e:	f100 0314 	add.w	r3, r0, #20
 8008122:	3114      	adds	r1, #20
 8008124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800812c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008134:	42a5      	cmp	r5, r4
 8008136:	d003      	beq.n	8008140 <__mcmp+0x2c>
 8008138:	d305      	bcc.n	8008146 <__mcmp+0x32>
 800813a:	2201      	movs	r2, #1
 800813c:	4610      	mov	r0, r2
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	4283      	cmp	r3, r0
 8008142:	d3f3      	bcc.n	800812c <__mcmp+0x18>
 8008144:	e7fa      	b.n	800813c <__mcmp+0x28>
 8008146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800814a:	e7f7      	b.n	800813c <__mcmp+0x28>

0800814c <__mdiff>:
 800814c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	460c      	mov	r4, r1
 8008152:	4606      	mov	r6, r0
 8008154:	4611      	mov	r1, r2
 8008156:	4620      	mov	r0, r4
 8008158:	4690      	mov	r8, r2
 800815a:	f7ff ffdb 	bl	8008114 <__mcmp>
 800815e:	1e05      	subs	r5, r0, #0
 8008160:	d110      	bne.n	8008184 <__mdiff+0x38>
 8008162:	4629      	mov	r1, r5
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff fd53 	bl	8007c10 <_Balloc>
 800816a:	b930      	cbnz	r0, 800817a <__mdiff+0x2e>
 800816c:	4b3a      	ldr	r3, [pc, #232]	; (8008258 <__mdiff+0x10c>)
 800816e:	4602      	mov	r2, r0
 8008170:	f240 2132 	movw	r1, #562	; 0x232
 8008174:	4839      	ldr	r0, [pc, #228]	; (800825c <__mdiff+0x110>)
 8008176:	f000 f9d5 	bl	8008524 <__assert_func>
 800817a:	2301      	movs	r3, #1
 800817c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	bfa4      	itt	ge
 8008186:	4643      	movge	r3, r8
 8008188:	46a0      	movge	r8, r4
 800818a:	4630      	mov	r0, r6
 800818c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008190:	bfa6      	itte	ge
 8008192:	461c      	movge	r4, r3
 8008194:	2500      	movge	r5, #0
 8008196:	2501      	movlt	r5, #1
 8008198:	f7ff fd3a 	bl	8007c10 <_Balloc>
 800819c:	b920      	cbnz	r0, 80081a8 <__mdiff+0x5c>
 800819e:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <__mdiff+0x10c>)
 80081a0:	4602      	mov	r2, r0
 80081a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081a6:	e7e5      	b.n	8008174 <__mdiff+0x28>
 80081a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081ac:	6926      	ldr	r6, [r4, #16]
 80081ae:	60c5      	str	r5, [r0, #12]
 80081b0:	f104 0914 	add.w	r9, r4, #20
 80081b4:	f108 0514 	add.w	r5, r8, #20
 80081b8:	f100 0e14 	add.w	lr, r0, #20
 80081bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081c4:	f108 0210 	add.w	r2, r8, #16
 80081c8:	46f2      	mov	sl, lr
 80081ca:	2100      	movs	r1, #0
 80081cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80081d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081d4:	fa1f f883 	uxth.w	r8, r3
 80081d8:	fa11 f18b 	uxtah	r1, r1, fp
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	eba1 0808 	sub.w	r8, r1, r8
 80081e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081ea:	fa1f f888 	uxth.w	r8, r8
 80081ee:	1419      	asrs	r1, r3, #16
 80081f0:	454e      	cmp	r6, r9
 80081f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081f6:	f84a 3b04 	str.w	r3, [sl], #4
 80081fa:	d8e7      	bhi.n	80081cc <__mdiff+0x80>
 80081fc:	1b33      	subs	r3, r6, r4
 80081fe:	3b15      	subs	r3, #21
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	3304      	adds	r3, #4
 8008206:	3415      	adds	r4, #21
 8008208:	42a6      	cmp	r6, r4
 800820a:	bf38      	it	cc
 800820c:	2304      	movcc	r3, #4
 800820e:	441d      	add	r5, r3
 8008210:	4473      	add	r3, lr
 8008212:	469e      	mov	lr, r3
 8008214:	462e      	mov	r6, r5
 8008216:	4566      	cmp	r6, ip
 8008218:	d30e      	bcc.n	8008238 <__mdiff+0xec>
 800821a:	f10c 0203 	add.w	r2, ip, #3
 800821e:	1b52      	subs	r2, r2, r5
 8008220:	f022 0203 	bic.w	r2, r2, #3
 8008224:	3d03      	subs	r5, #3
 8008226:	45ac      	cmp	ip, r5
 8008228:	bf38      	it	cc
 800822a:	2200      	movcc	r2, #0
 800822c:	441a      	add	r2, r3
 800822e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008232:	b17b      	cbz	r3, 8008254 <__mdiff+0x108>
 8008234:	6107      	str	r7, [r0, #16]
 8008236:	e7a3      	b.n	8008180 <__mdiff+0x34>
 8008238:	f856 8b04 	ldr.w	r8, [r6], #4
 800823c:	fa11 f288 	uxtah	r2, r1, r8
 8008240:	1414      	asrs	r4, r2, #16
 8008242:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008246:	b292      	uxth	r2, r2
 8008248:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800824c:	f84e 2b04 	str.w	r2, [lr], #4
 8008250:	1421      	asrs	r1, r4, #16
 8008252:	e7e0      	b.n	8008216 <__mdiff+0xca>
 8008254:	3f01      	subs	r7, #1
 8008256:	e7ea      	b.n	800822e <__mdiff+0xe2>
 8008258:	08009427 	.word	0x08009427
 800825c:	08009438 	.word	0x08009438

08008260 <__d2b>:
 8008260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4689      	mov	r9, r1
 8008266:	2101      	movs	r1, #1
 8008268:	ec57 6b10 	vmov	r6, r7, d0
 800826c:	4690      	mov	r8, r2
 800826e:	f7ff fccf 	bl	8007c10 <_Balloc>
 8008272:	4604      	mov	r4, r0
 8008274:	b930      	cbnz	r0, 8008284 <__d2b+0x24>
 8008276:	4602      	mov	r2, r0
 8008278:	4b25      	ldr	r3, [pc, #148]	; (8008310 <__d2b+0xb0>)
 800827a:	4826      	ldr	r0, [pc, #152]	; (8008314 <__d2b+0xb4>)
 800827c:	f240 310a 	movw	r1, #778	; 0x30a
 8008280:	f000 f950 	bl	8008524 <__assert_func>
 8008284:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800828c:	bb35      	cbnz	r5, 80082dc <__d2b+0x7c>
 800828e:	2e00      	cmp	r6, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	d028      	beq.n	80082e6 <__d2b+0x86>
 8008294:	4668      	mov	r0, sp
 8008296:	9600      	str	r6, [sp, #0]
 8008298:	f7ff fd82 	bl	8007da0 <__lo0bits>
 800829c:	9900      	ldr	r1, [sp, #0]
 800829e:	b300      	cbz	r0, 80082e2 <__d2b+0x82>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	f1c0 0320 	rsb	r3, r0, #32
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	430b      	orrs	r3, r1
 80082ac:	40c2      	lsrs	r2, r0
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	9201      	str	r2, [sp, #4]
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	61a3      	str	r3, [r4, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bf14      	ite	ne
 80082ba:	2202      	movne	r2, #2
 80082bc:	2201      	moveq	r2, #1
 80082be:	6122      	str	r2, [r4, #16]
 80082c0:	b1d5      	cbz	r5, 80082f8 <__d2b+0x98>
 80082c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082c6:	4405      	add	r5, r0
 80082c8:	f8c9 5000 	str.w	r5, [r9]
 80082cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082d0:	f8c8 0000 	str.w	r0, [r8]
 80082d4:	4620      	mov	r0, r4
 80082d6:	b003      	add	sp, #12
 80082d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e0:	e7d5      	b.n	800828e <__d2b+0x2e>
 80082e2:	6161      	str	r1, [r4, #20]
 80082e4:	e7e5      	b.n	80082b2 <__d2b+0x52>
 80082e6:	a801      	add	r0, sp, #4
 80082e8:	f7ff fd5a 	bl	8007da0 <__lo0bits>
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	6163      	str	r3, [r4, #20]
 80082f0:	2201      	movs	r2, #1
 80082f2:	6122      	str	r2, [r4, #16]
 80082f4:	3020      	adds	r0, #32
 80082f6:	e7e3      	b.n	80082c0 <__d2b+0x60>
 80082f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008300:	f8c9 0000 	str.w	r0, [r9]
 8008304:	6918      	ldr	r0, [r3, #16]
 8008306:	f7ff fd2b 	bl	8007d60 <__hi0bits>
 800830a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800830e:	e7df      	b.n	80082d0 <__d2b+0x70>
 8008310:	08009427 	.word	0x08009427
 8008314:	08009438 	.word	0x08009438

08008318 <_calloc_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	fba1 2402 	umull	r2, r4, r1, r2
 800831e:	b94c      	cbnz	r4, 8008334 <_calloc_r+0x1c>
 8008320:	4611      	mov	r1, r2
 8008322:	9201      	str	r2, [sp, #4]
 8008324:	f000 f87a 	bl	800841c <_malloc_r>
 8008328:	9a01      	ldr	r2, [sp, #4]
 800832a:	4605      	mov	r5, r0
 800832c:	b930      	cbnz	r0, 800833c <_calloc_r+0x24>
 800832e:	4628      	mov	r0, r5
 8008330:	b003      	add	sp, #12
 8008332:	bd30      	pop	{r4, r5, pc}
 8008334:	220c      	movs	r2, #12
 8008336:	6002      	str	r2, [r0, #0]
 8008338:	2500      	movs	r5, #0
 800833a:	e7f8      	b.n	800832e <_calloc_r+0x16>
 800833c:	4621      	mov	r1, r4
 800833e:	f7fe f961 	bl	8006604 <memset>
 8008342:	e7f4      	b.n	800832e <_calloc_r+0x16>

08008344 <_free_r>:
 8008344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008346:	2900      	cmp	r1, #0
 8008348:	d044      	beq.n	80083d4 <_free_r+0x90>
 800834a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834e:	9001      	str	r0, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f1a1 0404 	sub.w	r4, r1, #4
 8008356:	bfb8      	it	lt
 8008358:	18e4      	addlt	r4, r4, r3
 800835a:	f000 f925 	bl	80085a8 <__malloc_lock>
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <_free_r+0x94>)
 8008360:	9801      	ldr	r0, [sp, #4]
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	b933      	cbnz	r3, 8008374 <_free_r+0x30>
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6014      	str	r4, [r2, #0]
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008370:	f000 b920 	b.w	80085b4 <__malloc_unlock>
 8008374:	42a3      	cmp	r3, r4
 8008376:	d908      	bls.n	800838a <_free_r+0x46>
 8008378:	6825      	ldr	r5, [r4, #0]
 800837a:	1961      	adds	r1, r4, r5
 800837c:	428b      	cmp	r3, r1
 800837e:	bf01      	itttt	eq
 8008380:	6819      	ldreq	r1, [r3, #0]
 8008382:	685b      	ldreq	r3, [r3, #4]
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	e7ed      	b.n	8008366 <_free_r+0x22>
 800838a:	461a      	mov	r2, r3
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b10b      	cbz	r3, 8008394 <_free_r+0x50>
 8008390:	42a3      	cmp	r3, r4
 8008392:	d9fa      	bls.n	800838a <_free_r+0x46>
 8008394:	6811      	ldr	r1, [r2, #0]
 8008396:	1855      	adds	r5, r2, r1
 8008398:	42a5      	cmp	r5, r4
 800839a:	d10b      	bne.n	80083b4 <_free_r+0x70>
 800839c:	6824      	ldr	r4, [r4, #0]
 800839e:	4421      	add	r1, r4
 80083a0:	1854      	adds	r4, r2, r1
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6011      	str	r1, [r2, #0]
 80083a6:	d1e0      	bne.n	800836a <_free_r+0x26>
 80083a8:	681c      	ldr	r4, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	6053      	str	r3, [r2, #4]
 80083ae:	4421      	add	r1, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	e7da      	b.n	800836a <_free_r+0x26>
 80083b4:	d902      	bls.n	80083bc <_free_r+0x78>
 80083b6:	230c      	movs	r3, #12
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	e7d6      	b.n	800836a <_free_r+0x26>
 80083bc:	6825      	ldr	r5, [r4, #0]
 80083be:	1961      	adds	r1, r4, r5
 80083c0:	428b      	cmp	r3, r1
 80083c2:	bf04      	itt	eq
 80083c4:	6819      	ldreq	r1, [r3, #0]
 80083c6:	685b      	ldreq	r3, [r3, #4]
 80083c8:	6063      	str	r3, [r4, #4]
 80083ca:	bf04      	itt	eq
 80083cc:	1949      	addeq	r1, r1, r5
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	6054      	str	r4, [r2, #4]
 80083d2:	e7ca      	b.n	800836a <_free_r+0x26>
 80083d4:	b003      	add	sp, #12
 80083d6:	bd30      	pop	{r4, r5, pc}
 80083d8:	20000438 	.word	0x20000438

080083dc <sbrk_aligned>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4e0e      	ldr	r6, [pc, #56]	; (8008418 <sbrk_aligned+0x3c>)
 80083e0:	460c      	mov	r4, r1
 80083e2:	6831      	ldr	r1, [r6, #0]
 80083e4:	4605      	mov	r5, r0
 80083e6:	b911      	cbnz	r1, 80083ee <sbrk_aligned+0x12>
 80083e8:	f000 f88c 	bl	8008504 <_sbrk_r>
 80083ec:	6030      	str	r0, [r6, #0]
 80083ee:	4621      	mov	r1, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 f887 	bl	8008504 <_sbrk_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d00a      	beq.n	8008410 <sbrk_aligned+0x34>
 80083fa:	1cc4      	adds	r4, r0, #3
 80083fc:	f024 0403 	bic.w	r4, r4, #3
 8008400:	42a0      	cmp	r0, r4
 8008402:	d007      	beq.n	8008414 <sbrk_aligned+0x38>
 8008404:	1a21      	subs	r1, r4, r0
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f87c 	bl	8008504 <_sbrk_r>
 800840c:	3001      	adds	r0, #1
 800840e:	d101      	bne.n	8008414 <sbrk_aligned+0x38>
 8008410:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008414:	4620      	mov	r0, r4
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	2000043c 	.word	0x2000043c

0800841c <_malloc_r>:
 800841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008420:	1ccd      	adds	r5, r1, #3
 8008422:	f025 0503 	bic.w	r5, r5, #3
 8008426:	3508      	adds	r5, #8
 8008428:	2d0c      	cmp	r5, #12
 800842a:	bf38      	it	cc
 800842c:	250c      	movcc	r5, #12
 800842e:	2d00      	cmp	r5, #0
 8008430:	4607      	mov	r7, r0
 8008432:	db01      	blt.n	8008438 <_malloc_r+0x1c>
 8008434:	42a9      	cmp	r1, r5
 8008436:	d905      	bls.n	8008444 <_malloc_r+0x28>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	2600      	movs	r6, #0
 800843e:	4630      	mov	r0, r6
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	4e2e      	ldr	r6, [pc, #184]	; (8008500 <_malloc_r+0xe4>)
 8008446:	f000 f8af 	bl	80085a8 <__malloc_lock>
 800844a:	6833      	ldr	r3, [r6, #0]
 800844c:	461c      	mov	r4, r3
 800844e:	bb34      	cbnz	r4, 800849e <_malloc_r+0x82>
 8008450:	4629      	mov	r1, r5
 8008452:	4638      	mov	r0, r7
 8008454:	f7ff ffc2 	bl	80083dc <sbrk_aligned>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	4604      	mov	r4, r0
 800845c:	d14d      	bne.n	80084fa <_malloc_r+0xde>
 800845e:	6834      	ldr	r4, [r6, #0]
 8008460:	4626      	mov	r6, r4
 8008462:	2e00      	cmp	r6, #0
 8008464:	d140      	bne.n	80084e8 <_malloc_r+0xcc>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	4631      	mov	r1, r6
 800846a:	4638      	mov	r0, r7
 800846c:	eb04 0803 	add.w	r8, r4, r3
 8008470:	f000 f848 	bl	8008504 <_sbrk_r>
 8008474:	4580      	cmp	r8, r0
 8008476:	d13a      	bne.n	80084ee <_malloc_r+0xd2>
 8008478:	6821      	ldr	r1, [r4, #0]
 800847a:	3503      	adds	r5, #3
 800847c:	1a6d      	subs	r5, r5, r1
 800847e:	f025 0503 	bic.w	r5, r5, #3
 8008482:	3508      	adds	r5, #8
 8008484:	2d0c      	cmp	r5, #12
 8008486:	bf38      	it	cc
 8008488:	250c      	movcc	r5, #12
 800848a:	4629      	mov	r1, r5
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff ffa5 	bl	80083dc <sbrk_aligned>
 8008492:	3001      	adds	r0, #1
 8008494:	d02b      	beq.n	80084ee <_malloc_r+0xd2>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	442b      	add	r3, r5
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	e00e      	b.n	80084bc <_malloc_r+0xa0>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	1b52      	subs	r2, r2, r5
 80084a2:	d41e      	bmi.n	80084e2 <_malloc_r+0xc6>
 80084a4:	2a0b      	cmp	r2, #11
 80084a6:	d916      	bls.n	80084d6 <_malloc_r+0xba>
 80084a8:	1961      	adds	r1, r4, r5
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	6025      	str	r5, [r4, #0]
 80084ae:	bf18      	it	ne
 80084b0:	6059      	strne	r1, [r3, #4]
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	bf08      	it	eq
 80084b6:	6031      	streq	r1, [r6, #0]
 80084b8:	5162      	str	r2, [r4, r5]
 80084ba:	604b      	str	r3, [r1, #4]
 80084bc:	4638      	mov	r0, r7
 80084be:	f104 060b 	add.w	r6, r4, #11
 80084c2:	f000 f877 	bl	80085b4 <__malloc_unlock>
 80084c6:	f026 0607 	bic.w	r6, r6, #7
 80084ca:	1d23      	adds	r3, r4, #4
 80084cc:	1af2      	subs	r2, r6, r3
 80084ce:	d0b6      	beq.n	800843e <_malloc_r+0x22>
 80084d0:	1b9b      	subs	r3, r3, r6
 80084d2:	50a3      	str	r3, [r4, r2]
 80084d4:	e7b3      	b.n	800843e <_malloc_r+0x22>
 80084d6:	6862      	ldr	r2, [r4, #4]
 80084d8:	42a3      	cmp	r3, r4
 80084da:	bf0c      	ite	eq
 80084dc:	6032      	streq	r2, [r6, #0]
 80084de:	605a      	strne	r2, [r3, #4]
 80084e0:	e7ec      	b.n	80084bc <_malloc_r+0xa0>
 80084e2:	4623      	mov	r3, r4
 80084e4:	6864      	ldr	r4, [r4, #4]
 80084e6:	e7b2      	b.n	800844e <_malloc_r+0x32>
 80084e8:	4634      	mov	r4, r6
 80084ea:	6876      	ldr	r6, [r6, #4]
 80084ec:	e7b9      	b.n	8008462 <_malloc_r+0x46>
 80084ee:	230c      	movs	r3, #12
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	4638      	mov	r0, r7
 80084f4:	f000 f85e 	bl	80085b4 <__malloc_unlock>
 80084f8:	e7a1      	b.n	800843e <_malloc_r+0x22>
 80084fa:	6025      	str	r5, [r4, #0]
 80084fc:	e7de      	b.n	80084bc <_malloc_r+0xa0>
 80084fe:	bf00      	nop
 8008500:	20000438 	.word	0x20000438

08008504 <_sbrk_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d06      	ldr	r5, [pc, #24]	; (8008520 <_sbrk_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7fa f80e 	bl	8002530 <_sbrk>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_sbrk_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_sbrk_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	20000440 	.word	0x20000440

08008524 <__assert_func>:
 8008524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008526:	4614      	mov	r4, r2
 8008528:	461a      	mov	r2, r3
 800852a:	4b09      	ldr	r3, [pc, #36]	; (8008550 <__assert_func+0x2c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4605      	mov	r5, r0
 8008530:	68d8      	ldr	r0, [r3, #12]
 8008532:	b14c      	cbz	r4, 8008548 <__assert_func+0x24>
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <__assert_func+0x30>)
 8008536:	9100      	str	r1, [sp, #0]
 8008538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800853c:	4906      	ldr	r1, [pc, #24]	; (8008558 <__assert_func+0x34>)
 800853e:	462b      	mov	r3, r5
 8008540:	f000 f80e 	bl	8008560 <fiprintf>
 8008544:	f000 fa64 	bl	8008a10 <abort>
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__assert_func+0x38>)
 800854a:	461c      	mov	r4, r3
 800854c:	e7f3      	b.n	8008536 <__assert_func+0x12>
 800854e:	bf00      	nop
 8008550:	2000000c 	.word	0x2000000c
 8008554:	08009594 	.word	0x08009594
 8008558:	080095a1 	.word	0x080095a1
 800855c:	080095cf 	.word	0x080095cf

08008560 <fiprintf>:
 8008560:	b40e      	push	{r1, r2, r3}
 8008562:	b503      	push	{r0, r1, lr}
 8008564:	4601      	mov	r1, r0
 8008566:	ab03      	add	r3, sp, #12
 8008568:	4805      	ldr	r0, [pc, #20]	; (8008580 <fiprintf+0x20>)
 800856a:	f853 2b04 	ldr.w	r2, [r3], #4
 800856e:	6800      	ldr	r0, [r0, #0]
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	f000 f84f 	bl	8008614 <_vfiprintf_r>
 8008576:	b002      	add	sp, #8
 8008578:	f85d eb04 	ldr.w	lr, [sp], #4
 800857c:	b003      	add	sp, #12
 800857e:	4770      	bx	lr
 8008580:	2000000c 	.word	0x2000000c

08008584 <__ascii_mbtowc>:
 8008584:	b082      	sub	sp, #8
 8008586:	b901      	cbnz	r1, 800858a <__ascii_mbtowc+0x6>
 8008588:	a901      	add	r1, sp, #4
 800858a:	b142      	cbz	r2, 800859e <__ascii_mbtowc+0x1a>
 800858c:	b14b      	cbz	r3, 80085a2 <__ascii_mbtowc+0x1e>
 800858e:	7813      	ldrb	r3, [r2, #0]
 8008590:	600b      	str	r3, [r1, #0]
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	1e10      	subs	r0, r2, #0
 8008596:	bf18      	it	ne
 8008598:	2001      	movne	r0, #1
 800859a:	b002      	add	sp, #8
 800859c:	4770      	bx	lr
 800859e:	4610      	mov	r0, r2
 80085a0:	e7fb      	b.n	800859a <__ascii_mbtowc+0x16>
 80085a2:	f06f 0001 	mvn.w	r0, #1
 80085a6:	e7f8      	b.n	800859a <__ascii_mbtowc+0x16>

080085a8 <__malloc_lock>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__malloc_lock+0x8>)
 80085aa:	f000 bbf1 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	20000444 	.word	0x20000444

080085b4 <__malloc_unlock>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__malloc_unlock+0x8>)
 80085b6:	f000 bbec 	b.w	8008d92 <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	20000444 	.word	0x20000444

080085c0 <__sfputc_r>:
 80085c0:	6893      	ldr	r3, [r2, #8]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	b410      	push	{r4}
 80085c8:	6093      	str	r3, [r2, #8]
 80085ca:	da08      	bge.n	80085de <__sfputc_r+0x1e>
 80085cc:	6994      	ldr	r4, [r2, #24]
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	db01      	blt.n	80085d6 <__sfputc_r+0x16>
 80085d2:	290a      	cmp	r1, #10
 80085d4:	d103      	bne.n	80085de <__sfputc_r+0x1e>
 80085d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085da:	f000 b94b 	b.w	8008874 <__swbuf_r>
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	1c58      	adds	r0, r3, #1
 80085e2:	6010      	str	r0, [r2, #0]
 80085e4:	7019      	strb	r1, [r3, #0]
 80085e6:	4608      	mov	r0, r1
 80085e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <__sfputs_r>:
 80085ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	4614      	mov	r4, r2
 80085f6:	18d5      	adds	r5, r2, r3
 80085f8:	42ac      	cmp	r4, r5
 80085fa:	d101      	bne.n	8008600 <__sfputs_r+0x12>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e007      	b.n	8008610 <__sfputs_r+0x22>
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	463a      	mov	r2, r7
 8008606:	4630      	mov	r0, r6
 8008608:	f7ff ffda 	bl	80085c0 <__sfputc_r>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d1f3      	bne.n	80085f8 <__sfputs_r+0xa>
 8008610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008614 <_vfiprintf_r>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	460d      	mov	r5, r1
 800861a:	b09d      	sub	sp, #116	; 0x74
 800861c:	4614      	mov	r4, r2
 800861e:	4698      	mov	r8, r3
 8008620:	4606      	mov	r6, r0
 8008622:	b118      	cbz	r0, 800862c <_vfiprintf_r+0x18>
 8008624:	6983      	ldr	r3, [r0, #24]
 8008626:	b90b      	cbnz	r3, 800862c <_vfiprintf_r+0x18>
 8008628:	f000 fb14 	bl	8008c54 <__sinit>
 800862c:	4b89      	ldr	r3, [pc, #548]	; (8008854 <_vfiprintf_r+0x240>)
 800862e:	429d      	cmp	r5, r3
 8008630:	d11b      	bne.n	800866a <_vfiprintf_r+0x56>
 8008632:	6875      	ldr	r5, [r6, #4]
 8008634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008636:	07d9      	lsls	r1, r3, #31
 8008638:	d405      	bmi.n	8008646 <_vfiprintf_r+0x32>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	059a      	lsls	r2, r3, #22
 800863e:	d402      	bmi.n	8008646 <_vfiprintf_r+0x32>
 8008640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008642:	f000 fba5 	bl	8008d90 <__retarget_lock_acquire_recursive>
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	071b      	lsls	r3, r3, #28
 800864a:	d501      	bpl.n	8008650 <_vfiprintf_r+0x3c>
 800864c:	692b      	ldr	r3, [r5, #16]
 800864e:	b9eb      	cbnz	r3, 800868c <_vfiprintf_r+0x78>
 8008650:	4629      	mov	r1, r5
 8008652:	4630      	mov	r0, r6
 8008654:	f000 f96e 	bl	8008934 <__swsetup_r>
 8008658:	b1c0      	cbz	r0, 800868c <_vfiprintf_r+0x78>
 800865a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800865c:	07dc      	lsls	r4, r3, #31
 800865e:	d50e      	bpl.n	800867e <_vfiprintf_r+0x6a>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008664:	b01d      	add	sp, #116	; 0x74
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	4b7b      	ldr	r3, [pc, #492]	; (8008858 <_vfiprintf_r+0x244>)
 800866c:	429d      	cmp	r5, r3
 800866e:	d101      	bne.n	8008674 <_vfiprintf_r+0x60>
 8008670:	68b5      	ldr	r5, [r6, #8]
 8008672:	e7df      	b.n	8008634 <_vfiprintf_r+0x20>
 8008674:	4b79      	ldr	r3, [pc, #484]	; (800885c <_vfiprintf_r+0x248>)
 8008676:	429d      	cmp	r5, r3
 8008678:	bf08      	it	eq
 800867a:	68f5      	ldreq	r5, [r6, #12]
 800867c:	e7da      	b.n	8008634 <_vfiprintf_r+0x20>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	0598      	lsls	r0, r3, #22
 8008682:	d4ed      	bmi.n	8008660 <_vfiprintf_r+0x4c>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f000 fb84 	bl	8008d92 <__retarget_lock_release_recursive>
 800868a:	e7e9      	b.n	8008660 <_vfiprintf_r+0x4c>
 800868c:	2300      	movs	r3, #0
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	2320      	movs	r3, #32
 8008692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008696:	f8cd 800c 	str.w	r8, [sp, #12]
 800869a:	2330      	movs	r3, #48	; 0x30
 800869c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008860 <_vfiprintf_r+0x24c>
 80086a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a4:	f04f 0901 	mov.w	r9, #1
 80086a8:	4623      	mov	r3, r4
 80086aa:	469a      	mov	sl, r3
 80086ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b0:	b10a      	cbz	r2, 80086b6 <_vfiprintf_r+0xa2>
 80086b2:	2a25      	cmp	r2, #37	; 0x25
 80086b4:	d1f9      	bne.n	80086aa <_vfiprintf_r+0x96>
 80086b6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ba:	d00b      	beq.n	80086d4 <_vfiprintf_r+0xc0>
 80086bc:	465b      	mov	r3, fp
 80086be:	4622      	mov	r2, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ff93 	bl	80085ee <__sfputs_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	f000 80aa 	beq.w	8008822 <_vfiprintf_r+0x20e>
 80086ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d0:	445a      	add	r2, fp
 80086d2:	9209      	str	r2, [sp, #36]	; 0x24
 80086d4:	f89a 3000 	ldrb.w	r3, [sl]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80a2 	beq.w	8008822 <_vfiprintf_r+0x20e>
 80086de:	2300      	movs	r3, #0
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e8:	f10a 0a01 	add.w	sl, sl, #1
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f4:	931a      	str	r3, [sp, #104]	; 0x68
 80086f6:	4654      	mov	r4, sl
 80086f8:	2205      	movs	r2, #5
 80086fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fe:	4858      	ldr	r0, [pc, #352]	; (8008860 <_vfiprintf_r+0x24c>)
 8008700:	f7f7 fd76 	bl	80001f0 <memchr>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	b9d8      	cbnz	r0, 8008740 <_vfiprintf_r+0x12c>
 8008708:	06d1      	lsls	r1, r2, #27
 800870a:	bf44      	itt	mi
 800870c:	2320      	movmi	r3, #32
 800870e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008712:	0713      	lsls	r3, r2, #28
 8008714:	bf44      	itt	mi
 8008716:	232b      	movmi	r3, #43	; 0x2b
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	f89a 3000 	ldrb.w	r3, [sl]
 8008720:	2b2a      	cmp	r3, #42	; 0x2a
 8008722:	d015      	beq.n	8008750 <_vfiprintf_r+0x13c>
 8008724:	9a07      	ldr	r2, [sp, #28]
 8008726:	4654      	mov	r4, sl
 8008728:	2000      	movs	r0, #0
 800872a:	f04f 0c0a 	mov.w	ip, #10
 800872e:	4621      	mov	r1, r4
 8008730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008734:	3b30      	subs	r3, #48	; 0x30
 8008736:	2b09      	cmp	r3, #9
 8008738:	d94e      	bls.n	80087d8 <_vfiprintf_r+0x1c4>
 800873a:	b1b0      	cbz	r0, 800876a <_vfiprintf_r+0x156>
 800873c:	9207      	str	r2, [sp, #28]
 800873e:	e014      	b.n	800876a <_vfiprintf_r+0x156>
 8008740:	eba0 0308 	sub.w	r3, r0, r8
 8008744:	fa09 f303 	lsl.w	r3, r9, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	46a2      	mov	sl, r4
 800874e:	e7d2      	b.n	80086f6 <_vfiprintf_r+0xe2>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	1d19      	adds	r1, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	9103      	str	r1, [sp, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	bfbb      	ittet	lt
 800875c:	425b      	neglt	r3, r3
 800875e:	f042 0202 	orrlt.w	r2, r2, #2
 8008762:	9307      	strge	r3, [sp, #28]
 8008764:	9307      	strlt	r3, [sp, #28]
 8008766:	bfb8      	it	lt
 8008768:	9204      	strlt	r2, [sp, #16]
 800876a:	7823      	ldrb	r3, [r4, #0]
 800876c:	2b2e      	cmp	r3, #46	; 0x2e
 800876e:	d10c      	bne.n	800878a <_vfiprintf_r+0x176>
 8008770:	7863      	ldrb	r3, [r4, #1]
 8008772:	2b2a      	cmp	r3, #42	; 0x2a
 8008774:	d135      	bne.n	80087e2 <_vfiprintf_r+0x1ce>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	1d1a      	adds	r2, r3, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	9203      	str	r2, [sp, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	bfb8      	it	lt
 8008782:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008786:	3402      	adds	r4, #2
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008870 <_vfiprintf_r+0x25c>
 800878e:	7821      	ldrb	r1, [r4, #0]
 8008790:	2203      	movs	r2, #3
 8008792:	4650      	mov	r0, sl
 8008794:	f7f7 fd2c 	bl	80001f0 <memchr>
 8008798:	b140      	cbz	r0, 80087ac <_vfiprintf_r+0x198>
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	eba0 000a 	sub.w	r0, r0, sl
 80087a0:	fa03 f000 	lsl.w	r0, r3, r0
 80087a4:	9b04      	ldr	r3, [sp, #16]
 80087a6:	4303      	orrs	r3, r0
 80087a8:	3401      	adds	r4, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	482c      	ldr	r0, [pc, #176]	; (8008864 <_vfiprintf_r+0x250>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b6:	2206      	movs	r2, #6
 80087b8:	f7f7 fd1a 	bl	80001f0 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d03f      	beq.n	8008840 <_vfiprintf_r+0x22c>
 80087c0:	4b29      	ldr	r3, [pc, #164]	; (8008868 <_vfiprintf_r+0x254>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_vfiprintf_r+0x1f8>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	443b      	add	r3, r7
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	e767      	b.n	80086a8 <_vfiprintf_r+0x94>
 80087d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	e7a5      	b.n	800872e <_vfiprintf_r+0x11a>
 80087e2:	2300      	movs	r3, #0
 80087e4:	3401      	adds	r4, #1
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	; 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_vfiprintf_r+0x1ee>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c5      	beq.n	800878a <_vfiprintf_r+0x176>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c3      	b.n	800878a <_vfiprintf_r+0x176>
 8008802:	fb0c 2101 	mla	r1, ip, r1, r2
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	e7f0      	b.n	80087ee <_vfiprintf_r+0x1da>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <_vfiprintf_r+0x258>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4630      	mov	r0, r6
 8008818:	f7fd ff9c 	bl	8006754 <_printf_float>
 800881c:	4607      	mov	r7, r0
 800881e:	1c78      	adds	r0, r7, #1
 8008820:	d1d6      	bne.n	80087d0 <_vfiprintf_r+0x1bc>
 8008822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008824:	07d9      	lsls	r1, r3, #31
 8008826:	d405      	bmi.n	8008834 <_vfiprintf_r+0x220>
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	059a      	lsls	r2, r3, #22
 800882c:	d402      	bmi.n	8008834 <_vfiprintf_r+0x220>
 800882e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008830:	f000 faaf 	bl	8008d92 <__retarget_lock_release_recursive>
 8008834:	89ab      	ldrh	r3, [r5, #12]
 8008836:	065b      	lsls	r3, r3, #25
 8008838:	f53f af12 	bmi.w	8008660 <_vfiprintf_r+0x4c>
 800883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883e:	e711      	b.n	8008664 <_vfiprintf_r+0x50>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <_vfiprintf_r+0x258>)
 8008848:	a904      	add	r1, sp, #16
 800884a:	4630      	mov	r0, r6
 800884c:	f7fe fa26 	bl	8006c9c <_printf_i>
 8008850:	e7e4      	b.n	800881c <_vfiprintf_r+0x208>
 8008852:	bf00      	nop
 8008854:	0800970c 	.word	0x0800970c
 8008858:	0800972c 	.word	0x0800972c
 800885c:	080096ec 	.word	0x080096ec
 8008860:	080095da 	.word	0x080095da
 8008864:	080095e4 	.word	0x080095e4
 8008868:	08006755 	.word	0x08006755
 800886c:	080085ef 	.word	0x080085ef
 8008870:	080095e0 	.word	0x080095e0

08008874 <__swbuf_r>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	460e      	mov	r6, r1
 8008878:	4614      	mov	r4, r2
 800887a:	4605      	mov	r5, r0
 800887c:	b118      	cbz	r0, 8008886 <__swbuf_r+0x12>
 800887e:	6983      	ldr	r3, [r0, #24]
 8008880:	b90b      	cbnz	r3, 8008886 <__swbuf_r+0x12>
 8008882:	f000 f9e7 	bl	8008c54 <__sinit>
 8008886:	4b21      	ldr	r3, [pc, #132]	; (800890c <__swbuf_r+0x98>)
 8008888:	429c      	cmp	r4, r3
 800888a:	d12b      	bne.n	80088e4 <__swbuf_r+0x70>
 800888c:	686c      	ldr	r4, [r5, #4]
 800888e:	69a3      	ldr	r3, [r4, #24]
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	071a      	lsls	r2, r3, #28
 8008896:	d52f      	bpl.n	80088f8 <__swbuf_r+0x84>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	b36b      	cbz	r3, 80088f8 <__swbuf_r+0x84>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	1ac0      	subs	r0, r0, r3
 80088a2:	6963      	ldr	r3, [r4, #20]
 80088a4:	b2f6      	uxtb	r6, r6
 80088a6:	4283      	cmp	r3, r0
 80088a8:	4637      	mov	r7, r6
 80088aa:	dc04      	bgt.n	80088b6 <__swbuf_r+0x42>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f93c 	bl	8008b2c <_fflush_r>
 80088b4:	bb30      	cbnz	r0, 8008904 <__swbuf_r+0x90>
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	701e      	strb	r6, [r3, #0]
 80088c4:	6963      	ldr	r3, [r4, #20]
 80088c6:	3001      	adds	r0, #1
 80088c8:	4283      	cmp	r3, r0
 80088ca:	d004      	beq.n	80088d6 <__swbuf_r+0x62>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d506      	bpl.n	80088e0 <__swbuf_r+0x6c>
 80088d2:	2e0a      	cmp	r6, #10
 80088d4:	d104      	bne.n	80088e0 <__swbuf_r+0x6c>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f927 	bl	8008b2c <_fflush_r>
 80088de:	b988      	cbnz	r0, 8008904 <__swbuf_r+0x90>
 80088e0:	4638      	mov	r0, r7
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <__swbuf_r+0x9c>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d101      	bne.n	80088ee <__swbuf_r+0x7a>
 80088ea:	68ac      	ldr	r4, [r5, #8]
 80088ec:	e7cf      	b.n	800888e <__swbuf_r+0x1a>
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <__swbuf_r+0xa0>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	bf08      	it	eq
 80088f4:	68ec      	ldreq	r4, [r5, #12]
 80088f6:	e7ca      	b.n	800888e <__swbuf_r+0x1a>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 f81a 	bl	8008934 <__swsetup_r>
 8008900:	2800      	cmp	r0, #0
 8008902:	d0cb      	beq.n	800889c <__swbuf_r+0x28>
 8008904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008908:	e7ea      	b.n	80088e0 <__swbuf_r+0x6c>
 800890a:	bf00      	nop
 800890c:	0800970c 	.word	0x0800970c
 8008910:	0800972c 	.word	0x0800972c
 8008914:	080096ec 	.word	0x080096ec

08008918 <__ascii_wctomb>:
 8008918:	b149      	cbz	r1, 800892e <__ascii_wctomb+0x16>
 800891a:	2aff      	cmp	r2, #255	; 0xff
 800891c:	bf85      	ittet	hi
 800891e:	238a      	movhi	r3, #138	; 0x8a
 8008920:	6003      	strhi	r3, [r0, #0]
 8008922:	700a      	strbls	r2, [r1, #0]
 8008924:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008928:	bf98      	it	ls
 800892a:	2001      	movls	r0, #1
 800892c:	4770      	bx	lr
 800892e:	4608      	mov	r0, r1
 8008930:	4770      	bx	lr
	...

08008934 <__swsetup_r>:
 8008934:	4b32      	ldr	r3, [pc, #200]	; (8008a00 <__swsetup_r+0xcc>)
 8008936:	b570      	push	{r4, r5, r6, lr}
 8008938:	681d      	ldr	r5, [r3, #0]
 800893a:	4606      	mov	r6, r0
 800893c:	460c      	mov	r4, r1
 800893e:	b125      	cbz	r5, 800894a <__swsetup_r+0x16>
 8008940:	69ab      	ldr	r3, [r5, #24]
 8008942:	b913      	cbnz	r3, 800894a <__swsetup_r+0x16>
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f985 	bl	8008c54 <__sinit>
 800894a:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <__swsetup_r+0xd0>)
 800894c:	429c      	cmp	r4, r3
 800894e:	d10f      	bne.n	8008970 <__swsetup_r+0x3c>
 8008950:	686c      	ldr	r4, [r5, #4]
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008958:	0719      	lsls	r1, r3, #28
 800895a:	d42c      	bmi.n	80089b6 <__swsetup_r+0x82>
 800895c:	06dd      	lsls	r5, r3, #27
 800895e:	d411      	bmi.n	8008984 <__swsetup_r+0x50>
 8008960:	2309      	movs	r3, #9
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800896e:	e03e      	b.n	80089ee <__swsetup_r+0xba>
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <__swsetup_r+0xd4>)
 8008972:	429c      	cmp	r4, r3
 8008974:	d101      	bne.n	800897a <__swsetup_r+0x46>
 8008976:	68ac      	ldr	r4, [r5, #8]
 8008978:	e7eb      	b.n	8008952 <__swsetup_r+0x1e>
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <__swsetup_r+0xd8>)
 800897c:	429c      	cmp	r4, r3
 800897e:	bf08      	it	eq
 8008980:	68ec      	ldreq	r4, [r5, #12]
 8008982:	e7e6      	b.n	8008952 <__swsetup_r+0x1e>
 8008984:	0758      	lsls	r0, r3, #29
 8008986:	d512      	bpl.n	80089ae <__swsetup_r+0x7a>
 8008988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898a:	b141      	cbz	r1, 800899e <__swsetup_r+0x6a>
 800898c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008990:	4299      	cmp	r1, r3
 8008992:	d002      	beq.n	800899a <__swsetup_r+0x66>
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff fcd5 	bl	8008344 <_free_r>
 800899a:	2300      	movs	r3, #0
 800899c:	6363      	str	r3, [r4, #52]	; 0x34
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	2300      	movs	r3, #0
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f043 0308 	orr.w	r3, r3, #8
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	b94b      	cbnz	r3, 80089ce <__swsetup_r+0x9a>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c4:	d003      	beq.n	80089ce <__swsetup_r+0x9a>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 fa09 	bl	8008de0 <__smakebuf_r>
 80089ce:	89a0      	ldrh	r0, [r4, #12]
 80089d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d4:	f010 0301 	ands.w	r3, r0, #1
 80089d8:	d00a      	beq.n	80089f0 <__swsetup_r+0xbc>
 80089da:	2300      	movs	r3, #0
 80089dc:	60a3      	str	r3, [r4, #8]
 80089de:	6963      	ldr	r3, [r4, #20]
 80089e0:	425b      	negs	r3, r3
 80089e2:	61a3      	str	r3, [r4, #24]
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	b943      	cbnz	r3, 80089fa <__swsetup_r+0xc6>
 80089e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089ec:	d1ba      	bne.n	8008964 <__swsetup_r+0x30>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	0781      	lsls	r1, r0, #30
 80089f2:	bf58      	it	pl
 80089f4:	6963      	ldrpl	r3, [r4, #20]
 80089f6:	60a3      	str	r3, [r4, #8]
 80089f8:	e7f4      	b.n	80089e4 <__swsetup_r+0xb0>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e7f7      	b.n	80089ee <__swsetup_r+0xba>
 80089fe:	bf00      	nop
 8008a00:	2000000c 	.word	0x2000000c
 8008a04:	0800970c 	.word	0x0800970c
 8008a08:	0800972c 	.word	0x0800972c
 8008a0c:	080096ec 	.word	0x080096ec

08008a10 <abort>:
 8008a10:	b508      	push	{r3, lr}
 8008a12:	2006      	movs	r0, #6
 8008a14:	f000 fa4c 	bl	8008eb0 <raise>
 8008a18:	2001      	movs	r0, #1
 8008a1a:	f7f9 fd11 	bl	8002440 <_exit>
	...

08008a20 <__sflush_r>:
 8008a20:	898a      	ldrh	r2, [r1, #12]
 8008a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	4605      	mov	r5, r0
 8008a28:	0710      	lsls	r0, r2, #28
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	d458      	bmi.n	8008ae0 <__sflush_r+0xc0>
 8008a2e:	684b      	ldr	r3, [r1, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc05      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc02      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d0f9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a4c:	682f      	ldr	r7, [r5, #0]
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	d032      	beq.n	8008ab8 <__sflush_r+0x98>
 8008a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	075a      	lsls	r2, r3, #29
 8008a58:	d505      	bpl.n	8008a66 <__sflush_r+0x46>
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	1ac0      	subs	r0, r0, r3
 8008a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a60:	b10b      	cbz	r3, 8008a66 <__sflush_r+0x46>
 8008a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a64:	1ac0      	subs	r0, r0, r3
 8008a66:	2300      	movs	r3, #0
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a6c:	6a21      	ldr	r1, [r4, #32]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b0      	blx	r6
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	d106      	bne.n	8008a86 <__sflush_r+0x66>
 8008a78:	6829      	ldr	r1, [r5, #0]
 8008a7a:	291d      	cmp	r1, #29
 8008a7c:	d82c      	bhi.n	8008ad8 <__sflush_r+0xb8>
 8008a7e:	4a2a      	ldr	r2, [pc, #168]	; (8008b28 <__sflush_r+0x108>)
 8008a80:	40ca      	lsrs	r2, r1
 8008a82:	07d6      	lsls	r6, r2, #31
 8008a84:	d528      	bpl.n	8008ad8 <__sflush_r+0xb8>
 8008a86:	2200      	movs	r2, #0
 8008a88:	6062      	str	r2, [r4, #4]
 8008a8a:	04d9      	lsls	r1, r3, #19
 8008a8c:	6922      	ldr	r2, [r4, #16]
 8008a8e:	6022      	str	r2, [r4, #0]
 8008a90:	d504      	bpl.n	8008a9c <__sflush_r+0x7c>
 8008a92:	1c42      	adds	r2, r0, #1
 8008a94:	d101      	bne.n	8008a9a <__sflush_r+0x7a>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b903      	cbnz	r3, 8008a9c <__sflush_r+0x7c>
 8008a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	602f      	str	r7, [r5, #0]
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d0ca      	beq.n	8008a3a <__sflush_r+0x1a>
 8008aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d002      	beq.n	8008ab2 <__sflush_r+0x92>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff fc49 	bl	8008344 <_free_r>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab6:	e7c1      	b.n	8008a3c <__sflush_r+0x1c>
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	1c41      	adds	r1, r0, #1
 8008ac2:	d1c7      	bne.n	8008a54 <__sflush_r+0x34>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0c4      	beq.n	8008a54 <__sflush_r+0x34>
 8008aca:	2b1d      	cmp	r3, #29
 8008acc:	d001      	beq.n	8008ad2 <__sflush_r+0xb2>
 8008ace:	2b16      	cmp	r3, #22
 8008ad0:	d101      	bne.n	8008ad6 <__sflush_r+0xb6>
 8008ad2:	602f      	str	r7, [r5, #0]
 8008ad4:	e7b1      	b.n	8008a3a <__sflush_r+0x1a>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	e7ad      	b.n	8008a3c <__sflush_r+0x1c>
 8008ae0:	690f      	ldr	r7, [r1, #16]
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d0a9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008ae6:	0793      	lsls	r3, r2, #30
 8008ae8:	680e      	ldr	r6, [r1, #0]
 8008aea:	bf08      	it	eq
 8008aec:	694b      	ldreq	r3, [r1, #20]
 8008aee:	600f      	str	r7, [r1, #0]
 8008af0:	bf18      	it	ne
 8008af2:	2300      	movne	r3, #0
 8008af4:	eba6 0807 	sub.w	r8, r6, r7
 8008af8:	608b      	str	r3, [r1, #8]
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	dd9c      	ble.n	8008a3a <__sflush_r+0x1a>
 8008b00:	6a21      	ldr	r1, [r4, #32]
 8008b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b04:	4643      	mov	r3, r8
 8008b06:	463a      	mov	r2, r7
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b0      	blx	r6
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	dc06      	bgt.n	8008b1e <__sflush_r+0xfe>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b1c:	e78e      	b.n	8008a3c <__sflush_r+0x1c>
 8008b1e:	4407      	add	r7, r0
 8008b20:	eba8 0800 	sub.w	r8, r8, r0
 8008b24:	e7e9      	b.n	8008afa <__sflush_r+0xda>
 8008b26:	bf00      	nop
 8008b28:	20400001 	.word	0x20400001

08008b2c <_fflush_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b913      	cbnz	r3, 8008b3c <_fflush_r+0x10>
 8008b36:	2500      	movs	r5, #0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	b118      	cbz	r0, 8008b46 <_fflush_r+0x1a>
 8008b3e:	6983      	ldr	r3, [r0, #24]
 8008b40:	b90b      	cbnz	r3, 8008b46 <_fflush_r+0x1a>
 8008b42:	f000 f887 	bl	8008c54 <__sinit>
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <_fflush_r+0x6c>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d11b      	bne.n	8008b84 <_fflush_r+0x58>
 8008b4c:	686c      	ldr	r4, [r5, #4]
 8008b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0ef      	beq.n	8008b36 <_fflush_r+0xa>
 8008b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b58:	07d0      	lsls	r0, r2, #31
 8008b5a:	d404      	bmi.n	8008b66 <_fflush_r+0x3a>
 8008b5c:	0599      	lsls	r1, r3, #22
 8008b5e:	d402      	bmi.n	8008b66 <_fflush_r+0x3a>
 8008b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b62:	f000 f915 	bl	8008d90 <__retarget_lock_acquire_recursive>
 8008b66:	4628      	mov	r0, r5
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f7ff ff59 	bl	8008a20 <__sflush_r>
 8008b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b70:	07da      	lsls	r2, r3, #31
 8008b72:	4605      	mov	r5, r0
 8008b74:	d4e0      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	059b      	lsls	r3, r3, #22
 8008b7a:	d4dd      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7e:	f000 f908 	bl	8008d92 <__retarget_lock_release_recursive>
 8008b82:	e7d9      	b.n	8008b38 <_fflush_r+0xc>
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <_fflush_r+0x70>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	d101      	bne.n	8008b8e <_fflush_r+0x62>
 8008b8a:	68ac      	ldr	r4, [r5, #8]
 8008b8c:	e7df      	b.n	8008b4e <_fflush_r+0x22>
 8008b8e:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <_fflush_r+0x74>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	bf08      	it	eq
 8008b94:	68ec      	ldreq	r4, [r5, #12]
 8008b96:	e7da      	b.n	8008b4e <_fflush_r+0x22>
 8008b98:	0800970c 	.word	0x0800970c
 8008b9c:	0800972c 	.word	0x0800972c
 8008ba0:	080096ec 	.word	0x080096ec

08008ba4 <std>:
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	4604      	mov	r4, r0
 8008baa:	e9c0 3300 	strd	r3, r3, [r0]
 8008bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bb2:	6083      	str	r3, [r0, #8]
 8008bb4:	8181      	strh	r1, [r0, #12]
 8008bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8008bb8:	81c2      	strh	r2, [r0, #14]
 8008bba:	6183      	str	r3, [r0, #24]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	305c      	adds	r0, #92	; 0x5c
 8008bc2:	f7fd fd1f 	bl	8006604 <memset>
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <std+0x38>)
 8008bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8008bca:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <std+0x3c>)
 8008bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bce:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <std+0x40>)
 8008bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <std+0x44>)
 8008bd4:	6224      	str	r4, [r4, #32]
 8008bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	bf00      	nop
 8008bdc:	08008ee9 	.word	0x08008ee9
 8008be0:	08008f0b 	.word	0x08008f0b
 8008be4:	08008f43 	.word	0x08008f43
 8008be8:	08008f67 	.word	0x08008f67

08008bec <_cleanup_r>:
 8008bec:	4901      	ldr	r1, [pc, #4]	; (8008bf4 <_cleanup_r+0x8>)
 8008bee:	f000 b8af 	b.w	8008d50 <_fwalk_reent>
 8008bf2:	bf00      	nop
 8008bf4:	08008b2d 	.word	0x08008b2d

08008bf8 <__sfmoreglue>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	2268      	movs	r2, #104	; 0x68
 8008bfc:	1e4d      	subs	r5, r1, #1
 8008bfe:	4355      	muls	r5, r2
 8008c00:	460e      	mov	r6, r1
 8008c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c06:	f7ff fc09 	bl	800841c <_malloc_r>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b140      	cbz	r0, 8008c20 <__sfmoreglue+0x28>
 8008c0e:	2100      	movs	r1, #0
 8008c10:	e9c0 1600 	strd	r1, r6, [r0]
 8008c14:	300c      	adds	r0, #12
 8008c16:	60a0      	str	r0, [r4, #8]
 8008c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c1c:	f7fd fcf2 	bl	8006604 <memset>
 8008c20:	4620      	mov	r0, r4
 8008c22:	bd70      	pop	{r4, r5, r6, pc}

08008c24 <__sfp_lock_acquire>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__sfp_lock_acquire+0x8>)
 8008c26:	f000 b8b3 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000445 	.word	0x20000445

08008c30 <__sfp_lock_release>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sfp_lock_release+0x8>)
 8008c32:	f000 b8ae 	b.w	8008d92 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20000445 	.word	0x20000445

08008c3c <__sinit_lock_acquire>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sinit_lock_acquire+0x8>)
 8008c3e:	f000 b8a7 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 8008c42:	bf00      	nop
 8008c44:	20000446 	.word	0x20000446

08008c48 <__sinit_lock_release>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sinit_lock_release+0x8>)
 8008c4a:	f000 b8a2 	b.w	8008d92 <__retarget_lock_release_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20000446 	.word	0x20000446

08008c54 <__sinit>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	4604      	mov	r4, r0
 8008c58:	f7ff fff0 	bl	8008c3c <__sinit_lock_acquire>
 8008c5c:	69a3      	ldr	r3, [r4, #24]
 8008c5e:	b11b      	cbz	r3, 8008c68 <__sinit+0x14>
 8008c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c64:	f7ff bff0 	b.w	8008c48 <__sinit_lock_release>
 8008c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c6e:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <__sinit+0x68>)
 8008c70:	4a13      	ldr	r2, [pc, #76]	; (8008cc0 <__sinit+0x6c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	bf04      	itt	eq
 8008c7a:	2301      	moveq	r3, #1
 8008c7c:	61a3      	streq	r3, [r4, #24]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f820 	bl	8008cc4 <__sfp>
 8008c84:	6060      	str	r0, [r4, #4]
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 f81c 	bl	8008cc4 <__sfp>
 8008c8c:	60a0      	str	r0, [r4, #8]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 f818 	bl	8008cc4 <__sfp>
 8008c94:	2200      	movs	r2, #0
 8008c96:	60e0      	str	r0, [r4, #12]
 8008c98:	2104      	movs	r1, #4
 8008c9a:	6860      	ldr	r0, [r4, #4]
 8008c9c:	f7ff ff82 	bl	8008ba4 <std>
 8008ca0:	68a0      	ldr	r0, [r4, #8]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	2109      	movs	r1, #9
 8008ca6:	f7ff ff7d 	bl	8008ba4 <std>
 8008caa:	68e0      	ldr	r0, [r4, #12]
 8008cac:	2202      	movs	r2, #2
 8008cae:	2112      	movs	r1, #18
 8008cb0:	f7ff ff78 	bl	8008ba4 <std>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	61a3      	str	r3, [r4, #24]
 8008cb8:	e7d2      	b.n	8008c60 <__sinit+0xc>
 8008cba:	bf00      	nop
 8008cbc:	08009370 	.word	0x08009370
 8008cc0:	08008bed 	.word	0x08008bed

08008cc4 <__sfp>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f7ff ffac 	bl	8008c24 <__sfp_lock_acquire>
 8008ccc:	4b1e      	ldr	r3, [pc, #120]	; (8008d48 <__sfp+0x84>)
 8008cce:	681e      	ldr	r6, [r3, #0]
 8008cd0:	69b3      	ldr	r3, [r6, #24]
 8008cd2:	b913      	cbnz	r3, 8008cda <__sfp+0x16>
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff ffbd 	bl	8008c54 <__sinit>
 8008cda:	3648      	adds	r6, #72	; 0x48
 8008cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	d503      	bpl.n	8008cec <__sfp+0x28>
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	b30b      	cbz	r3, 8008d2c <__sfp+0x68>
 8008ce8:	6836      	ldr	r6, [r6, #0]
 8008cea:	e7f7      	b.n	8008cdc <__sfp+0x18>
 8008cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cf0:	b9d5      	cbnz	r5, 8008d28 <__sfp+0x64>
 8008cf2:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <__sfp+0x88>)
 8008cf4:	60e3      	str	r3, [r4, #12]
 8008cf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8008cfc:	f000 f847 	bl	8008d8e <__retarget_lock_init_recursive>
 8008d00:	f7ff ff96 	bl	8008c30 <__sfp_lock_release>
 8008d04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d0c:	6025      	str	r5, [r4, #0]
 8008d0e:	61a5      	str	r5, [r4, #24]
 8008d10:	2208      	movs	r2, #8
 8008d12:	4629      	mov	r1, r5
 8008d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d18:	f7fd fc74 	bl	8006604 <memset>
 8008d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d24:	4620      	mov	r0, r4
 8008d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d28:	3468      	adds	r4, #104	; 0x68
 8008d2a:	e7d9      	b.n	8008ce0 <__sfp+0x1c>
 8008d2c:	2104      	movs	r1, #4
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ff62 	bl	8008bf8 <__sfmoreglue>
 8008d34:	4604      	mov	r4, r0
 8008d36:	6030      	str	r0, [r6, #0]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d1d5      	bne.n	8008ce8 <__sfp+0x24>
 8008d3c:	f7ff ff78 	bl	8008c30 <__sfp_lock_release>
 8008d40:	230c      	movs	r3, #12
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	e7ee      	b.n	8008d24 <__sfp+0x60>
 8008d46:	bf00      	nop
 8008d48:	08009370 	.word	0x08009370
 8008d4c:	ffff0001 	.word	0xffff0001

08008d50 <_fwalk_reent>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	4606      	mov	r6, r0
 8008d56:	4688      	mov	r8, r1
 8008d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d5c:	2700      	movs	r7, #0
 8008d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d62:	f1b9 0901 	subs.w	r9, r9, #1
 8008d66:	d505      	bpl.n	8008d74 <_fwalk_reent+0x24>
 8008d68:	6824      	ldr	r4, [r4, #0]
 8008d6a:	2c00      	cmp	r4, #0
 8008d6c:	d1f7      	bne.n	8008d5e <_fwalk_reent+0xe>
 8008d6e:	4638      	mov	r0, r7
 8008d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d74:	89ab      	ldrh	r3, [r5, #12]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d907      	bls.n	8008d8a <_fwalk_reent+0x3a>
 8008d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	d003      	beq.n	8008d8a <_fwalk_reent+0x3a>
 8008d82:	4629      	mov	r1, r5
 8008d84:	4630      	mov	r0, r6
 8008d86:	47c0      	blx	r8
 8008d88:	4307      	orrs	r7, r0
 8008d8a:	3568      	adds	r5, #104	; 0x68
 8008d8c:	e7e9      	b.n	8008d62 <_fwalk_reent+0x12>

08008d8e <__retarget_lock_init_recursive>:
 8008d8e:	4770      	bx	lr

08008d90 <__retarget_lock_acquire_recursive>:
 8008d90:	4770      	bx	lr

08008d92 <__retarget_lock_release_recursive>:
 8008d92:	4770      	bx	lr

08008d94 <__swhatbuf_r>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	460e      	mov	r6, r1
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	b096      	sub	sp, #88	; 0x58
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	da08      	bge.n	8008db8 <__swhatbuf_r+0x24>
 8008da6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	602a      	str	r2, [r5, #0]
 8008dae:	061a      	lsls	r2, r3, #24
 8008db0:	d410      	bmi.n	8008dd4 <__swhatbuf_r+0x40>
 8008db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008db6:	e00e      	b.n	8008dd6 <__swhatbuf_r+0x42>
 8008db8:	466a      	mov	r2, sp
 8008dba:	f000 f8fb 	bl	8008fb4 <_fstat_r>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	dbf1      	blt.n	8008da6 <__swhatbuf_r+0x12>
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dcc:	425a      	negs	r2, r3
 8008dce:	415a      	adcs	r2, r3
 8008dd0:	602a      	str	r2, [r5, #0]
 8008dd2:	e7ee      	b.n	8008db2 <__swhatbuf_r+0x1e>
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	b016      	add	sp, #88	; 0x58
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008de0 <__smakebuf_r>:
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008de4:	079d      	lsls	r5, r3, #30
 8008de6:	4606      	mov	r6, r0
 8008de8:	460c      	mov	r4, r1
 8008dea:	d507      	bpl.n	8008dfc <__smakebuf_r+0x1c>
 8008dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	2301      	movs	r3, #1
 8008df6:	6163      	str	r3, [r4, #20]
 8008df8:	b002      	add	sp, #8
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	ab01      	add	r3, sp, #4
 8008dfe:	466a      	mov	r2, sp
 8008e00:	f7ff ffc8 	bl	8008d94 <__swhatbuf_r>
 8008e04:	9900      	ldr	r1, [sp, #0]
 8008e06:	4605      	mov	r5, r0
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff fb07 	bl	800841c <_malloc_r>
 8008e0e:	b948      	cbnz	r0, 8008e24 <__smakebuf_r+0x44>
 8008e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d4ef      	bmi.n	8008df8 <__smakebuf_r+0x18>
 8008e18:	f023 0303 	bic.w	r3, r3, #3
 8008e1c:	f043 0302 	orr.w	r3, r3, #2
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	e7e3      	b.n	8008dec <__smakebuf_r+0xc>
 8008e24:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <__smakebuf_r+0x7c>)
 8008e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	6020      	str	r0, [r4, #0]
 8008e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e30:	81a3      	strh	r3, [r4, #12]
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	6163      	str	r3, [r4, #20]
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	6120      	str	r0, [r4, #16]
 8008e3a:	b15b      	cbz	r3, 8008e54 <__smakebuf_r+0x74>
 8008e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f8c9 	bl	8008fd8 <_isatty_r>
 8008e46:	b128      	cbz	r0, 8008e54 <__smakebuf_r+0x74>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	89a0      	ldrh	r0, [r4, #12]
 8008e56:	4305      	orrs	r5, r0
 8008e58:	81a5      	strh	r5, [r4, #12]
 8008e5a:	e7cd      	b.n	8008df8 <__smakebuf_r+0x18>
 8008e5c:	08008bed 	.word	0x08008bed

08008e60 <_raise_r>:
 8008e60:	291f      	cmp	r1, #31
 8008e62:	b538      	push	{r3, r4, r5, lr}
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	d904      	bls.n	8008e74 <_raise_r+0x14>
 8008e6a:	2316      	movs	r3, #22
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e76:	b112      	cbz	r2, 8008e7e <_raise_r+0x1e>
 8008e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e7c:	b94b      	cbnz	r3, 8008e92 <_raise_r+0x32>
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f830 	bl	8008ee4 <_getpid_r>
 8008e84:	462a      	mov	r2, r5
 8008e86:	4601      	mov	r1, r0
 8008e88:	4620      	mov	r0, r4
 8008e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e8e:	f000 b817 	b.w	8008ec0 <_kill_r>
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d00a      	beq.n	8008eac <_raise_r+0x4c>
 8008e96:	1c59      	adds	r1, r3, #1
 8008e98:	d103      	bne.n	8008ea2 <_raise_r+0x42>
 8008e9a:	2316      	movs	r3, #22
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e7e7      	b.n	8008e72 <_raise_r+0x12>
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	4798      	blx	r3
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7e0      	b.n	8008e72 <_raise_r+0x12>

08008eb0 <raise>:
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <raise+0xc>)
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	f7ff bfd3 	b.w	8008e60 <_raise_r>
 8008eba:	bf00      	nop
 8008ebc:	2000000c 	.word	0x2000000c

08008ec0 <_kill_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	; (8008ee0 <_kill_r+0x20>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	f7f9 faa7 	bl	8002420 <_kill>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d102      	bne.n	8008edc <_kill_r+0x1c>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b103      	cbz	r3, 8008edc <_kill_r+0x1c>
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000440 	.word	0x20000440

08008ee4 <_getpid_r>:
 8008ee4:	f7f9 ba94 	b.w	8002410 <_getpid>

08008ee8 <__sread>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	f000 f894 	bl	800901c <_read_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	bfab      	itete	ge
 8008ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008efa:	89a3      	ldrhlt	r3, [r4, #12]
 8008efc:	181b      	addge	r3, r3, r0
 8008efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f02:	bfac      	ite	ge
 8008f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f06:	81a3      	strhlt	r3, [r4, #12]
 8008f08:	bd10      	pop	{r4, pc}

08008f0a <__swrite>:
 8008f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	461f      	mov	r7, r3
 8008f10:	898b      	ldrh	r3, [r1, #12]
 8008f12:	05db      	lsls	r3, r3, #23
 8008f14:	4605      	mov	r5, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	4616      	mov	r6, r2
 8008f1a:	d505      	bpl.n	8008f28 <__swrite+0x1e>
 8008f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f20:	2302      	movs	r3, #2
 8008f22:	2200      	movs	r2, #0
 8008f24:	f000 f868 	bl	8008ff8 <_lseek_r>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	4628      	mov	r0, r5
 8008f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	f000 b817 	b.w	8008f70 <_write_r>

08008f42 <__sseek>:
 8008f42:	b510      	push	{r4, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4a:	f000 f855 	bl	8008ff8 <_lseek_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	bf15      	itete	ne
 8008f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f5e:	81a3      	strheq	r3, [r4, #12]
 8008f60:	bf18      	it	ne
 8008f62:	81a3      	strhne	r3, [r4, #12]
 8008f64:	bd10      	pop	{r4, pc}

08008f66 <__sclose>:
 8008f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6a:	f000 b813 	b.w	8008f94 <_close_r>
	...

08008f70 <_write_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	; (8008f90 <_write_r+0x20>)
 8008f74:	4604      	mov	r4, r0
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f9 fa85 	bl	800248e <_write>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_write_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_write_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20000440 	.word	0x20000440

08008f94 <_close_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d06      	ldr	r5, [pc, #24]	; (8008fb0 <_close_r+0x1c>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f9 fa91 	bl	80024c6 <_close>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_close_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_close_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	20000440 	.word	0x20000440

08008fb4 <_fstat_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d07      	ldr	r5, [pc, #28]	; (8008fd4 <_fstat_r+0x20>)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	f7f9 fa8c 	bl	80024de <_fstat>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d102      	bne.n	8008fd0 <_fstat_r+0x1c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b103      	cbz	r3, 8008fd0 <_fstat_r+0x1c>
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000440 	.word	0x20000440

08008fd8 <_isatty_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d06      	ldr	r5, [pc, #24]	; (8008ff4 <_isatty_r+0x1c>)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4604      	mov	r4, r0
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	f7f9 fa8b 	bl	80024fe <_isatty>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_isatty_r+0x1a>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_isatty_r+0x1a>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20000440 	.word	0x20000440

08008ff8 <_lseek_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_lseek_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f9 fa84 	bl	8002514 <_lseek>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_lseek_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_lseek_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000440 	.word	0x20000440

0800901c <_read_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	; (800903c <_read_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f9 fa12 	bl	8002454 <_read>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_read_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_read_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000440 	.word	0x20000440

08009040 <atan2f>:
 8009040:	f000 b800 	b.w	8009044 <__ieee754_atan2f>

08009044 <__ieee754_atan2f>:
 8009044:	ee10 2a90 	vmov	r2, s1
 8009048:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800904c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009050:	b510      	push	{r4, lr}
 8009052:	eef0 7a40 	vmov.f32	s15, s0
 8009056:	dc06      	bgt.n	8009066 <__ieee754_atan2f+0x22>
 8009058:	ee10 0a10 	vmov	r0, s0
 800905c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009060:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009064:	dd04      	ble.n	8009070 <__ieee754_atan2f+0x2c>
 8009066:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800906a:	eeb0 0a67 	vmov.f32	s0, s15
 800906e:	bd10      	pop	{r4, pc}
 8009070:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009074:	d103      	bne.n	800907e <__ieee754_atan2f+0x3a>
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907a:	f000 b883 	b.w	8009184 <atanf>
 800907e:	1794      	asrs	r4, r2, #30
 8009080:	f004 0402 	and.w	r4, r4, #2
 8009084:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009088:	b943      	cbnz	r3, 800909c <__ieee754_atan2f+0x58>
 800908a:	2c02      	cmp	r4, #2
 800908c:	d05e      	beq.n	800914c <__ieee754_atan2f+0x108>
 800908e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009160 <__ieee754_atan2f+0x11c>
 8009092:	2c03      	cmp	r4, #3
 8009094:	bf08      	it	eq
 8009096:	eef0 7a47 	vmoveq.f32	s15, s14
 800909a:	e7e6      	b.n	800906a <__ieee754_atan2f+0x26>
 800909c:	b941      	cbnz	r1, 80090b0 <__ieee754_atan2f+0x6c>
 800909e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009164 <__ieee754_atan2f+0x120>
 80090a2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009168 <__ieee754_atan2f+0x124>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	bfb8      	it	lt
 80090aa:	eef0 7a40 	vmovlt.f32	s15, s0
 80090ae:	e7dc      	b.n	800906a <__ieee754_atan2f+0x26>
 80090b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090b4:	d110      	bne.n	80090d8 <__ieee754_atan2f+0x94>
 80090b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80090be:	d107      	bne.n	80090d0 <__ieee754_atan2f+0x8c>
 80090c0:	2c02      	cmp	r4, #2
 80090c2:	d846      	bhi.n	8009152 <__ieee754_atan2f+0x10e>
 80090c4:	4b29      	ldr	r3, [pc, #164]	; (800916c <__ieee754_atan2f+0x128>)
 80090c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090ca:	edd4 7a00 	vldr	s15, [r4]
 80090ce:	e7cc      	b.n	800906a <__ieee754_atan2f+0x26>
 80090d0:	2c02      	cmp	r4, #2
 80090d2:	d841      	bhi.n	8009158 <__ieee754_atan2f+0x114>
 80090d4:	4b26      	ldr	r3, [pc, #152]	; (8009170 <__ieee754_atan2f+0x12c>)
 80090d6:	e7f6      	b.n	80090c6 <__ieee754_atan2f+0x82>
 80090d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090dc:	d0df      	beq.n	800909e <__ieee754_atan2f+0x5a>
 80090de:	1a5b      	subs	r3, r3, r1
 80090e0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80090e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80090e8:	da1a      	bge.n	8009120 <__ieee754_atan2f+0xdc>
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	da01      	bge.n	80090f2 <__ieee754_atan2f+0xae>
 80090ee:	313c      	adds	r1, #60	; 0x3c
 80090f0:	db19      	blt.n	8009126 <__ieee754_atan2f+0xe2>
 80090f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80090f6:	f000 f919 	bl	800932c <fabsf>
 80090fa:	f000 f843 	bl	8009184 <atanf>
 80090fe:	eef0 7a40 	vmov.f32	s15, s0
 8009102:	2c01      	cmp	r4, #1
 8009104:	d012      	beq.n	800912c <__ieee754_atan2f+0xe8>
 8009106:	2c02      	cmp	r4, #2
 8009108:	d017      	beq.n	800913a <__ieee754_atan2f+0xf6>
 800910a:	2c00      	cmp	r4, #0
 800910c:	d0ad      	beq.n	800906a <__ieee754_atan2f+0x26>
 800910e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009174 <__ieee754_atan2f+0x130>
 8009112:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009116:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009178 <__ieee754_atan2f+0x134>
 800911a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800911e:	e7a4      	b.n	800906a <__ieee754_atan2f+0x26>
 8009120:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009164 <__ieee754_atan2f+0x120>
 8009124:	e7ed      	b.n	8009102 <__ieee754_atan2f+0xbe>
 8009126:	eddf 7a15 	vldr	s15, [pc, #84]	; 800917c <__ieee754_atan2f+0x138>
 800912a:	e7ea      	b.n	8009102 <__ieee754_atan2f+0xbe>
 800912c:	ee17 3a90 	vmov	r3, s15
 8009130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009134:	ee07 3a90 	vmov	s15, r3
 8009138:	e797      	b.n	800906a <__ieee754_atan2f+0x26>
 800913a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009174 <__ieee754_atan2f+0x130>
 800913e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009142:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009178 <__ieee754_atan2f+0x134>
 8009146:	ee70 7a67 	vsub.f32	s15, s0, s15
 800914a:	e78e      	b.n	800906a <__ieee754_atan2f+0x26>
 800914c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009178 <__ieee754_atan2f+0x134>
 8009150:	e78b      	b.n	800906a <__ieee754_atan2f+0x26>
 8009152:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009180 <__ieee754_atan2f+0x13c>
 8009156:	e788      	b.n	800906a <__ieee754_atan2f+0x26>
 8009158:	eddf 7a08 	vldr	s15, [pc, #32]	; 800917c <__ieee754_atan2f+0x138>
 800915c:	e785      	b.n	800906a <__ieee754_atan2f+0x26>
 800915e:	bf00      	nop
 8009160:	c0490fdb 	.word	0xc0490fdb
 8009164:	3fc90fdb 	.word	0x3fc90fdb
 8009168:	bfc90fdb 	.word	0xbfc90fdb
 800916c:	0800974c 	.word	0x0800974c
 8009170:	08009758 	.word	0x08009758
 8009174:	33bbbd2e 	.word	0x33bbbd2e
 8009178:	40490fdb 	.word	0x40490fdb
 800917c:	00000000 	.word	0x00000000
 8009180:	3f490fdb 	.word	0x3f490fdb

08009184 <atanf>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	ee10 5a10 	vmov	r5, s0
 800918a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800918e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009192:	eef0 7a40 	vmov.f32	s15, s0
 8009196:	db10      	blt.n	80091ba <atanf+0x36>
 8009198:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800919c:	dd04      	ble.n	80091a8 <atanf+0x24>
 800919e:	ee70 7a00 	vadd.f32	s15, s0, s0
 80091a2:	eeb0 0a67 	vmov.f32	s0, s15
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80092e0 <atanf+0x15c>
 80091ac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80092e4 <atanf+0x160>
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	bfd8      	it	le
 80091b4:	eef0 7a40 	vmovle.f32	s15, s0
 80091b8:	e7f3      	b.n	80091a2 <atanf+0x1e>
 80091ba:	4b4b      	ldr	r3, [pc, #300]	; (80092e8 <atanf+0x164>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	dc10      	bgt.n	80091e2 <atanf+0x5e>
 80091c0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80091c4:	da0a      	bge.n	80091dc <atanf+0x58>
 80091c6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80092ec <atanf+0x168>
 80091ca:	ee30 7a07 	vadd.f32	s14, s0, s14
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80091d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091da:	dce2      	bgt.n	80091a2 <atanf+0x1e>
 80091dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091e0:	e013      	b.n	800920a <atanf+0x86>
 80091e2:	f000 f8a3 	bl	800932c <fabsf>
 80091e6:	4b42      	ldr	r3, [pc, #264]	; (80092f0 <atanf+0x16c>)
 80091e8:	429c      	cmp	r4, r3
 80091ea:	dc4f      	bgt.n	800928c <atanf+0x108>
 80091ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80091f0:	429c      	cmp	r4, r3
 80091f2:	dc41      	bgt.n	8009278 <atanf+0xf4>
 80091f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80091f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80091fc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009200:	2300      	movs	r3, #0
 8009202:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009206:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009210:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80092f4 <atanf+0x170>
 8009214:	eddf 5a38 	vldr	s11, [pc, #224]	; 80092f8 <atanf+0x174>
 8009218:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80092fc <atanf+0x178>
 800921c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009220:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009224:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009300 <atanf+0x17c>
 8009228:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800922c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009304 <atanf+0x180>
 8009230:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009234:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009308 <atanf+0x184>
 8009238:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800923c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800930c <atanf+0x188>
 8009240:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009244:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009310 <atanf+0x18c>
 8009248:	eea6 5a87 	vfma.f32	s10, s13, s14
 800924c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009314 <atanf+0x190>
 8009250:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009254:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009318 <atanf+0x194>
 8009258:	eea7 5a26 	vfma.f32	s10, s14, s13
 800925c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800931c <atanf+0x198>
 8009260:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009264:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009268:	eea5 7a86 	vfma.f32	s14, s11, s12
 800926c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009270:	d121      	bne.n	80092b6 <atanf+0x132>
 8009272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009276:	e794      	b.n	80091a2 <atanf+0x1e>
 8009278:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800927c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009280:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009284:	2301      	movs	r3, #1
 8009286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800928a:	e7be      	b.n	800920a <atanf+0x86>
 800928c:	4b24      	ldr	r3, [pc, #144]	; (8009320 <atanf+0x19c>)
 800928e:	429c      	cmp	r4, r3
 8009290:	dc0b      	bgt.n	80092aa <atanf+0x126>
 8009292:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800929a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800929e:	2302      	movs	r3, #2
 80092a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80092a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a8:	e7af      	b.n	800920a <atanf+0x86>
 80092aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80092ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80092b2:	2303      	movs	r3, #3
 80092b4:	e7a9      	b.n	800920a <atanf+0x86>
 80092b6:	4a1b      	ldr	r2, [pc, #108]	; (8009324 <atanf+0x1a0>)
 80092b8:	491b      	ldr	r1, [pc, #108]	; (8009328 <atanf+0x1a4>)
 80092ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80092be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80092c2:	ed93 0a00 	vldr	s0, [r3]
 80092c6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80092ca:	ed92 0a00 	vldr	s0, [r2]
 80092ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80092d8:	bfb8      	it	lt
 80092da:	eef1 7a67 	vneglt.f32	s15, s15
 80092de:	e760      	b.n	80091a2 <atanf+0x1e>
 80092e0:	3fc90fdb 	.word	0x3fc90fdb
 80092e4:	bfc90fdb 	.word	0xbfc90fdb
 80092e8:	3edfffff 	.word	0x3edfffff
 80092ec:	7149f2ca 	.word	0x7149f2ca
 80092f0:	3f97ffff 	.word	0x3f97ffff
 80092f4:	3c8569d7 	.word	0x3c8569d7
 80092f8:	3d4bda59 	.word	0x3d4bda59
 80092fc:	bd6ef16b 	.word	0xbd6ef16b
 8009300:	3d886b35 	.word	0x3d886b35
 8009304:	3dba2e6e 	.word	0x3dba2e6e
 8009308:	3e124925 	.word	0x3e124925
 800930c:	3eaaaaab 	.word	0x3eaaaaab
 8009310:	bd15a221 	.word	0xbd15a221
 8009314:	bd9d8795 	.word	0xbd9d8795
 8009318:	bde38e38 	.word	0xbde38e38
 800931c:	be4ccccd 	.word	0xbe4ccccd
 8009320:	401bffff 	.word	0x401bffff
 8009324:	08009764 	.word	0x08009764
 8009328:	08009774 	.word	0x08009774

0800932c <fabsf>:
 800932c:	ee10 3a10 	vmov	r3, s0
 8009330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009334:	ee00 3a10 	vmov	s0, r3
 8009338:	4770      	bx	lr
	...

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
